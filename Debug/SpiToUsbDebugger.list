
SpiToUsbDebugger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800e084  0800e084  0001e084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e10c  0800e10c  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800e10c  0800e10c  0001e10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e114  0800e114  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e114  0800e114  0001e114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e118  0800e118  0001e118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  24000000  0800e11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002520  24000184  0800e2a0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000704  240026a4  0800e2a0  000226a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003447f  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051e1  00000000  00000000  00054631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00059818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  0005b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b58d  00000000  00000000  0005c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023626  00000000  00000000  00097eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016b27d  00000000  00000000  000bb513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00226790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c44  00000000  00000000  002267e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000184 	.word	0x24000184
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e06c 	.word	0x0800e06c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000188 	.word	0x24000188
 80002d4:	0800e06c 	.word	0x0800e06c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)&gData_from_spi, 4);
 80005da:	2204      	movs	r2, #4
 80005dc:	4905      	ldr	r1, [pc, #20]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80005e0:	f007 fae4 	bl	8007bac <HAL_SPI_Receive_DMA>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005e4:	2006      	movs	r0, #6
 80005e6:	f000 ff82 	bl	80014ee <HAL_NVIC_DisableIRQ>

}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	240005a4 	.word	0x240005a4
 80005f8:	240004a4 	.word	0x240004a4

080005fc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	CDC_TransmitWithFifo_FS((uint8_t*)&gData_from_spi, sizeof(gData_from_spi));
 8000604:	2104      	movs	r1, #4
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <HAL_SPI_RxCpltCallback+0x18>)
 8000608:	f00d f86e 	bl	800d6e8 <CDC_TransmitWithFifo_FS>
//			CDC_TransmitWithFifo_FS((uint8_t*)&gDataAssembly, sizeof(gDataAssembly));
//		state = 0;
//		break;
//	}

}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	240005a4 	.word	0x240005a4

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fd7d 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f825 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f9af 	bl	8000988 <MX_GPIO_Init>
  MX_DMA_Init();
 800062a:	f000 f98d 	bl	8000948 <MX_DMA_Init>
  MX_SPI1_Init();
 800062e:	f000 f89b 	bl	8000768 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000632:	f000 f93d 	bl	80008b0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000636:	f00c fe7f 	bl	800d338 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800063a:	f000 f8e5 	bl	8000808 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 10);
 800063e:	220a      	movs	r2, #10
 8000640:	210a      	movs	r1, #10
 8000642:	2006      	movs	r0, #6
 8000644:	f000 ff2b 	bl	800149e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000648:	2006      	movs	r0, #6
 800064a:	f000 ff42 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(FlushFlag)
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <main+0x54>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0fb      	beq.n	800064e <main+0x36>
	  {
		  uint8_t retval = CDC_TxFifoFlush();
 8000656:	f00d f811 	bl	800d67c <CDC_TxFifoFlush>
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
		  if(retval == 0)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1f4      	bne.n	800064e <main+0x36>
		  {
			  FlushFlag = 0;
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <main+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
	  if(FlushFlag)
 800066a:	e7f0      	b.n	800064e <main+0x36>
 800066c:	240001a1 	.word	0x240001a1

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09c      	sub	sp, #112	; 0x70
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	224c      	movs	r2, #76	; 0x4c
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00d fcec 	bl	800e05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2220      	movs	r2, #32
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00d fce6 	bl	800e05c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000690:	2002      	movs	r0, #2
 8000692:	f004 fe21 	bl	80052d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <SystemClock_Config+0xf0>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	4a30      	ldr	r2, [pc, #192]	; (8000760 <SystemClock_Config+0xf0>)
 80006a0:	f023 0301 	bic.w	r3, r3, #1
 80006a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <SystemClock_Config+0xf0>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <SystemClock_Config+0xf4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <SystemClock_Config+0xf4>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xf4>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006cc:	bf00      	nop
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xf4>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006da:	d1f8      	bne.n	80006ce <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	2302      	movs	r3, #2
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006f2:	2318      	movs	r3, #24
 80006f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000702:	230c      	movs	r3, #12
 8000704:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000706:	2300      	movs	r3, #0
 8000708:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fe2a 	bl	800536c <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800071e:	f000 fa79 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	233f      	movs	r3, #63	; 0x3f
 8000724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2303      	movs	r3, #3
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f005 fa3c 	bl	8005bc4 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000752:	f000 fa5f 	bl	8000c14 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3770      	adds	r7, #112	; 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58000400 	.word	0x58000400
 8000764:	58024800 	.word	0x58024800

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_SPI1_Init+0x98>)
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_SPI1_Init+0x9c>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_SPI1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_SPI1_Init+0x98>)
 800077a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_SPI1_Init+0x98>)
 8000782:	2207      	movs	r2, #7
 8000784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_SPI1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_SPI1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_SPI1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_SPI1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_SPI1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_SPI1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_SPI1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_SPI1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_SPI1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SPI1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SPI1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI1_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SPI1_Init+0x98>)
 80007ee:	f007 f8d7 	bl	80079a0 <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 80007f8:	f000 fa0c 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	240004a4 	.word	0x240004a4
 8000804:	40013000 	.word	0x40013000

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000828:	4a20      	ldr	r2, [pc, #128]	; (80008ac <MX_TIM1_Init+0xa4>)
 800082a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800082e:	225f      	movs	r2, #95	; 0x5f
 8000830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 333;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800083a:	f240 124d 	movw	r2, #333	; 0x14d
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_TIM1_Init+0xa0>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000854:	f008 f849 	bl	80088ea <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800085e:	f000 f9d9 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000870:	f008 f9b2 	bl	8008bd8 <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800087a:	f000 f9cb 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_TIM1_Init+0xa0>)
 8000890:	f008 fc04 	bl	800909c <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089a:	f000 f9bb 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000458 	.word	0x24000458
 80008ac:	40010000 	.word	0x40010000

080008b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <MX_USART3_UART_Init+0x94>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <MX_USART3_UART_Init+0x90>)
 80008fa:	f008 fc7b 	bl	80091f4 <HAL_UART_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000904:	f000 f986 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_USART3_UART_Init+0x90>)
 800090c:	f009 fc10 	bl	800a130 <HAL_UARTEx_SetTxFifoThreshold>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000916:	f000 f97d 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <MX_USART3_UART_Init+0x90>)
 800091e:	f009 fc45 	bl	800a1ac <HAL_UARTEx_SetRxFifoThreshold>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000928:	f000 f974 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_USART3_UART_Init+0x90>)
 800092e:	f009 fbc6 	bl	800a0be <HAL_UARTEx_DisableFifoMode>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f96c 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	240003c4 	.word	0x240003c4
 8000944:	40004800 	.word	0x40004800

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_DMA_Init+0x3c>)
 8000950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <MX_DMA_Init+0x3c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_DMA_Init+0x3c>)
 8000960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	200b      	movs	r0, #11
 8000972:	f000 fd94 	bl	800149e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000976:	200b      	movs	r0, #11
 8000978:	f000 fdab 	bl	80014d2 <HAL_NVIC_EnableIRQ>

}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	58024400 	.word	0x58024400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08e      	sub	sp, #56	; 0x38
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b95      	ldr	r3, [pc, #596]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a93      	ldr	r2, [pc, #588]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b91      	ldr	r3, [pc, #580]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009bc:	4b8d      	ldr	r3, [pc, #564]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	4a8c      	ldr	r2, [pc, #560]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009cc:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	f003 0320 	and.w	r3, r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b86      	ldr	r3, [pc, #536]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a84      	ldr	r2, [pc, #528]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b82      	ldr	r3, [pc, #520]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b7e      	ldr	r3, [pc, #504]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	4a7d      	ldr	r2, [pc, #500]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a08:	4b7a      	ldr	r3, [pc, #488]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b77      	ldr	r3, [pc, #476]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a75      	ldr	r2, [pc, #468]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b73      	ldr	r3, [pc, #460]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a34:	4b6f      	ldr	r3, [pc, #444]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	4a6e      	ldr	r2, [pc, #440]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a44:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a52:	4b68      	ldr	r3, [pc, #416]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a66      	ldr	r2, [pc, #408]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b64      	ldr	r3, [pc, #400]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a70:	4b60      	ldr	r3, [pc, #384]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4a5f      	ldr	r2, [pc, #380]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a94:	4858      	ldr	r0, [pc, #352]	; (8000bf8 <MX_GPIO_Init+0x270>)
 8000a96:	f003 fa1d 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa0:	4856      	ldr	r0, [pc, #344]	; (8000bfc <MX_GPIO_Init+0x274>)
 8000aa2:	f003 fa17 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4855      	ldr	r0, [pc, #340]	; (8000c00 <MX_GPIO_Init+0x278>)
 8000aac:	f003 fa12 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	484f      	ldr	r0, [pc, #316]	; (8000c04 <MX_GPIO_Init+0x27c>)
 8000ac6:	f003 f855 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_detection_Pin */
  GPIO_InitStruct.Pin = NSS_detection_Pin;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ace:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NSS_detection_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	484a      	ldr	r0, [pc, #296]	; (8000c08 <MX_GPIO_Init+0x280>)
 8000ae0:	f003 f848 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ae4:	2332      	movs	r3, #50	; 0x32
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af4:	230b      	movs	r3, #11
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4841      	ldr	r0, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x27c>)
 8000b00:	f003 f838 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b04:	2386      	movs	r3, #134	; 0x86
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b14:	230b      	movs	r3, #11
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	483b      	ldr	r0, [pc, #236]	; (8000c0c <MX_GPIO_Init+0x284>)
 8000b20:	f003 f828 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b24:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	482e      	ldr	r0, [pc, #184]	; (8000bf8 <MX_GPIO_Init+0x270>)
 8000b3e:	f003 f819 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <MX_GPIO_Init+0x270>)
 8000b60:	f003 f808 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481f      	ldr	r0, [pc, #124]	; (8000bfc <MX_GPIO_Init+0x274>)
 8000b7e:	f002 fff9 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	481e      	ldr	r0, [pc, #120]	; (8000c10 <MX_GPIO_Init+0x288>)
 8000b98:	f002 ffec 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bae:	230b      	movs	r3, #11
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <MX_GPIO_Init+0x288>)
 8000bba:	f002 ffdb 	bl	8003b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <MX_GPIO_Init+0x278>)
 8000bd6:	f002 ffcd 	bl	8003b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2006      	movs	r0, #6
 8000be0:	f000 fc5d 	bl	800149e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000be4:	2006      	movs	r0, #6
 8000be6:	f000 fc74 	bl	80014d2 <HAL_NVIC_EnableIRQ>

}
 8000bea:	bf00      	nop
 8000bec:	3738      	adds	r7, #56	; 0x38
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	58020c00 	.word	0x58020c00
 8000c00:	58021000 	.word	0x58021000
 8000c04:	58020800 	.word	0x58020800
 8000c08:	58021400 	.word	0x58021400
 8000c0c:	58020000 	.word	0x58020000
 8000c10:	58021800 	.word	0x58021800

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x30>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x30>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x30>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	58024400 	.word	0x58024400

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ba      	sub	sp, #232	; 0xe8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	22bc      	movs	r2, #188	; 0xbc
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00d f9f1 	bl	800e05c <memset>
  if(hspi->Instance==SPI1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a52      	ldr	r2, [pc, #328]	; (8000dc8 <HAL_SPI_MspInit+0x174>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	f040 809c 	bne.w	8000dbe <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fb21 	bl	80062dc <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000ca0:	f7ff ffb8 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca4:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000caa:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cb4:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a40      	ldr	r2, [pc, #256]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	4a39      	ldr	r2, [pc, #228]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf0:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_SPI_MspInit+0x178>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cfe:	2330      	movs	r3, #48	; 0x30
 8000d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d16:	2305      	movs	r3, #5
 8000d18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d20:	4619      	mov	r1, r3
 8000d22:	482b      	ldr	r0, [pc, #172]	; (8000dd0 <HAL_SPI_MspInit+0x17c>)
 8000d24:	f002 ff26 	bl	8003b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d40:	2305      	movs	r3, #5
 8000d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4821      	ldr	r0, [pc, #132]	; (8000dd4 <HAL_SPI_MspInit+0x180>)
 8000d4e:	f002 ff11 	bl	8003b74 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_SPI_MspInit+0x188>)
 8000d56:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d5a:	2225      	movs	r2, #37	; 0x25
 8000d5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d70:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d84:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000d94:	f000 fbc6 	bl	8001524 <HAL_DMA_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000d9e:	f7ff ff39 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000da6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_SPI_MspInit+0x184>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2023      	movs	r0, #35	; 0x23
 8000db4:	f000 fb73 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000db8:	2023      	movs	r0, #35	; 0x23
 8000dba:	f000 fb8a 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	37e8      	adds	r7, #232	; 0xe8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	2400052c 	.word	0x2400052c
 8000ddc:	40020010 	.word	0x40020010

08000de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_TIM_Base_MspInit+0x48>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d116      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_TIM_Base_MspInit+0x4c>)
 8000df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_TIM_Base_MspInit+0x4c>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x4c>)
 8000e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2019      	movs	r0, #25
 8000e16:	f000 fb42 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e1a:	2019      	movs	r0, #25
 8000e1c:	f000 fb59 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	58024400 	.word	0x58024400

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0b8      	sub	sp, #224	; 0xe0
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	22bc      	movs	r2, #188	; 0xbc
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f00d f903 	bl	800e05c <memset>
  if(huart->Instance==USART3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <HAL_UART_MspInit+0xc0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d142      	bne.n	8000ee6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e60:	2302      	movs	r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 fa34 	bl	80062dc <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e7a:	f7ff fecb 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_UART_MspInit+0xc4>)
 8000e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0xc4>)
 8000e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0xc4>)
 8000e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0xc4>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0xc4>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0xc4>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_UART_MspInit+0xc8>)
 8000ee2:	f002 fe47 	bl	8003b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	37e0      	adds	r7, #224	; 0xe0
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40004800 	.word	0x40004800
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58020c00 	.word	0x58020c00

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f95a 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f002 ffd6 	bl	8003f06 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA1_Stream0_IRQHandler+0x10>)
 8000f66:	f001 fae7 	bl	8002538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2400052c 	.word	0x2400052c

08000f74 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	uint8_t retval;
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <TIM1_UP_IRQHandler+0x10>)
 8000f7a:	f007 fd0d 	bl	8008998 <HAL_TIM_IRQHandler>
//  if (retval != USBD_OK)
//	  usb_not_ok();
 // CDC_TransmitWithFifo_FS(&counter, 1);
 // counter++;
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	24000458 	.word	0x24000458

08000f88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <SPI1_IRQHandler+0x10>)
 8000f8e:	f007 f93f 	bl	8008210 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240004a4 	.word	0x240004a4

08000f9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <OTG_FS_IRQHandler+0x10>)
 8000fa2:	f003 f921 	bl	80041e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2400229c 	.word	0x2400229c

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <SystemInit+0xec>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a38      	ldr	r2, [pc, #224]	; (800109c <SystemInit+0xec>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <SystemInit+0xf0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	2b06      	cmp	r3, #6
 8000fce:	d807      	bhi.n	8000fe0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <SystemInit+0xf0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <SystemInit+0xf0>)
 8000fda:	f043 0307 	orr.w	r3, r3, #7
 8000fde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <SystemInit+0xf4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <SystemInit+0xf4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <SystemInit+0xf4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <SystemInit+0xf4>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	492b      	ldr	r1, [pc, #172]	; (80010a4 <SystemInit+0xf4>)
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <SystemInit+0xf8>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <SystemInit+0xf0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <SystemInit+0xf0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 030f 	bic.w	r3, r3, #15
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <SystemInit+0xf0>)
 8001014:	f043 0307 	orr.w	r3, r3, #7
 8001018:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <SystemInit+0xf4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <SystemInit+0xf4>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <SystemInit+0xf4>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <SystemInit+0xf4>)
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <SystemInit+0xfc>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <SystemInit+0xf4>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <SystemInit+0x100>)
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <SystemInit+0xf4>)
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <SystemInit+0x104>)
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <SystemInit+0xf4>)
 8001040:	2200      	movs	r2, #0
 8001042:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <SystemInit+0xf4>)
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <SystemInit+0x104>)
 8001048:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <SystemInit+0xf4>)
 800104c:	2200      	movs	r2, #0
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <SystemInit+0xf4>)
 8001052:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <SystemInit+0x104>)
 8001054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <SystemInit+0xf4>)
 8001058:	2200      	movs	r2, #0
 800105a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <SystemInit+0xf4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <SystemInit+0xf4>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001066:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <SystemInit+0xf4>)
 800106a:	2200      	movs	r2, #0
 800106c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <SystemInit+0x108>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <SystemInit+0x10c>)
 8001074:	4013      	ands	r3, r2
 8001076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800107a:	d202      	bcs.n	8001082 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <SystemInit+0x110>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <SystemInit+0x114>)
 8001084:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001088:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SystemInit+0xec>)
 800108c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001090:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	52002000 	.word	0x52002000
 80010a4:	58024400 	.word	0x58024400
 80010a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010ac:	02020200 	.word	0x02020200
 80010b0:	01ff0000 	.word	0x01ff0000
 80010b4:	01010280 	.word	0x01010280
 80010b8:	5c001000 	.word	0x5c001000
 80010bc:	ffff0000 	.word	0xffff0000
 80010c0:	51008108 	.word	0x51008108
 80010c4:	52004000 	.word	0x52004000

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010cc:	f7ff ff70 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010d2:	e003      	b.n	80010dc <LoopCopyDataInit>

080010d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80010d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010da:	3104      	adds	r1, #4

080010dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80010e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010e4:	d3f6      	bcc.n	80010d4 <CopyDataInit>
  ldr  r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80010e8:	e002      	b.n	80010f0 <LoopFillZerobss>

080010ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010ec:	f842 3b04 	str.w	r3, [r2], #4

080010f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80010f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010f4:	d3f9      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f00c ff7f 	bl	800dff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fa8d 	bl	8000618 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001104:	0800e11c 	.word	0x0800e11c
  ldr  r0, =_sdata
 8001108:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800110c:	24000184 	.word	0x24000184
  ldr  r2, =_sbss
 8001110:	24000184 	.word	0x24000184
  ldr  r3, = _ebss
 8001114:	240026a4 	.word	0x240026a4

08001118 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC3_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f9b0 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001128:	f004 ff02 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 800112c:	4602      	mov	r2, r0
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_Init+0x68>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	4913      	ldr	r1, [pc, #76]	; (8001188 <HAL_Init+0x6c>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_Init+0x68>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_Init+0x6c>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <HAL_Init+0x70>)
 800115e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_Init+0x74>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f814 	bl	8001194 <HAL_InitTick>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e002      	b.n	800117c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001176:	f7ff fd53 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024400 	.word	0x58024400
 8001188:	0800e0cc 	.word	0x0800e0cc
 800118c:	24000004 	.word	0x24000004
 8001190:	24000000 	.word	0x24000000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_InitTick+0x60>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e021      	b.n	80011ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_InitTick+0x64>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f9a3 	bl	800150a <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f95f 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x68>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2400000c 	.word	0x2400000c
 80011f8:	24000000 	.word	0x24000000
 80011fc:	24000008 	.word	0x24000008

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2400000c 	.word	0x2400000c
 8001224:	240005a8 	.word	0x240005a8

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	240005a8 	.word	0x240005a8

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2400000c 	.word	0x2400000c

08001288 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetREVID+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0c1b      	lsrs	r3, r3, #16
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	5c001000 	.word	0x5c001000

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	05fa0000 	.word	0x05fa0000

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db12      	blt.n	8001378 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	490a      	ldr	r1, [pc, #40]	; (8001384 <__NVIC_DisableIRQ+0x44>)
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	3320      	adds	r3, #32
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800136c:	f3bf 8f4f 	dsb	sy
}
 8001370:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001372:	f3bf 8f6f 	isb	sy
}
 8001376:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff05 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff1c 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff90 	bl	80013dc <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5f 	bl	8001388 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff0f 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff1f 	bl	8001340 <__NVIC_DisableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ff96 	bl	8001444 <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff fe7c 	bl	8001228 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e316      	b.n	8001b6a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a66      	ldr	r2, [pc, #408]	; (80016dc <HAL_DMA_Init+0x1b8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d04a      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a65      	ldr	r2, [pc, #404]	; (80016e0 <HAL_DMA_Init+0x1bc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d045      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_DMA_Init+0x1c0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d040      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <HAL_DMA_Init+0x1c4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d03b      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a60      	ldr	r2, [pc, #384]	; (80016ec <HAL_DMA_Init+0x1c8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d036      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <HAL_DMA_Init+0x1cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d031      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a5d      	ldr	r2, [pc, #372]	; (80016f4 <HAL_DMA_Init+0x1d0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d02c      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a5c      	ldr	r2, [pc, #368]	; (80016f8 <HAL_DMA_Init+0x1d4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d027      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a5a      	ldr	r2, [pc, #360]	; (80016fc <HAL_DMA_Init+0x1d8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d022      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a59      	ldr	r2, [pc, #356]	; (8001700 <HAL_DMA_Init+0x1dc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d01d      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a57      	ldr	r2, [pc, #348]	; (8001704 <HAL_DMA_Init+0x1e0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d018      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a56      	ldr	r2, [pc, #344]	; (8001708 <HAL_DMA_Init+0x1e4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d013      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a54      	ldr	r2, [pc, #336]	; (800170c <HAL_DMA_Init+0x1e8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00e      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a53      	ldr	r2, [pc, #332]	; (8001710 <HAL_DMA_Init+0x1ec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d009      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_DMA_Init+0x1f0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d004      	beq.n	80015dc <HAL_DMA_Init+0xb8>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a50      	ldr	r2, [pc, #320]	; (8001718 <HAL_DMA_Init+0x1f4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_DMA_Init+0xbc>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_DMA_Init+0xbe>
 80015e0:	2300      	movs	r3, #0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 813b 	beq.w	800185e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a37      	ldr	r2, [pc, #220]	; (80016dc <HAL_DMA_Init+0x1b8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d04a      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a36      	ldr	r2, [pc, #216]	; (80016e0 <HAL_DMA_Init+0x1bc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d045      	beq.n	8001698 <HAL_DMA_Init+0x174>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a34      	ldr	r2, [pc, #208]	; (80016e4 <HAL_DMA_Init+0x1c0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d040      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <HAL_DMA_Init+0x1c4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d03b      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a31      	ldr	r2, [pc, #196]	; (80016ec <HAL_DMA_Init+0x1c8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d036      	beq.n	8001698 <HAL_DMA_Init+0x174>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_DMA_Init+0x1cc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d031      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <HAL_DMA_Init+0x1d0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d02c      	beq.n	8001698 <HAL_DMA_Init+0x174>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2d      	ldr	r2, [pc, #180]	; (80016f8 <HAL_DMA_Init+0x1d4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d027      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2b      	ldr	r2, [pc, #172]	; (80016fc <HAL_DMA_Init+0x1d8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d022      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a2a      	ldr	r2, [pc, #168]	; (8001700 <HAL_DMA_Init+0x1dc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d01d      	beq.n	8001698 <HAL_DMA_Init+0x174>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_DMA_Init+0x1e0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d018      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a27      	ldr	r2, [pc, #156]	; (8001708 <HAL_DMA_Init+0x1e4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d013      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_DMA_Init+0x1e8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00e      	beq.n	8001698 <HAL_DMA_Init+0x174>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <HAL_DMA_Init+0x1ec>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d009      	beq.n	8001698 <HAL_DMA_Init+0x174>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_DMA_Init+0x1f0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d004      	beq.n	8001698 <HAL_DMA_Init+0x174>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <HAL_DMA_Init+0x1f4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d108      	bne.n	80016aa <HAL_DMA_Init+0x186>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_DMA_Init+0x196>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016ba:	e02f      	b.n	800171c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016bc:	f7ff fdb4 	bl	8001228 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d928      	bls.n	800171c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2203      	movs	r2, #3
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e246      	b.n	8001b6a <HAL_DMA_Init+0x646>
 80016dc:	40020010 	.word	0x40020010
 80016e0:	40020028 	.word	0x40020028
 80016e4:	40020040 	.word	0x40020040
 80016e8:	40020058 	.word	0x40020058
 80016ec:	40020070 	.word	0x40020070
 80016f0:	40020088 	.word	0x40020088
 80016f4:	400200a0 	.word	0x400200a0
 80016f8:	400200b8 	.word	0x400200b8
 80016fc:	40020410 	.word	0x40020410
 8001700:	40020428 	.word	0x40020428
 8001704:	40020440 	.word	0x40020440
 8001708:	40020458 	.word	0x40020458
 800170c:	40020470 	.word	0x40020470
 8001710:	40020488 	.word	0x40020488
 8001714:	400204a0 	.word	0x400204a0
 8001718:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1c8      	bne.n	80016bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4b83      	ldr	r3, [pc, #524]	; (8001944 <HAL_DMA_Init+0x420>)
 8001736:	4013      	ands	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001742:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4313      	orrs	r3, r2
 8001766:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	2b04      	cmp	r3, #4
 800176e:	d107      	bne.n	8001780 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4313      	orrs	r3, r2
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4313      	orrs	r3, r2
 800177e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001780:	4b71      	ldr	r3, [pc, #452]	; (8001948 <HAL_DMA_Init+0x424>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b71      	ldr	r3, [pc, #452]	; (800194c <HAL_DMA_Init+0x428>)
 8001786:	4013      	ands	r3, r2
 8001788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800178c:	d328      	bcc.n	80017e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b28      	cmp	r3, #40	; 0x28
 8001794:	d903      	bls.n	800179e <HAL_DMA_Init+0x27a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b2e      	cmp	r3, #46	; 0x2e
 800179c:	d917      	bls.n	80017ce <HAL_DMA_Init+0x2aa>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b3e      	cmp	r3, #62	; 0x3e
 80017a4:	d903      	bls.n	80017ae <HAL_DMA_Init+0x28a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b42      	cmp	r3, #66	; 0x42
 80017ac:	d90f      	bls.n	80017ce <HAL_DMA_Init+0x2aa>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b46      	cmp	r3, #70	; 0x46
 80017b4:	d903      	bls.n	80017be <HAL_DMA_Init+0x29a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b48      	cmp	r3, #72	; 0x48
 80017bc:	d907      	bls.n	80017ce <HAL_DMA_Init+0x2aa>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b4e      	cmp	r3, #78	; 0x4e
 80017c4:	d905      	bls.n	80017d2 <HAL_DMA_Init+0x2ae>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b52      	cmp	r3, #82	; 0x52
 80017cc:	d801      	bhi.n	80017d2 <HAL_DMA_Init+0x2ae>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_DMA_Init+0x2b0>
 80017d2:	2300      	movs	r3, #0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f023 0307 	bic.w	r3, r3, #7
 80017f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	2b04      	cmp	r3, #4
 8001808:	d117      	bne.n	800183a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00e      	beq.n	800183a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f002 f81f 	bl	8003860 <DMA_CheckFifoParam>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2240      	movs	r2, #64	; 0x40
 800182c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e197      	b.n	8001b6a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f001 ff5a 	bl	80036fc <DMA_CalcBaseAndBitshift>
 8001848:	4603      	mov	r3, r0
 800184a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	223f      	movs	r2, #63	; 0x3f
 8001856:	409a      	lsls	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	e0cd      	b.n	80019fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a3b      	ldr	r2, [pc, #236]	; (8001950 <HAL_DMA_Init+0x42c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d022      	beq.n	80018ae <HAL_DMA_Init+0x38a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a39      	ldr	r2, [pc, #228]	; (8001954 <HAL_DMA_Init+0x430>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_DMA_Init+0x38a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a38      	ldr	r2, [pc, #224]	; (8001958 <HAL_DMA_Init+0x434>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d018      	beq.n	80018ae <HAL_DMA_Init+0x38a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_DMA_Init+0x438>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_DMA_Init+0x38a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a35      	ldr	r2, [pc, #212]	; (8001960 <HAL_DMA_Init+0x43c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00e      	beq.n	80018ae <HAL_DMA_Init+0x38a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a33      	ldr	r2, [pc, #204]	; (8001964 <HAL_DMA_Init+0x440>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d009      	beq.n	80018ae <HAL_DMA_Init+0x38a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a32      	ldr	r2, [pc, #200]	; (8001968 <HAL_DMA_Init+0x444>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d004      	beq.n	80018ae <HAL_DMA_Init+0x38a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a30      	ldr	r2, [pc, #192]	; (800196c <HAL_DMA_Init+0x448>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_DMA_Init+0x38e>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_DMA_Init+0x390>
 80018b2:	2300      	movs	r3, #0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8097 	beq.w	80019e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a24      	ldr	r2, [pc, #144]	; (8001950 <HAL_DMA_Init+0x42c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d021      	beq.n	8001908 <HAL_DMA_Init+0x3e4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a22      	ldr	r2, [pc, #136]	; (8001954 <HAL_DMA_Init+0x430>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d01c      	beq.n	8001908 <HAL_DMA_Init+0x3e4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <HAL_DMA_Init+0x434>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d017      	beq.n	8001908 <HAL_DMA_Init+0x3e4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1f      	ldr	r2, [pc, #124]	; (800195c <HAL_DMA_Init+0x438>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d012      	beq.n	8001908 <HAL_DMA_Init+0x3e4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_DMA_Init+0x43c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00d      	beq.n	8001908 <HAL_DMA_Init+0x3e4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_DMA_Init+0x440>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d008      	beq.n	8001908 <HAL_DMA_Init+0x3e4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_DMA_Init+0x444>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d003      	beq.n	8001908 <HAL_DMA_Init+0x3e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	; (800196c <HAL_DMA_Init+0x448>)
 8001906:	4293      	cmp	r3, r2
 8001908:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_DMA_Init+0x44c>)
 8001926:	4013      	ands	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b40      	cmp	r3, #64	; 0x40
 8001930:	d020      	beq.n	8001974 <HAL_DMA_Init+0x450>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b80      	cmp	r3, #128	; 0x80
 8001938:	d102      	bne.n	8001940 <HAL_DMA_Init+0x41c>
 800193a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800193e:	e01a      	b.n	8001976 <HAL_DMA_Init+0x452>
 8001940:	2300      	movs	r3, #0
 8001942:	e018      	b.n	8001976 <HAL_DMA_Init+0x452>
 8001944:	fe10803f 	.word	0xfe10803f
 8001948:	5c001000 	.word	0x5c001000
 800194c:	ffff0000 	.word	0xffff0000
 8001950:	58025408 	.word	0x58025408
 8001954:	5802541c 	.word	0x5802541c
 8001958:	58025430 	.word	0x58025430
 800195c:	58025444 	.word	0x58025444
 8001960:	58025458 	.word	0x58025458
 8001964:	5802546c 	.word	0x5802546c
 8001968:	58025480 	.word	0x58025480
 800196c:	58025494 	.word	0x58025494
 8001970:	fffe000f 	.word	0xfffe000f
 8001974:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800197c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800198c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800199c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <HAL_DMA_Init+0x650>)
 80019bc:	4413      	add	r3, r2
 80019be:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_DMA_Init+0x654>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	009a      	lsls	r2, r3, #2
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f001 fe95 	bl	80036fc <DMA_CalcBaseAndBitshift>
 80019d2:	4603      	mov	r3, r0
 80019d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2201      	movs	r2, #1
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	e008      	b.n	80019fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0b7      	b.n	8001b6a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a5f      	ldr	r2, [pc, #380]	; (8001b7c <HAL_DMA_Init+0x658>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d072      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a5d      	ldr	r2, [pc, #372]	; (8001b80 <HAL_DMA_Init+0x65c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d06d      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5c      	ldr	r2, [pc, #368]	; (8001b84 <HAL_DMA_Init+0x660>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d068      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a5a      	ldr	r2, [pc, #360]	; (8001b88 <HAL_DMA_Init+0x664>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d063      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a59      	ldr	r2, [pc, #356]	; (8001b8c <HAL_DMA_Init+0x668>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d05e      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <HAL_DMA_Init+0x66c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d059      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_DMA_Init+0x670>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d054      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a54      	ldr	r2, [pc, #336]	; (8001b98 <HAL_DMA_Init+0x674>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d04f      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a53      	ldr	r2, [pc, #332]	; (8001b9c <HAL_DMA_Init+0x678>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d04a      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_DMA_Init+0x67c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d045      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_DMA_Init+0x680>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d040      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_DMA_Init+0x684>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d03b      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_DMA_Init+0x688>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d036      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a4b      	ldr	r2, [pc, #300]	; (8001bb0 <HAL_DMA_Init+0x68c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d031      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <HAL_DMA_Init+0x690>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d02c      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <HAL_DMA_Init+0x694>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d027      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a47      	ldr	r2, [pc, #284]	; (8001bbc <HAL_DMA_Init+0x698>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a45      	ldr	r2, [pc, #276]	; (8001bc0 <HAL_DMA_Init+0x69c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01d      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a44      	ldr	r2, [pc, #272]	; (8001bc4 <HAL_DMA_Init+0x6a0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d018      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_DMA_Init+0x6a4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a41      	ldr	r2, [pc, #260]	; (8001bcc <HAL_DMA_Init+0x6a8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a3f      	ldr	r2, [pc, #252]	; (8001bd0 <HAL_DMA_Init+0x6ac>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a3e      	ldr	r2, [pc, #248]	; (8001bd4 <HAL_DMA_Init+0x6b0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d004      	beq.n	8001aea <HAL_DMA_Init+0x5c6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_DMA_Init+0x6b4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA_Init+0x5ca>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_DMA_Init+0x5cc>
 8001aee:	2300      	movs	r3, #0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d032      	beq.n	8001b5a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f001 ff2f 	bl	8003958 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b80      	cmp	r3, #128	; 0x80
 8001b00:	d102      	bne.n	8001b08 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d010      	beq.n	8001b48 <HAL_DMA_Init+0x624>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d80c      	bhi.n	8001b48 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f001 ffac 	bl	8003a8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	e008      	b.n	8001b5a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	a7fdabf8 	.word	0xa7fdabf8
 8001b78:	cccccccd 	.word	0xcccccccd
 8001b7c:	40020010 	.word	0x40020010
 8001b80:	40020028 	.word	0x40020028
 8001b84:	40020040 	.word	0x40020040
 8001b88:	40020058 	.word	0x40020058
 8001b8c:	40020070 	.word	0x40020070
 8001b90:	40020088 	.word	0x40020088
 8001b94:	400200a0 	.word	0x400200a0
 8001b98:	400200b8 	.word	0x400200b8
 8001b9c:	40020410 	.word	0x40020410
 8001ba0:	40020428 	.word	0x40020428
 8001ba4:	40020440 	.word	0x40020440
 8001ba8:	40020458 	.word	0x40020458
 8001bac:	40020470 	.word	0x40020470
 8001bb0:	40020488 	.word	0x40020488
 8001bb4:	400204a0 	.word	0x400204a0
 8001bb8:	400204b8 	.word	0x400204b8
 8001bbc:	58025408 	.word	0x58025408
 8001bc0:	5802541c 	.word	0x5802541c
 8001bc4:	58025430 	.word	0x58025430
 8001bc8:	58025444 	.word	0x58025444
 8001bcc:	58025458 	.word	0x58025458
 8001bd0:	5802546c 	.word	0x5802546c
 8001bd4:	58025480 	.word	0x58025480
 8001bd8:	58025494 	.word	0x58025494

08001bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e226      	b.n	8002046 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_DMA_Start_IT+0x2a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e21f      	b.n	8002046 <HAL_DMA_Start_IT+0x46a>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	f040 820a 	bne.w	8002030 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a68      	ldr	r2, [pc, #416]	; (8001dd0 <HAL_DMA_Start_IT+0x1f4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04a      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a66      	ldr	r2, [pc, #408]	; (8001dd4 <HAL_DMA_Start_IT+0x1f8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d045      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a65      	ldr	r2, [pc, #404]	; (8001dd8 <HAL_DMA_Start_IT+0x1fc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d040      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a63      	ldr	r2, [pc, #396]	; (8001ddc <HAL_DMA_Start_IT+0x200>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a62      	ldr	r2, [pc, #392]	; (8001de0 <HAL_DMA_Start_IT+0x204>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d036      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <HAL_DMA_Start_IT+0x208>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a5f      	ldr	r2, [pc, #380]	; (8001de8 <HAL_DMA_Start_IT+0x20c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d02c      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_DMA_Start_IT+0x210>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d027      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5c      	ldr	r2, [pc, #368]	; (8001df0 <HAL_DMA_Start_IT+0x214>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d022      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5a      	ldr	r2, [pc, #360]	; (8001df4 <HAL_DMA_Start_IT+0x218>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01d      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a59      	ldr	r2, [pc, #356]	; (8001df8 <HAL_DMA_Start_IT+0x21c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d018      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a57      	ldr	r2, [pc, #348]	; (8001dfc <HAL_DMA_Start_IT+0x220>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a56      	ldr	r2, [pc, #344]	; (8001e00 <HAL_DMA_Start_IT+0x224>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_DMA_Start_IT+0x228>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d009      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <HAL_DMA_Start_IT+0x22c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_DMA_Start_IT+0xee>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_DMA_Start_IT+0x230>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d108      	bne.n	8001cdc <HAL_DMA_Start_IT+0x100>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e007      	b.n	8001cec <HAL_DMA_Start_IT+0x110>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f001 fb56 	bl	80033a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_DMA_Start_IT+0x1f4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d04a      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a33      	ldr	r2, [pc, #204]	; (8001dd4 <HAL_DMA_Start_IT+0x1f8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d045      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <HAL_DMA_Start_IT+0x1fc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d040      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_DMA_Start_IT+0x200>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d03b      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_DMA_Start_IT+0x204>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d036      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_DMA_Start_IT+0x208>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d031      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_DMA_Start_IT+0x20c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02c      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <HAL_DMA_Start_IT+0x210>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d027      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <HAL_DMA_Start_IT+0x214>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d022      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_DMA_Start_IT+0x218>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d01d      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a25      	ldr	r2, [pc, #148]	; (8001df8 <HAL_DMA_Start_IT+0x21c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <HAL_DMA_Start_IT+0x220>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_DMA_Start_IT+0x224>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00e      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_DMA_Start_IT+0x228>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_DMA_Start_IT+0x22c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_DMA_Start_IT+0x1bc>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_DMA_Start_IT+0x230>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_DMA_Start_IT+0x1c0>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_DMA_Start_IT+0x1c2>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d036      	beq.n	8001e10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 021e 	bic.w	r2, r3, #30
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0216 	orr.w	r2, r2, #22
 8001db4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d03e      	beq.n	8001e3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0208 	orr.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e035      	b.n	8001e3c <HAL_DMA_Start_IT+0x260>
 8001dd0:	40020010 	.word	0x40020010
 8001dd4:	40020028 	.word	0x40020028
 8001dd8:	40020040 	.word	0x40020040
 8001ddc:	40020058 	.word	0x40020058
 8001de0:	40020070 	.word	0x40020070
 8001de4:	40020088 	.word	0x40020088
 8001de8:	400200a0 	.word	0x400200a0
 8001dec:	400200b8 	.word	0x400200b8
 8001df0:	40020410 	.word	0x40020410
 8001df4:	40020428 	.word	0x40020428
 8001df8:	40020440 	.word	0x40020440
 8001dfc:	40020458 	.word	0x40020458
 8001e00:	40020470 	.word	0x40020470
 8001e04:	40020488 	.word	0x40020488
 8001e08:	400204a0 	.word	0x400204a0
 8001e0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020e 	bic.w	r2, r3, #14
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 020a 	orr.w	r2, r2, #10
 8001e22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0204 	orr.w	r2, r2, #4
 8001e3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a83      	ldr	r2, [pc, #524]	; (8002050 <HAL_DMA_Start_IT+0x474>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d072      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a82      	ldr	r2, [pc, #520]	; (8002054 <HAL_DMA_Start_IT+0x478>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d06d      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_DMA_Start_IT+0x47c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d068      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7f      	ldr	r2, [pc, #508]	; (800205c <HAL_DMA_Start_IT+0x480>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d063      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7d      	ldr	r2, [pc, #500]	; (8002060 <HAL_DMA_Start_IT+0x484>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d05e      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7c      	ldr	r2, [pc, #496]	; (8002064 <HAL_DMA_Start_IT+0x488>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d059      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_DMA_Start_IT+0x48c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d054      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a79      	ldr	r2, [pc, #484]	; (800206c <HAL_DMA_Start_IT+0x490>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d04f      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a77      	ldr	r2, [pc, #476]	; (8002070 <HAL_DMA_Start_IT+0x494>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d04a      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a76      	ldr	r2, [pc, #472]	; (8002074 <HAL_DMA_Start_IT+0x498>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d045      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a74      	ldr	r2, [pc, #464]	; (8002078 <HAL_DMA_Start_IT+0x49c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d040      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a73      	ldr	r2, [pc, #460]	; (800207c <HAL_DMA_Start_IT+0x4a0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d03b      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a71      	ldr	r2, [pc, #452]	; (8002080 <HAL_DMA_Start_IT+0x4a4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d036      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a70      	ldr	r2, [pc, #448]	; (8002084 <HAL_DMA_Start_IT+0x4a8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d031      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_DMA_Start_IT+0x4ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02c      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6d      	ldr	r2, [pc, #436]	; (800208c <HAL_DMA_Start_IT+0x4b0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d027      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6b      	ldr	r2, [pc, #428]	; (8002090 <HAL_DMA_Start_IT+0x4b4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d022      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6a      	ldr	r2, [pc, #424]	; (8002094 <HAL_DMA_Start_IT+0x4b8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d01d      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a68      	ldr	r2, [pc, #416]	; (8002098 <HAL_DMA_Start_IT+0x4bc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d018      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a67      	ldr	r2, [pc, #412]	; (800209c <HAL_DMA_Start_IT+0x4c0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_DMA_Start_IT+0x4c4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00e      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a64      	ldr	r2, [pc, #400]	; (80020a4 <HAL_DMA_Start_IT+0x4c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a62      	ldr	r2, [pc, #392]	; (80020a8 <HAL_DMA_Start_IT+0x4cc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d004      	beq.n	8001f2c <HAL_DMA_Start_IT+0x350>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a61      	ldr	r2, [pc, #388]	; (80020ac <HAL_DMA_Start_IT+0x4d0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_DMA_Start_IT+0x354>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_DMA_Start_IT+0x356>
 8001f30:	2300      	movs	r3, #0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01a      	beq.n	8001f6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a37      	ldr	r2, [pc, #220]	; (8002050 <HAL_DMA_Start_IT+0x474>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d04a      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a36      	ldr	r2, [pc, #216]	; (8002054 <HAL_DMA_Start_IT+0x478>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d045      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_DMA_Start_IT+0x47c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d040      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a33      	ldr	r2, [pc, #204]	; (800205c <HAL_DMA_Start_IT+0x480>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d03b      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a31      	ldr	r2, [pc, #196]	; (8002060 <HAL_DMA_Start_IT+0x484>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d036      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a30      	ldr	r2, [pc, #192]	; (8002064 <HAL_DMA_Start_IT+0x488>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d031      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <HAL_DMA_Start_IT+0x48c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d02c      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a2d      	ldr	r2, [pc, #180]	; (800206c <HAL_DMA_Start_IT+0x490>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d027      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <HAL_DMA_Start_IT+0x494>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d022      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <HAL_DMA_Start_IT+0x498>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d01d      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_DMA_Start_IT+0x49c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d018      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a27      	ldr	r2, [pc, #156]	; (800207c <HAL_DMA_Start_IT+0x4a0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d013      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a25      	ldr	r2, [pc, #148]	; (8002080 <HAL_DMA_Start_IT+0x4a4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00e      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a24      	ldr	r2, [pc, #144]	; (8002084 <HAL_DMA_Start_IT+0x4a8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d009      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_DMA_Start_IT+0x4ac>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_DMA_Start_IT+0x430>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a21      	ldr	r2, [pc, #132]	; (800208c <HAL_DMA_Start_IT+0x4b0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d108      	bne.n	800201e <HAL_DMA_Start_IT+0x442>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e012      	b.n	8002044 <HAL_DMA_Start_IT+0x468>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e009      	b.n	8002044 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002036:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002044:	7dfb      	ldrb	r3, [r7, #23]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40020010 	.word	0x40020010
 8002054:	40020028 	.word	0x40020028
 8002058:	40020040 	.word	0x40020040
 800205c:	40020058 	.word	0x40020058
 8002060:	40020070 	.word	0x40020070
 8002064:	40020088 	.word	0x40020088
 8002068:	400200a0 	.word	0x400200a0
 800206c:	400200b8 	.word	0x400200b8
 8002070:	40020410 	.word	0x40020410
 8002074:	40020428 	.word	0x40020428
 8002078:	40020440 	.word	0x40020440
 800207c:	40020458 	.word	0x40020458
 8002080:	40020470 	.word	0x40020470
 8002084:	40020488 	.word	0x40020488
 8002088:	400204a0 	.word	0x400204a0
 800208c:	400204b8 	.word	0x400204b8
 8002090:	58025408 	.word	0x58025408
 8002094:	5802541c 	.word	0x5802541c
 8002098:	58025430 	.word	0x58025430
 800209c:	58025444 	.word	0x58025444
 80020a0:	58025458 	.word	0x58025458
 80020a4:	5802546c 	.word	0x5802546c
 80020a8:	58025480 	.word	0x58025480
 80020ac:	58025494 	.word	0x58025494

080020b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e205      	b.n	80024ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d004      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e1fa      	b.n	80024ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a8c      	ldr	r2, [pc, #560]	; (8002310 <HAL_DMA_Abort_IT+0x260>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04a      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a8b      	ldr	r2, [pc, #556]	; (8002314 <HAL_DMA_Abort_IT+0x264>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d045      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a89      	ldr	r2, [pc, #548]	; (8002318 <HAL_DMA_Abort_IT+0x268>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d040      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a88      	ldr	r2, [pc, #544]	; (800231c <HAL_DMA_Abort_IT+0x26c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d03b      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a86      	ldr	r2, [pc, #536]	; (8002320 <HAL_DMA_Abort_IT+0x270>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d036      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a85      	ldr	r2, [pc, #532]	; (8002324 <HAL_DMA_Abort_IT+0x274>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d031      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a83      	ldr	r2, [pc, #524]	; (8002328 <HAL_DMA_Abort_IT+0x278>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02c      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a82      	ldr	r2, [pc, #520]	; (800232c <HAL_DMA_Abort_IT+0x27c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d027      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a80      	ldr	r2, [pc, #512]	; (8002330 <HAL_DMA_Abort_IT+0x280>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d022      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7f      	ldr	r2, [pc, #508]	; (8002334 <HAL_DMA_Abort_IT+0x284>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01d      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a7d      	ldr	r2, [pc, #500]	; (8002338 <HAL_DMA_Abort_IT+0x288>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d018      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7c      	ldr	r2, [pc, #496]	; (800233c <HAL_DMA_Abort_IT+0x28c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a7a      	ldr	r2, [pc, #488]	; (8002340 <HAL_DMA_Abort_IT+0x290>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00e      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a79      	ldr	r2, [pc, #484]	; (8002344 <HAL_DMA_Abort_IT+0x294>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a77      	ldr	r2, [pc, #476]	; (8002348 <HAL_DMA_Abort_IT+0x298>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_DMA_Abort_IT+0xc8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a76      	ldr	r2, [pc, #472]	; (800234c <HAL_DMA_Abort_IT+0x29c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_DMA_Abort_IT+0xcc>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_DMA_Abort_IT+0xce>
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d065      	beq.n	800224e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a60      	ldr	r2, [pc, #384]	; (8002310 <HAL_DMA_Abort_IT+0x260>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d04a      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5e      	ldr	r2, [pc, #376]	; (8002314 <HAL_DMA_Abort_IT+0x264>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d045      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5d      	ldr	r2, [pc, #372]	; (8002318 <HAL_DMA_Abort_IT+0x268>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d040      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a5b      	ldr	r2, [pc, #364]	; (800231c <HAL_DMA_Abort_IT+0x26c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d03b      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5a      	ldr	r2, [pc, #360]	; (8002320 <HAL_DMA_Abort_IT+0x270>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d036      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a58      	ldr	r2, [pc, #352]	; (8002324 <HAL_DMA_Abort_IT+0x274>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d031      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_DMA_Abort_IT+0x278>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d02c      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a55      	ldr	r2, [pc, #340]	; (800232c <HAL_DMA_Abort_IT+0x27c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d027      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a54      	ldr	r2, [pc, #336]	; (8002330 <HAL_DMA_Abort_IT+0x280>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_DMA_Abort_IT+0x284>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01d      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a51      	ldr	r2, [pc, #324]	; (8002338 <HAL_DMA_Abort_IT+0x288>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d018      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a4f      	ldr	r2, [pc, #316]	; (800233c <HAL_DMA_Abort_IT+0x28c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <HAL_DMA_Abort_IT+0x290>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_DMA_Abort_IT+0x294>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d009      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <HAL_DMA_Abort_IT+0x298>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d004      	beq.n	800222a <HAL_DMA_Abort_IT+0x17a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a49      	ldr	r2, [pc, #292]	; (800234c <HAL_DMA_Abort_IT+0x29c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <HAL_DMA_Abort_IT+0x18c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e147      	b.n	80024cc <HAL_DMA_Abort_IT+0x41c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e13e      	b.n	80024cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 020e 	bic.w	r2, r2, #14
 800225c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_DMA_Abort_IT+0x260>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d04a      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_DMA_Abort_IT+0x264>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d045      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_DMA_Abort_IT+0x268>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d040      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_DMA_Abort_IT+0x26c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d03b      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_DMA_Abort_IT+0x270>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d036      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_DMA_Abort_IT+0x274>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d031      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_DMA_Abort_IT+0x278>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d02c      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <HAL_DMA_Abort_IT+0x27c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d027      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_DMA_Abort_IT+0x280>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_DMA_Abort_IT+0x284>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01d      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_DMA_Abort_IT+0x288>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d018      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_DMA_Abort_IT+0x28c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_DMA_Abort_IT+0x290>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00e      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_DMA_Abort_IT+0x294>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_DMA_Abort_IT+0x298>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_DMA_Abort_IT+0x29c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d128      	bne.n	8002350 <HAL_DMA_Abort_IT+0x2a0>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e027      	b.n	8002360 <HAL_DMA_Abort_IT+0x2b0>
 8002310:	40020010 	.word	0x40020010
 8002314:	40020028 	.word	0x40020028
 8002318:	40020040 	.word	0x40020040
 800231c:	40020058 	.word	0x40020058
 8002320:	40020070 	.word	0x40020070
 8002324:	40020088 	.word	0x40020088
 8002328:	400200a0 	.word	0x400200a0
 800232c:	400200b8 	.word	0x400200b8
 8002330:	40020410 	.word	0x40020410
 8002334:	40020428 	.word	0x40020428
 8002338:	40020440 	.word	0x40020440
 800233c:	40020458 	.word	0x40020458
 8002340:	40020470 	.word	0x40020470
 8002344:	40020488 	.word	0x40020488
 8002348:	400204a0 	.word	0x400204a0
 800234c:	400204b8 	.word	0x400204b8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <HAL_DMA_Abort_IT+0x428>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d072      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a5b      	ldr	r2, [pc, #364]	; (80024dc <HAL_DMA_Abort_IT+0x42c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d06d      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a59      	ldr	r2, [pc, #356]	; (80024e0 <HAL_DMA_Abort_IT+0x430>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d068      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_DMA_Abort_IT+0x434>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d063      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a56      	ldr	r2, [pc, #344]	; (80024e8 <HAL_DMA_Abort_IT+0x438>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d05e      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a55      	ldr	r2, [pc, #340]	; (80024ec <HAL_DMA_Abort_IT+0x43c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d059      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a53      	ldr	r2, [pc, #332]	; (80024f0 <HAL_DMA_Abort_IT+0x440>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d054      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_DMA_Abort_IT+0x444>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d04f      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a50      	ldr	r2, [pc, #320]	; (80024f8 <HAL_DMA_Abort_IT+0x448>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d04a      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <HAL_DMA_Abort_IT+0x44c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d045      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4d      	ldr	r2, [pc, #308]	; (8002500 <HAL_DMA_Abort_IT+0x450>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d040      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_DMA_Abort_IT+0x454>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d03b      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <HAL_DMA_Abort_IT+0x458>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d036      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a49      	ldr	r2, [pc, #292]	; (800250c <HAL_DMA_Abort_IT+0x45c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d031      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a47      	ldr	r2, [pc, #284]	; (8002510 <HAL_DMA_Abort_IT+0x460>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02c      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a46      	ldr	r2, [pc, #280]	; (8002514 <HAL_DMA_Abort_IT+0x464>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d027      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a44      	ldr	r2, [pc, #272]	; (8002518 <HAL_DMA_Abort_IT+0x468>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d022      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a43      	ldr	r2, [pc, #268]	; (800251c <HAL_DMA_Abort_IT+0x46c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01d      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a41      	ldr	r2, [pc, #260]	; (8002520 <HAL_DMA_Abort_IT+0x470>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d018      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a40      	ldr	r2, [pc, #256]	; (8002524 <HAL_DMA_Abort_IT+0x474>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <HAL_DMA_Abort_IT+0x478>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3d      	ldr	r2, [pc, #244]	; (800252c <HAL_DMA_Abort_IT+0x47c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <HAL_DMA_Abort_IT+0x480>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_DMA_Abort_IT+0x3a0>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3a      	ldr	r2, [pc, #232]	; (8002534 <HAL_DMA_Abort_IT+0x484>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_DMA_Abort_IT+0x3a4>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_DMA_Abort_IT+0x3a6>
 8002454:	2300      	movs	r3, #0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d028      	beq.n	80024ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002468:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	2201      	movs	r2, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002488:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800249c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40020010 	.word	0x40020010
 80024dc:	40020028 	.word	0x40020028
 80024e0:	40020040 	.word	0x40020040
 80024e4:	40020058 	.word	0x40020058
 80024e8:	40020070 	.word	0x40020070
 80024ec:	40020088 	.word	0x40020088
 80024f0:	400200a0 	.word	0x400200a0
 80024f4:	400200b8 	.word	0x400200b8
 80024f8:	40020410 	.word	0x40020410
 80024fc:	40020428 	.word	0x40020428
 8002500:	40020440 	.word	0x40020440
 8002504:	40020458 	.word	0x40020458
 8002508:	40020470 	.word	0x40020470
 800250c:	40020488 	.word	0x40020488
 8002510:	400204a0 	.word	0x400204a0
 8002514:	400204b8 	.word	0x400204b8
 8002518:	58025408 	.word	0x58025408
 800251c:	5802541c 	.word	0x5802541c
 8002520:	58025430 	.word	0x58025430
 8002524:	58025444 	.word	0x58025444
 8002528:	58025458 	.word	0x58025458
 800252c:	5802546c 	.word	0x5802546c
 8002530:	58025480 	.word	0x58025480
 8002534:	58025494 	.word	0x58025494

08002538 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002544:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_DMA_IRQHandler+0x1ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_DMA_IRQHandler+0x1b0>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5f      	ldr	r2, [pc, #380]	; (80026ec <HAL_DMA_IRQHandler+0x1b4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d04a      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_DMA_IRQHandler+0x1b8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d045      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d040      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_DMA_IRQHandler+0x1c0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d03b      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a59      	ldr	r2, [pc, #356]	; (80026fc <HAL_DMA_IRQHandler+0x1c4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d036      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_DMA_IRQHandler+0x1c8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_DMA_IRQHandler+0x1cc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d02c      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a54      	ldr	r2, [pc, #336]	; (8002708 <HAL_DMA_IRQHandler+0x1d0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d027      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a53      	ldr	r2, [pc, #332]	; (800270c <HAL_DMA_IRQHandler+0x1d4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a51      	ldr	r2, [pc, #324]	; (8002710 <HAL_DMA_IRQHandler+0x1d8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_DMA_IRQHandler+0x1dc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_DMA_IRQHandler+0x1e0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_DMA_IRQHandler+0x1e4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	; (8002720 <HAL_DMA_IRQHandler+0x1e8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_DMA_IRQHandler+0x1ec>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_DMA_IRQHandler+0xd2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_DMA_IRQHandler+0x1f0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_DMA_IRQHandler+0xd6>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_DMA_IRQHandler+0xd8>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 842b 	beq.w	8002e6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2208      	movs	r2, #8
 8002620:	409a      	lsls	r2, r3
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80a2 	beq.w	8002770 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <HAL_DMA_IRQHandler+0x1b4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d04a      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <HAL_DMA_IRQHandler+0x1b8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d045      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d040      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2a      	ldr	r2, [pc, #168]	; (80026f8 <HAL_DMA_IRQHandler+0x1c0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d03b      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <HAL_DMA_IRQHandler+0x1c4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d036      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a27      	ldr	r2, [pc, #156]	; (8002700 <HAL_DMA_IRQHandler+0x1c8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d031      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a25      	ldr	r2, [pc, #148]	; (8002704 <HAL_DMA_IRQHandler+0x1cc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d02c      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_DMA_IRQHandler+0x1d0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d027      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <HAL_DMA_IRQHandler+0x1d4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d022      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a21      	ldr	r2, [pc, #132]	; (8002710 <HAL_DMA_IRQHandler+0x1d8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d01d      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_DMA_IRQHandler+0x1dc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d018      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_DMA_IRQHandler+0x1e0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d013      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_DMA_IRQHandler+0x1e4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00e      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_DMA_IRQHandler+0x1e8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d009      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_DMA_IRQHandler+0x1ec>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_DMA_IRQHandler+0x194>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a18      	ldr	r2, [pc, #96]	; (8002728 <HAL_DMA_IRQHandler+0x1f0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d12f      	bne.n	800272c <HAL_DMA_IRQHandler+0x1f4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e02e      	b.n	8002740 <HAL_DMA_IRQHandler+0x208>
 80026e2:	bf00      	nop
 80026e4:	24000000 	.word	0x24000000
 80026e8:	1b4e81b5 	.word	0x1b4e81b5
 80026ec:	40020010 	.word	0x40020010
 80026f0:	40020028 	.word	0x40020028
 80026f4:	40020040 	.word	0x40020040
 80026f8:	40020058 	.word	0x40020058
 80026fc:	40020070 	.word	0x40020070
 8002700:	40020088 	.word	0x40020088
 8002704:	400200a0 	.word	0x400200a0
 8002708:	400200b8 	.word	0x400200b8
 800270c:	40020410 	.word	0x40020410
 8002710:	40020428 	.word	0x40020428
 8002714:	40020440 	.word	0x40020440
 8002718:	40020458 	.word	0x40020458
 800271c:	40020470 	.word	0x40020470
 8002720:	40020488 	.word	0x40020488
 8002724:	400204a0 	.word	0x400204a0
 8002728:	400204b8 	.word	0x400204b8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0204 	bic.w	r2, r2, #4
 8002752:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2208      	movs	r2, #8
 800275e:	409a      	lsls	r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d06e      	beq.n	8002864 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_DMA_IRQHandler+0x3f8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_DMA_IRQHandler+0x3fc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a66      	ldr	r2, [pc, #408]	; (8002938 <HAL_DMA_IRQHandler+0x400>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_DMA_IRQHandler+0x404>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a63      	ldr	r2, [pc, #396]	; (8002940 <HAL_DMA_IRQHandler+0x408>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_DMA_IRQHandler+0x40c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a60      	ldr	r2, [pc, #384]	; (8002948 <HAL_DMA_IRQHandler+0x410>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5e      	ldr	r2, [pc, #376]	; (800294c <HAL_DMA_IRQHandler+0x414>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <HAL_DMA_IRQHandler+0x418>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5b      	ldr	r2, [pc, #364]	; (8002954 <HAL_DMA_IRQHandler+0x41c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5a      	ldr	r2, [pc, #360]	; (8002958 <HAL_DMA_IRQHandler+0x420>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a58      	ldr	r2, [pc, #352]	; (800295c <HAL_DMA_IRQHandler+0x424>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a57      	ldr	r2, [pc, #348]	; (8002960 <HAL_DMA_IRQHandler+0x428>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a55      	ldr	r2, [pc, #340]	; (8002964 <HAL_DMA_IRQHandler+0x42c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a54      	ldr	r2, [pc, #336]	; (8002968 <HAL_DMA_IRQHandler+0x430>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2ee>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_DMA_IRQHandler+0x434>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10a      	bne.n	800283c <HAL_DMA_IRQHandler+0x304>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e003      	b.n	8002844 <HAL_DMA_IRQHandler+0x30c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00d      	beq.n	8002864 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2201      	movs	r2, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0202 	orr.w	r2, r3, #2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2204      	movs	r2, #4
 800286e:	409a      	lsls	r2, r3
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 808f 	beq.w	8002998 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <HAL_DMA_IRQHandler+0x3f8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04a      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <HAL_DMA_IRQHandler+0x3fc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d045      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_DMA_IRQHandler+0x400>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <HAL_DMA_IRQHandler+0x404>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d03b      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_DMA_IRQHandler+0x408>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d036      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_DMA_IRQHandler+0x40c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a23      	ldr	r2, [pc, #140]	; (8002948 <HAL_DMA_IRQHandler+0x410>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d02c      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a21      	ldr	r2, [pc, #132]	; (800294c <HAL_DMA_IRQHandler+0x414>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d027      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_DMA_IRQHandler+0x418>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <HAL_DMA_IRQHandler+0x41c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_DMA_IRQHandler+0x420>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d018      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_DMA_IRQHandler+0x424>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_DMA_IRQHandler+0x428>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_DMA_IRQHandler+0x42c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_DMA_IRQHandler+0x430>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_DMA_IRQHandler+0x3e2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_DMA_IRQHandler+0x434>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d12a      	bne.n	8002970 <HAL_DMA_IRQHandler+0x438>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e023      	b.n	8002978 <HAL_DMA_IRQHandler+0x440>
 8002930:	40020010 	.word	0x40020010
 8002934:	40020028 	.word	0x40020028
 8002938:	40020040 	.word	0x40020040
 800293c:	40020058 	.word	0x40020058
 8002940:	40020070 	.word	0x40020070
 8002944:	40020088 	.word	0x40020088
 8002948:	400200a0 	.word	0x400200a0
 800294c:	400200b8 	.word	0x400200b8
 8002950:	40020410 	.word	0x40020410
 8002954:	40020428 	.word	0x40020428
 8002958:	40020440 	.word	0x40020440
 800295c:	40020458 	.word	0x40020458
 8002960:	40020470 	.word	0x40020470
 8002964:	40020488 	.word	0x40020488
 8002968:	400204a0 	.word	0x400204a0
 800296c:	400204b8 	.word	0x400204b8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2204      	movs	r2, #4
 8002986:	409a      	lsls	r2, r3
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2210      	movs	r2, #16
 80029a2:	409a      	lsls	r2, r3
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a6 	beq.w	8002afa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a85      	ldr	r2, [pc, #532]	; (8002bc8 <HAL_DMA_IRQHandler+0x690>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04a      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a83      	ldr	r2, [pc, #524]	; (8002bcc <HAL_DMA_IRQHandler+0x694>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d045      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a82      	ldr	r2, [pc, #520]	; (8002bd0 <HAL_DMA_IRQHandler+0x698>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_DMA_IRQHandler+0x69c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d03b      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7f      	ldr	r2, [pc, #508]	; (8002bd8 <HAL_DMA_IRQHandler+0x6a0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d036      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <HAL_DMA_IRQHandler+0x6a4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7c      	ldr	r2, [pc, #496]	; (8002be0 <HAL_DMA_IRQHandler+0x6a8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d02c      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7a      	ldr	r2, [pc, #488]	; (8002be4 <HAL_DMA_IRQHandler+0x6ac>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a79      	ldr	r2, [pc, #484]	; (8002be8 <HAL_DMA_IRQHandler+0x6b0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d022      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a77      	ldr	r2, [pc, #476]	; (8002bec <HAL_DMA_IRQHandler+0x6b4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a76      	ldr	r2, [pc, #472]	; (8002bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a74      	ldr	r2, [pc, #464]	; (8002bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_DMA_IRQHandler+0x6c4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a70      	ldr	r2, [pc, #448]	; (8002c00 <HAL_DMA_IRQHandler+0x6c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x516>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_DMA_IRQHandler+0x6cc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10a      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x52c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e009      	b.n	8002a78 <HAL_DMA_IRQHandler+0x540>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf14      	ite	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	2300      	moveq	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d03e      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2210      	movs	r2, #16
 8002a86:	409a      	lsls	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d108      	bne.n	8002aba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d024      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
 8002ab8:	e01f      	b.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01b      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
 8002aca:	e016      	b.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0208 	bic.w	r2, r2, #8
 8002ae8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2220      	movs	r2, #32
 8002b04:	409a      	lsls	r2, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8110 	beq.w	8002d30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <HAL_DMA_IRQHandler+0x690>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04a      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2b      	ldr	r2, [pc, #172]	; (8002bcc <HAL_DMA_IRQHandler+0x694>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d045      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <HAL_DMA_IRQHandler+0x698>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d040      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <HAL_DMA_IRQHandler+0x69c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_DMA_IRQHandler+0x6a0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d036      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a25      	ldr	r2, [pc, #148]	; (8002bdc <HAL_DMA_IRQHandler+0x6a4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d031      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_DMA_IRQHandler+0x6a8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02c      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_DMA_IRQHandler+0x6ac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d027      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_DMA_IRQHandler+0x6b0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_DMA_IRQHandler+0x6b4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01d      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <HAL_DMA_IRQHandler+0x6b8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_DMA_IRQHandler+0x6bc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <HAL_DMA_IRQHandler+0x6c0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_DMA_IRQHandler+0x6c4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_DMA_IRQHandler+0x6c8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x678>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_DMA_IRQHandler+0x6cc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d12b      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x6d0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e02a      	b.n	8002c1c <HAL_DMA_IRQHandler+0x6e4>
 8002bc6:	bf00      	nop
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40020028 	.word	0x40020028
 8002bd0:	40020040 	.word	0x40020040
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	40020070 	.word	0x40020070
 8002bdc:	40020088 	.word	0x40020088
 8002be0:	400200a0 	.word	0x400200a0
 8002be4:	400200b8 	.word	0x400200b8
 8002be8:	40020410 	.word	0x40020410
 8002bec:	40020428 	.word	0x40020428
 8002bf0:	40020440 	.word	0x40020440
 8002bf4:	40020458 	.word	0x40020458
 8002bf8:	40020470 	.word	0x40020470
 8002bfc:	40020488 	.word	0x40020488
 8002c00:	400204a0 	.word	0x400204a0
 8002c04:	400204b8 	.word	0x400204b8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8087 	beq.w	8002d30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d139      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0216 	bic.w	r2, r2, #22
 8002c4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x736>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0208 	bic.w	r2, r2, #8
 8002c7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	223f      	movs	r2, #63	; 0x3f
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 834a 	beq.w	800333c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
          }
          return;
 8002cb0:	e344      	b.n	800333c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d018      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02c      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	4798      	blx	r3
 8002cde:	e027      	b.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
 8002cf0:	e01e      	b.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10f      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0210 	bic.w	r2, r2, #16
 8002d0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8306 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8088 	beq.w	8002e58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_DMA_IRQHandler+0xa08>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04a      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a79      	ldr	r2, [pc, #484]	; (8002f44 <HAL_DMA_IRQHandler+0xa0c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d045      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a77      	ldr	r2, [pc, #476]	; (8002f48 <HAL_DMA_IRQHandler+0xa10>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a76      	ldr	r2, [pc, #472]	; (8002f4c <HAL_DMA_IRQHandler+0xa14>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03b      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a74      	ldr	r2, [pc, #464]	; (8002f50 <HAL_DMA_IRQHandler+0xa18>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d036      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a73      	ldr	r2, [pc, #460]	; (8002f54 <HAL_DMA_IRQHandler+0xa1c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d031      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_DMA_IRQHandler+0xa20>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a70      	ldr	r2, [pc, #448]	; (8002f5c <HAL_DMA_IRQHandler+0xa24>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_DMA_IRQHandler+0xa28>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6d      	ldr	r2, [pc, #436]	; (8002f64 <HAL_DMA_IRQHandler+0xa2c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01d      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6b      	ldr	r2, [pc, #428]	; (8002f68 <HAL_DMA_IRQHandler+0xa30>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6a      	ldr	r2, [pc, #424]	; (8002f6c <HAL_DMA_IRQHandler+0xa34>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <HAL_DMA_IRQHandler+0xa38>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_DMA_IRQHandler+0xa3c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_DMA_IRQHandler+0xa40>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x8b8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a64      	ldr	r2, [pc, #400]	; (8002f7c <HAL_DMA_IRQHandler+0xa44>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <HAL_DMA_IRQHandler+0x8ca>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e007      	b.n	8002e12 <HAL_DMA_IRQHandler+0x8da>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d307      	bcc.n	8002e2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f2      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x8da>
 8002e2c:	e000      	b.n	8002e30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2203      	movs	r2, #3
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e46:	e003      	b.n	8002e50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8272 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
 8002e6a:	e26c      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <HAL_DMA_IRQHandler+0xa48>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <HAL_DMA_IRQHandler+0xa4c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <HAL_DMA_IRQHandler+0xa50>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a3f      	ldr	r2, [pc, #252]	; (8002f8c <HAL_DMA_IRQHandler+0xa54>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3d      	ldr	r2, [pc, #244]	; (8002f90 <HAL_DMA_IRQHandler+0xa58>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <HAL_DMA_IRQHandler+0xa5c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a3a      	ldr	r2, [pc, #232]	; (8002f98 <HAL_DMA_IRQHandler+0xa60>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x984>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a39      	ldr	r2, [pc, #228]	; (8002f9c <HAL_DMA_IRQHandler+0xa64>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x988>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_DMA_IRQHandler+0x98a>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 823f 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2204      	movs	r2, #4
 8002eda:	409a      	lsls	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80cd 	beq.w	8003080 <HAL_DMA_IRQHandler+0xb48>
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80c7 	beq.w	8003080 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2204      	movs	r2, #4
 8002efc:	409a      	lsls	r2, r3
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d049      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8210 	beq.w	8003340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f28:	e20a      	b.n	8003340 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8206 	beq.w	8003340 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f3c:	e200      	b.n	8003340 <HAL_DMA_IRQHandler+0xe08>
 8002f3e:	bf00      	nop
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	58025408 	.word	0x58025408
 8002f84:	5802541c 	.word	0x5802541c
 8002f88:	58025430 	.word	0x58025430
 8002f8c:	58025444 	.word	0x58025444
 8002f90:	58025458 	.word	0x58025458
 8002f94:	5802546c 	.word	0x5802546c
 8002f98:	58025480 	.word	0x58025480
 8002f9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d160      	bne.n	800306c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a8c      	ldr	r2, [pc, #560]	; (80031e0 <HAL_DMA_IRQHandler+0xca8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_DMA_IRQHandler+0xcac>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a89      	ldr	r2, [pc, #548]	; (80031e8 <HAL_DMA_IRQHandler+0xcb0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a87      	ldr	r2, [pc, #540]	; (80031ec <HAL_DMA_IRQHandler+0xcb4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a86      	ldr	r2, [pc, #536]	; (80031f0 <HAL_DMA_IRQHandler+0xcb8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a84      	ldr	r2, [pc, #528]	; (80031f4 <HAL_DMA_IRQHandler+0xcbc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a83      	ldr	r2, [pc, #524]	; (80031f8 <HAL_DMA_IRQHandler+0xcc0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a81      	ldr	r2, [pc, #516]	; (80031fc <HAL_DMA_IRQHandler+0xcc4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a80      	ldr	r2, [pc, #512]	; (8003200 <HAL_DMA_IRQHandler+0xcc8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7e      	ldr	r2, [pc, #504]	; (8003204 <HAL_DMA_IRQHandler+0xccc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7d      	ldr	r2, [pc, #500]	; (8003208 <HAL_DMA_IRQHandler+0xcd0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7b      	ldr	r2, [pc, #492]	; (800320c <HAL_DMA_IRQHandler+0xcd4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_DMA_IRQHandler+0xcd8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a78      	ldr	r2, [pc, #480]	; (8003214 <HAL_DMA_IRQHandler+0xcdc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a77      	ldr	r2, [pc, #476]	; (8003218 <HAL_DMA_IRQHandler+0xce0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_IRQHandler+0xb12>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a75      	ldr	r2, [pc, #468]	; (800321c <HAL_DMA_IRQHandler+0xce4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d108      	bne.n	800305c <HAL_DMA_IRQHandler+0xb24>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0208 	bic.w	r2, r2, #8
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_DMA_IRQHandler+0xb34>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0204 	bic.w	r2, r2, #4
 800306a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8165 	beq.w	8003340 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800307e:	e15f      	b.n	8003340 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2202      	movs	r2, #2
 800308a:	409a      	lsls	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80c5 	beq.w	8003220 <HAL_DMA_IRQHandler+0xce8>
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80bf 	beq.w	8003220 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2202      	movs	r2, #2
 80030ac:	409a      	lsls	r2, r3
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 813a 	beq.w	8003344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d8:	e134      	b.n	8003344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8130 	beq.w	8003344 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030ec:	e12a      	b.n	8003344 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d168      	bne.n	80031ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_DMA_IRQHandler+0xca8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d04a      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a37      	ldr	r2, [pc, #220]	; (80031e4 <HAL_DMA_IRQHandler+0xcac>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d045      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a35      	ldr	r2, [pc, #212]	; (80031e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d040      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a34      	ldr	r2, [pc, #208]	; (80031ec <HAL_DMA_IRQHandler+0xcb4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a32      	ldr	r2, [pc, #200]	; (80031f0 <HAL_DMA_IRQHandler+0xcb8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d036      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_DMA_IRQHandler+0xcbc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d031      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <HAL_DMA_IRQHandler+0xcc0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_DMA_IRQHandler+0xcc4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d027      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <HAL_DMA_IRQHandler+0xcc8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d022      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_DMA_IRQHandler+0xccc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01d      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_DMA_IRQHandler+0xcd0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d018      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_DMA_IRQHandler+0xcd4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_DMA_IRQHandler+0xcd8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_DMA_IRQHandler+0xcdc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_DMA_IRQHandler+0xce0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_DMA_IRQHandler+0xc60>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMA_IRQHandler+0xce4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <HAL_DMA_IRQHandler+0xc72>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0214 	bic.w	r2, r2, #20
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e007      	b.n	80031ba <HAL_DMA_IRQHandler+0xc82>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 020a 	bic.w	r2, r2, #10
 80031b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80b8 	beq.w	8003344 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031dc:	e0b2      	b.n	8003344 <HAL_DMA_IRQHandler+0xe0c>
 80031de:	bf00      	nop
 80031e0:	40020010 	.word	0x40020010
 80031e4:	40020028 	.word	0x40020028
 80031e8:	40020040 	.word	0x40020040
 80031ec:	40020058 	.word	0x40020058
 80031f0:	40020070 	.word	0x40020070
 80031f4:	40020088 	.word	0x40020088
 80031f8:	400200a0 	.word	0x400200a0
 80031fc:	400200b8 	.word	0x400200b8
 8003200:	40020410 	.word	0x40020410
 8003204:	40020428 	.word	0x40020428
 8003208:	40020440 	.word	0x40020440
 800320c:	40020458 	.word	0x40020458
 8003210:	40020470 	.word	0x40020470
 8003214:	40020488 	.word	0x40020488
 8003218:	400204a0 	.word	0x400204a0
 800321c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2208      	movs	r2, #8
 800322a:	409a      	lsls	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8088 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8082 	beq.w	8003346 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a41      	ldr	r2, [pc, #260]	; (800334c <HAL_DMA_IRQHandler+0xe14>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d04a      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <HAL_DMA_IRQHandler+0xe18>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d045      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3e      	ldr	r2, [pc, #248]	; (8003354 <HAL_DMA_IRQHandler+0xe1c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d040      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <HAL_DMA_IRQHandler+0xe20>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d03b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3b      	ldr	r2, [pc, #236]	; (800335c <HAL_DMA_IRQHandler+0xe24>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d036      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a39      	ldr	r2, [pc, #228]	; (8003360 <HAL_DMA_IRQHandler+0xe28>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d031      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a38      	ldr	r2, [pc, #224]	; (8003364 <HAL_DMA_IRQHandler+0xe2c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d02c      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a36      	ldr	r2, [pc, #216]	; (8003368 <HAL_DMA_IRQHandler+0xe30>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a35      	ldr	r2, [pc, #212]	; (800336c <HAL_DMA_IRQHandler+0xe34>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a33      	ldr	r2, [pc, #204]	; (8003370 <HAL_DMA_IRQHandler+0xe38>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_DMA_IRQHandler+0xe3c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <HAL_DMA_IRQHandler+0xe40>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_DMA_IRQHandler+0xe44>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2d      	ldr	r2, [pc, #180]	; (8003380 <HAL_DMA_IRQHandler+0xe48>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <HAL_DMA_IRQHandler+0xe4c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xdaa>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <HAL_DMA_IRQHandler+0xe50>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <HAL_DMA_IRQHandler+0xdbc>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 021c 	bic.w	r2, r2, #28
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e007      	b.n	8003304 <HAL_DMA_IRQHandler+0xdcc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 020e 	bic.w	r2, r2, #14
 8003302:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2201      	movs	r2, #1
 800330e:	409a      	lsls	r2, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e004      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003344:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40020010 	.word	0x40020010
 8003350:	40020028 	.word	0x40020028
 8003354:	40020040 	.word	0x40020040
 8003358:	40020058 	.word	0x40020058
 800335c:	40020070 	.word	0x40020070
 8003360:	40020088 	.word	0x40020088
 8003364:	400200a0 	.word	0x400200a0
 8003368:	400200b8 	.word	0x400200b8
 800336c:	40020410 	.word	0x40020410
 8003370:	40020428 	.word	0x40020428
 8003374:	40020440 	.word	0x40020440
 8003378:	40020458 	.word	0x40020458
 800337c:	40020470 	.word	0x40020470
 8003380:	40020488 	.word	0x40020488
 8003384:	400204a0 	.word	0x400204a0
 8003388:	400204b8 	.word	0x400204b8

0800338c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a84      	ldr	r2, [pc, #528]	; (80035d4 <DMA_SetConfig+0x230>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d072      	beq.n	80034ae <DMA_SetConfig+0x10a>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a82      	ldr	r2, [pc, #520]	; (80035d8 <DMA_SetConfig+0x234>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d06d      	beq.n	80034ae <DMA_SetConfig+0x10a>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a81      	ldr	r2, [pc, #516]	; (80035dc <DMA_SetConfig+0x238>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d068      	beq.n	80034ae <DMA_SetConfig+0x10a>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7f      	ldr	r2, [pc, #508]	; (80035e0 <DMA_SetConfig+0x23c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d063      	beq.n	80034ae <DMA_SetConfig+0x10a>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a7e      	ldr	r2, [pc, #504]	; (80035e4 <DMA_SetConfig+0x240>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d05e      	beq.n	80034ae <DMA_SetConfig+0x10a>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7c      	ldr	r2, [pc, #496]	; (80035e8 <DMA_SetConfig+0x244>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d059      	beq.n	80034ae <DMA_SetConfig+0x10a>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7b      	ldr	r2, [pc, #492]	; (80035ec <DMA_SetConfig+0x248>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d054      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a79      	ldr	r2, [pc, #484]	; (80035f0 <DMA_SetConfig+0x24c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d04f      	beq.n	80034ae <DMA_SetConfig+0x10a>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a78      	ldr	r2, [pc, #480]	; (80035f4 <DMA_SetConfig+0x250>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d04a      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a76      	ldr	r2, [pc, #472]	; (80035f8 <DMA_SetConfig+0x254>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d045      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <DMA_SetConfig+0x258>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d040      	beq.n	80034ae <DMA_SetConfig+0x10a>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a73      	ldr	r2, [pc, #460]	; (8003600 <DMA_SetConfig+0x25c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d03b      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <DMA_SetConfig+0x260>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d036      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a70      	ldr	r2, [pc, #448]	; (8003608 <DMA_SetConfig+0x264>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <DMA_SetConfig+0x10a>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6f      	ldr	r2, [pc, #444]	; (800360c <DMA_SetConfig+0x268>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d02c      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6d      	ldr	r2, [pc, #436]	; (8003610 <DMA_SetConfig+0x26c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d027      	beq.n	80034ae <DMA_SetConfig+0x10a>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6c      	ldr	r2, [pc, #432]	; (8003614 <DMA_SetConfig+0x270>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6a      	ldr	r2, [pc, #424]	; (8003618 <DMA_SetConfig+0x274>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01d      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a69      	ldr	r2, [pc, #420]	; (800361c <DMA_SetConfig+0x278>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d018      	beq.n	80034ae <DMA_SetConfig+0x10a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a67      	ldr	r2, [pc, #412]	; (8003620 <DMA_SetConfig+0x27c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a66      	ldr	r2, [pc, #408]	; (8003624 <DMA_SetConfig+0x280>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00e      	beq.n	80034ae <DMA_SetConfig+0x10a>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a64      	ldr	r2, [pc, #400]	; (8003628 <DMA_SetConfig+0x284>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <DMA_SetConfig+0x10a>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a63      	ldr	r2, [pc, #396]	; (800362c <DMA_SetConfig+0x288>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <DMA_SetConfig+0x10a>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a61      	ldr	r2, [pc, #388]	; (8003630 <DMA_SetConfig+0x28c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <DMA_SetConfig+0x10e>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <DMA_SetConfig+0x110>
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <DMA_SetConfig+0x230>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a3d      	ldr	r2, [pc, #244]	; (80035d8 <DMA_SetConfig+0x234>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a3b      	ldr	r2, [pc, #236]	; (80035dc <DMA_SetConfig+0x238>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3a      	ldr	r2, [pc, #232]	; (80035e0 <DMA_SetConfig+0x23c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <DMA_SetConfig+0x240>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a37      	ldr	r2, [pc, #220]	; (80035e8 <DMA_SetConfig+0x244>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a35      	ldr	r2, [pc, #212]	; (80035ec <DMA_SetConfig+0x248>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a34      	ldr	r2, [pc, #208]	; (80035f0 <DMA_SetConfig+0x24c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a32      	ldr	r2, [pc, #200]	; (80035f4 <DMA_SetConfig+0x250>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <DMA_SetConfig+0x254>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2f      	ldr	r2, [pc, #188]	; (80035fc <DMA_SetConfig+0x258>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2e      	ldr	r2, [pc, #184]	; (8003600 <DMA_SetConfig+0x25c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <DMA_SetConfig+0x260>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <DMA_SetConfig+0x264>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <DMA_SetConfig+0x268>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <DMA_SetConfig+0x1d0>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a28      	ldr	r2, [pc, #160]	; (8003610 <DMA_SetConfig+0x26c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <DMA_SetConfig+0x1d4>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <DMA_SetConfig+0x1d6>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d05a      	beq.n	8003634 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	223f      	movs	r2, #63	; 0x3f
 8003588:	409a      	lsls	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800359c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d108      	bne.n	80035c0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035be:	e087      	b.n	80036d0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]
}
 80035d0:	e07e      	b.n	80036d0 <DMA_SetConfig+0x32c>
 80035d2:	bf00      	nop
 80035d4:	40020010 	.word	0x40020010
 80035d8:	40020028 	.word	0x40020028
 80035dc:	40020040 	.word	0x40020040
 80035e0:	40020058 	.word	0x40020058
 80035e4:	40020070 	.word	0x40020070
 80035e8:	40020088 	.word	0x40020088
 80035ec:	400200a0 	.word	0x400200a0
 80035f0:	400200b8 	.word	0x400200b8
 80035f4:	40020410 	.word	0x40020410
 80035f8:	40020428 	.word	0x40020428
 80035fc:	40020440 	.word	0x40020440
 8003600:	40020458 	.word	0x40020458
 8003604:	40020470 	.word	0x40020470
 8003608:	40020488 	.word	0x40020488
 800360c:	400204a0 	.word	0x400204a0
 8003610:	400204b8 	.word	0x400204b8
 8003614:	58025408 	.word	0x58025408
 8003618:	5802541c 	.word	0x5802541c
 800361c:	58025430 	.word	0x58025430
 8003620:	58025444 	.word	0x58025444
 8003624:	58025458 	.word	0x58025458
 8003628:	5802546c 	.word	0x5802546c
 800362c:	58025480 	.word	0x58025480
 8003630:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a28      	ldr	r2, [pc, #160]	; (80036dc <DMA_SetConfig+0x338>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d022      	beq.n	8003684 <DMA_SetConfig+0x2e0>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <DMA_SetConfig+0x33c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01d      	beq.n	8003684 <DMA_SetConfig+0x2e0>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <DMA_SetConfig+0x340>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <DMA_SetConfig+0x2e0>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <DMA_SetConfig+0x344>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <DMA_SetConfig+0x2e0>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a22      	ldr	r2, [pc, #136]	; (80036ec <DMA_SetConfig+0x348>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <DMA_SetConfig+0x2e0>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <DMA_SetConfig+0x34c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <DMA_SetConfig+0x2e0>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <DMA_SetConfig+0x350>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <DMA_SetConfig+0x2e0>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <DMA_SetConfig+0x354>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <DMA_SetConfig+0x2e4>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <DMA_SetConfig+0x2e6>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2201      	movs	r2, #1
 8003698:	409a      	lsls	r2, r3
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d108      	bne.n	80036c0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	60da      	str	r2, [r3, #12]
}
 80036be:	e007      	b.n	80036d0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	58025408 	.word	0x58025408
 80036e0:	5802541c 	.word	0x5802541c
 80036e4:	58025430 	.word	0x58025430
 80036e8:	58025444 	.word	0x58025444
 80036ec:	58025458 	.word	0x58025458
 80036f0:	5802546c 	.word	0x5802546c
 80036f4:	58025480 	.word	0x58025480
 80036f8:	58025494 	.word	0x58025494

080036fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a42      	ldr	r2, [pc, #264]	; (8003814 <DMA_CalcBaseAndBitshift+0x118>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d04a      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a41      	ldr	r2, [pc, #260]	; (8003818 <DMA_CalcBaseAndBitshift+0x11c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d045      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3f      	ldr	r2, [pc, #252]	; (800381c <DMA_CalcBaseAndBitshift+0x120>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d040      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3e      	ldr	r2, [pc, #248]	; (8003820 <DMA_CalcBaseAndBitshift+0x124>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d03b      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <DMA_CalcBaseAndBitshift+0x128>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d036      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <DMA_CalcBaseAndBitshift+0x12c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d031      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a39      	ldr	r2, [pc, #228]	; (800382c <DMA_CalcBaseAndBitshift+0x130>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d02c      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a38      	ldr	r2, [pc, #224]	; (8003830 <DMA_CalcBaseAndBitshift+0x134>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d027      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a36      	ldr	r2, [pc, #216]	; (8003834 <DMA_CalcBaseAndBitshift+0x138>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d022      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a35      	ldr	r2, [pc, #212]	; (8003838 <DMA_CalcBaseAndBitshift+0x13c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d01d      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a33      	ldr	r2, [pc, #204]	; (800383c <DMA_CalcBaseAndBitshift+0x140>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d018      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a32      	ldr	r2, [pc, #200]	; (8003840 <DMA_CalcBaseAndBitshift+0x144>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a30      	ldr	r2, [pc, #192]	; (8003844 <DMA_CalcBaseAndBitshift+0x148>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <DMA_CalcBaseAndBitshift+0x14c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <DMA_CalcBaseAndBitshift+0x150>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <DMA_CalcBaseAndBitshift+0xa8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2c      	ldr	r2, [pc, #176]	; (8003850 <DMA_CalcBaseAndBitshift+0x154>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <DMA_CalcBaseAndBitshift+0xac>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <DMA_CalcBaseAndBitshift+0xae>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d024      	beq.n	80037f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3b10      	subs	r3, #16
 80037b6:	4a27      	ldr	r2, [pc, #156]	; (8003854 <DMA_CalcBaseAndBitshift+0x158>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	4a24      	ldr	r2, [pc, #144]	; (8003858 <DMA_CalcBaseAndBitshift+0x15c>)
 80037c8:	5cd3      	ldrb	r3, [r2, r3]
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d908      	bls.n	80037e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <DMA_CalcBaseAndBitshift+0x160>)
 80037de:	4013      	ands	r3, r2
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	659a      	str	r2, [r3, #88]	; 0x58
 80037e6:	e00d      	b.n	8003804 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <DMA_CalcBaseAndBitshift+0x160>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6593      	str	r3, [r2, #88]	; 0x58
 80037f6:	e005      	b.n	8003804 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40020010 	.word	0x40020010
 8003818:	40020028 	.word	0x40020028
 800381c:	40020040 	.word	0x40020040
 8003820:	40020058 	.word	0x40020058
 8003824:	40020070 	.word	0x40020070
 8003828:	40020088 	.word	0x40020088
 800382c:	400200a0 	.word	0x400200a0
 8003830:	400200b8 	.word	0x400200b8
 8003834:	40020410 	.word	0x40020410
 8003838:	40020428 	.word	0x40020428
 800383c:	40020440 	.word	0x40020440
 8003840:	40020458 	.word	0x40020458
 8003844:	40020470 	.word	0x40020470
 8003848:	40020488 	.word	0x40020488
 800384c:	400204a0 	.word	0x400204a0
 8003850:	400204b8 	.word	0x400204b8
 8003854:	aaaaaaab 	.word	0xaaaaaaab
 8003858:	0800e0dc 	.word	0x0800e0dc
 800385c:	fffffc00 	.word	0xfffffc00

08003860 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d120      	bne.n	80038b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b03      	cmp	r3, #3
 800387a:	d858      	bhi.n	800392e <DMA_CheckFifoParam+0xce>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <DMA_CheckFifoParam+0x24>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	08003895 	.word	0x08003895
 8003888:	080038a7 	.word	0x080038a7
 800388c:	08003895 	.word	0x08003895
 8003890:	0800392f 	.word	0x0800392f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d048      	beq.n	8003932 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038a4:	e045      	b.n	8003932 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ae:	d142      	bne.n	8003936 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038b4:	e03f      	b.n	8003936 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	d123      	bne.n	8003908 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d838      	bhi.n	800393a <DMA_CheckFifoParam+0xda>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <DMA_CheckFifoParam+0x70>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038e7 	.word	0x080038e7
 80038d8:	080038e1 	.word	0x080038e1
 80038dc:	080038f9 	.word	0x080038f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
        break;
 80038e4:	e030      	b.n	8003948 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d025      	beq.n	800393e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038f6:	e022      	b.n	800393e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003900:	d11f      	bne.n	8003942 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003906:	e01c      	b.n	8003942 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	2b02      	cmp	r3, #2
 800390e:	d902      	bls.n	8003916 <DMA_CheckFifoParam+0xb6>
 8003910:	2b03      	cmp	r3, #3
 8003912:	d003      	beq.n	800391c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003914:	e018      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
        break;
 800391a:	e015      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
    break;
 800392c:	e00b      	b.n	8003946 <DMA_CheckFifoParam+0xe6>
        break;
 800392e:	bf00      	nop
 8003930:	e00a      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
        break;
 8003932:	bf00      	nop
 8003934:	e008      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
        break;
 8003936:	bf00      	nop
 8003938:	e006      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
        break;
 800393a:	bf00      	nop
 800393c:	e004      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
        break;
 800393e:	bf00      	nop
 8003940:	e002      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
        break;
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
    break;
 8003946:	bf00      	nop
    }
  }

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop

08003958 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d022      	beq.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a36      	ldr	r2, [pc, #216]	; (8003a50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01d      	beq.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a35      	ldr	r2, [pc, #212]	; (8003a54 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d018      	beq.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a33      	ldr	r2, [pc, #204]	; (8003a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a32      	ldr	r2, [pc, #200]	; (8003a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00e      	beq.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a30      	ldr	r2, [pc, #192]	; (8003a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2f      	ldr	r2, [pc, #188]	; (8003a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2d      	ldr	r2, [pc, #180]	; (8003a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	3b08      	subs	r3, #8
 80039c8:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80039e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2201      	movs	r2, #1
 80039ee:	409a      	lsls	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80039f4:	e024      	b.n	8003a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	3b10      	subs	r3, #16
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d806      	bhi.n	8003a1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d902      	bls.n	8003a1e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a30:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2201      	movs	r2, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	58025408 	.word	0x58025408
 8003a50:	5802541c 	.word	0x5802541c
 8003a54:	58025430 	.word	0x58025430
 8003a58:	58025444 	.word	0x58025444
 8003a5c:	58025458 	.word	0x58025458
 8003a60:	5802546c 	.word	0x5802546c
 8003a64:	58025480 	.word	0x58025480
 8003a68:	58025494 	.word	0x58025494
 8003a6c:	cccccccd 	.word	0xcccccccd
 8003a70:	16009600 	.word	0x16009600
 8003a74:	58025880 	.word	0x58025880
 8003a78:	aaaaaaab 	.word	0xaaaaaaab
 8003a7c:	400204b8 	.word	0x400204b8
 8003a80:	4002040f 	.word	0x4002040f
 8003a84:	10008200 	.word	0x10008200
 8003a88:	40020880 	.word	0x40020880

08003a8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04a      	beq.n	8003b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d847      	bhi.n	8003b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a22      	ldr	r2, [pc, #136]	; (8003b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b14:	671a      	str	r2, [r3, #112]	; 0x70
 8003b16:	e009      	b.n	8003b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b2a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	2201      	movs	r2, #1
 8003b32:	409a      	lsls	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	58025408 	.word	0x58025408
 8003b48:	5802541c 	.word	0x5802541c
 8003b4c:	58025430 	.word	0x58025430
 8003b50:	58025444 	.word	0x58025444
 8003b54:	58025458 	.word	0x58025458
 8003b58:	5802546c 	.word	0x5802546c
 8003b5c:	58025480 	.word	0x58025480
 8003b60:	58025494 	.word	0x58025494
 8003b64:	1600963f 	.word	0x1600963f
 8003b68:	58025940 	.word	0x58025940
 8003b6c:	1000823f 	.word	0x1000823f
 8003b70:	40020940 	.word	0x40020940

08003b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b82:	4b89      	ldr	r3, [pc, #548]	; (8003da8 <HAL_GPIO_Init+0x234>)
 8003b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b86:	e194      	b.n	8003eb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8186 	beq.w	8003eac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d005      	beq.n	8003bb8 <HAL_GPIO_Init+0x44>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d130      	bne.n	8003c1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0201 	and.w	r2, r3, #1
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d017      	beq.n	8003c56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d123      	bne.n	8003caa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	08da      	lsrs	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3208      	adds	r2, #8
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0203 	and.w	r2, r3, #3
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80e0 	beq.w	8003eac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cec:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_GPIO_Init+0x238>)
 8003cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cf2:	4a2e      	ldr	r2, [pc, #184]	; (8003dac <HAL_GPIO_Init+0x238>)
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_GPIO_Init+0x238>)
 8003cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0a:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <HAL_GPIO_Init+0x23c>)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <HAL_GPIO_Init+0x240>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d052      	beq.n	8003ddc <HAL_GPIO_Init+0x268>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_GPIO_Init+0x244>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d031      	beq.n	8003da2 <HAL_GPIO_Init+0x22e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_GPIO_Init+0x248>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02b      	beq.n	8003d9e <HAL_GPIO_Init+0x22a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_GPIO_Init+0x24c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d025      	beq.n	8003d9a <HAL_GPIO_Init+0x226>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_GPIO_Init+0x250>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01f      	beq.n	8003d96 <HAL_GPIO_Init+0x222>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_GPIO_Init+0x254>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d019      	beq.n	8003d92 <HAL_GPIO_Init+0x21e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_GPIO_Init+0x258>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_GPIO_Init+0x21a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <HAL_GPIO_Init+0x25c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00d      	beq.n	8003d8a <HAL_GPIO_Init+0x216>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_GPIO_Init+0x260>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <HAL_GPIO_Init+0x212>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <HAL_GPIO_Init+0x264>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_GPIO_Init+0x20e>
 8003d7e:	2309      	movs	r3, #9
 8003d80:	e02d      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d82:	230a      	movs	r3, #10
 8003d84:	e02b      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d86:	2308      	movs	r3, #8
 8003d88:	e029      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d8a:	2307      	movs	r3, #7
 8003d8c:	e027      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d8e:	2306      	movs	r3, #6
 8003d90:	e025      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d92:	2305      	movs	r3, #5
 8003d94:	e023      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d96:	2304      	movs	r3, #4
 8003d98:	e021      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e01f      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e01d      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e01b      	b.n	8003dde <HAL_GPIO_Init+0x26a>
 8003da6:	bf00      	nop
 8003da8:	58000080 	.word	0x58000080
 8003dac:	58024400 	.word	0x58024400
 8003db0:	58000400 	.word	0x58000400
 8003db4:	58020000 	.word	0x58020000
 8003db8:	58020400 	.word	0x58020400
 8003dbc:	58020800 	.word	0x58020800
 8003dc0:	58020c00 	.word	0x58020c00
 8003dc4:	58021000 	.word	0x58021000
 8003dc8:	58021400 	.word	0x58021400
 8003dcc:	58021800 	.word	0x58021800
 8003dd0:	58021c00 	.word	0x58021c00
 8003dd4:	58022000 	.word	0x58022000
 8003dd8:	58022400 	.word	0x58022400
 8003ddc:	2300      	movs	r3, #0
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	f002 0203 	and.w	r2, r2, #3
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	4093      	lsls	r3, r2
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dee:	4938      	ldr	r1, [pc, #224]	; (8003ed0 <HAL_GPIO_Init+0x35c>)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f47f ae63 	bne.w	8003b88 <HAL_GPIO_Init+0x14>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3724      	adds	r7, #36	; 0x24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	58000400 	.word	0x58000400

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ef0:	e003      	b.n	8003efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	041a      	lsls	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fc fb4f 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3c:	b08f      	sub	sp, #60	; 0x3c
 8003f3e:	af0a      	add	r7, sp, #40	; 0x28
 8003f40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e116      	b.n	800417a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f009 fd00 	bl	800d96c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f006 fabb 	bl	800a506 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	687e      	ldr	r6, [r7, #4]
 8003f98:	466d      	mov	r5, sp
 8003f9a:	f106 0410 	add.w	r4, r6, #16
 8003f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003faa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fae:	1d33      	adds	r3, r6, #4
 8003fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f006 f986 	bl	800a2c4 <USB_CoreInit>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0d7      	b.n	800417a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f006 faa9 	bl	800a528 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e04a      	b.n	8004072 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	333d      	adds	r3, #61	; 0x3d
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	333c      	adds	r3, #60	; 0x3c
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	b298      	uxth	r0, r3
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	3342      	adds	r3, #66	; 0x42
 8004018:	4602      	mov	r2, r0
 800401a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	333f      	adds	r3, #63	; 0x3f
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	3344      	adds	r3, #68	; 0x44
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3348      	adds	r3, #72	; 0x48
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	3350      	adds	r3, #80	; 0x50
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	3301      	adds	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d3af      	bcc.n	8003fdc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800407c:	2300      	movs	r3, #0
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e044      	b.n	800410c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	3301      	adds	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d3b5      	bcc.n	8004082 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	687e      	ldr	r6, [r7, #4]
 800411e:	466d      	mov	r5, sp
 8004120:	f106 0410 	add.w	r4, r6, #16
 8004124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800412a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004130:	e885 0003 	stmia.w	r5, {r0, r1}
 8004134:	1d33      	adds	r3, r6, #4
 8004136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	f006 fa41 	bl	800a5c0 <USB_DevInit>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e014      	b.n	800417a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b01      	cmp	r3, #1
 8004166:	d102      	bne.n	800416e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 f885 	bl	8005278 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f007 fad9 	bl	800b72a <USB_DevDisconnect>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004182 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_PCD_Start+0x1c>
 800419a:	2302      	movs	r3, #2
 800419c:	e020      	b.n	80041e0 <HAL_PCD_Start+0x5e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d109      	bne.n	80041c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d005      	beq.n	80041c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f006 f98c 	bl	800a4e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f007 fa89 	bl	800b6e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b08d      	sub	sp, #52	; 0x34
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f007 fb47 	bl	800b892 <USB_GetMode>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 83be 	bne.w	8004988 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f007 faab 	bl	800b76c <USB_ReadInterrupts>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 83b4 	beq.w	8004986 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f007 faa2 	bl	800b76c <USB_ReadInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d107      	bne.n	8004242 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f002 0202 	and.w	r2, r2, #2
 8004240:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f007 fa90 	bl	800b76c <USB_ReadInterrupts>
 800424c:	4603      	mov	r3, r0
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b10      	cmp	r3, #16
 8004254:	d161      	bne.n	800431a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0210 	bic.w	r2, r2, #16
 8004264:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f003 020f 	and.w	r2, r3, #15
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	3304      	adds	r3, #4
 8004284:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	0c5b      	lsrs	r3, r3, #17
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	2b02      	cmp	r3, #2
 8004290:	d124      	bne.n	80042dc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d035      	beq.n	800430a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80042a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	6a38      	ldr	r0, [r7, #32]
 80042b2:	f007 f8c7 	bl	800b444 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c2:	441a      	add	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	699a      	ldr	r2, [r3, #24]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042d4:	441a      	add	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	619a      	str	r2, [r3, #24]
 80042da:	e016      	b.n	800430a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	0c5b      	lsrs	r3, r3, #17
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d110      	bne.n	800430a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042ee:	2208      	movs	r2, #8
 80042f0:	4619      	mov	r1, r3
 80042f2:	6a38      	ldr	r0, [r7, #32]
 80042f4:	f007 f8a6 	bl	800b444 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004304:	441a      	add	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0210 	orr.w	r2, r2, #16
 8004318:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f007 fa24 	bl	800b76c <USB_ReadInterrupts>
 8004324:	4603      	mov	r3, r0
 8004326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800432a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800432e:	d16e      	bne.n	800440e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f007 fa2a 	bl	800b792 <USB_ReadDevAllOutEpInterrupt>
 800433e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004340:	e062      	b.n	8004408 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d057      	beq.n	80043fc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f007 fa4f 	bl	800b7fa <USB_ReadDevOutEPInterrupt>
 800435c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	461a      	mov	r2, r3
 8004376:	2301      	movs	r3, #1
 8004378:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800437a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fdd1 	bl	8004f24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	2308      	movs	r3, #8
 800439c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800439e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fecb 	bl	800513c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	2310      	movs	r3, #16
 80043c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	2320      	movs	r3, #32
 80043dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	461a      	mov	r2, r3
 80043f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	3301      	adds	r3, #1
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	085b      	lsrs	r3, r3, #1
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d199      	bne.n	8004342 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f007 f9aa 	bl	800b76c <USB_ReadInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004422:	f040 80c4 	bne.w	80045ae <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f007 f9cb 	bl	800b7c6 <USB_ReadDevAllInEpInterrupt>
 8004430:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004436:	e0b6      	b.n	80045a6 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80ab 	beq.w	800459a <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f007 f9f1 	bl	800b836 <USB_ReadDevInEPInterrupt>
 8004454:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d057      	beq.n	8004510 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	2201      	movs	r2, #1
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	43db      	mvns	r3, r3
 800447a:	69f9      	ldr	r1, [r7, #28]
 800447c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004480:	4013      	ands	r3, r2
 8004482:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	461a      	mov	r2, r3
 8004492:	2301      	movs	r3, #1
 8004494:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d132      	bne.n	8004504 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3348      	adds	r3, #72	; 0x48
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4403      	add	r3, r0
 80044be:	3344      	adds	r3, #68	; 0x44
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4419      	add	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4403      	add	r3, r0
 80044d2:	3348      	adds	r3, #72	; 0x48
 80044d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d113      	bne.n	8004504 <HAL_PCD_IRQHandler+0x31c>
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	3350      	adds	r3, #80	; 0x50
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d108      	bne.n	8004504 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044fc:	461a      	mov	r2, r3
 80044fe:	2101      	movs	r1, #1
 8004500:	f007 f9fa 	bl	800b8f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	b2db      	uxtb	r3, r3
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f009 fadd 	bl	800daca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	461a      	mov	r2, r3
 8004528:	2308      	movs	r3, #8
 800452a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	461a      	mov	r2, r3
 8004544:	2310      	movs	r3, #16
 8004546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	461a      	mov	r2, r3
 8004560:	2340      	movs	r3, #64	; 0x40
 8004562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800456e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004570:	6a38      	ldr	r0, [r7, #32]
 8004572:	f006 f983 	bl	800a87c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	461a      	mov	r2, r3
 8004584:	2302      	movs	r3, #2
 8004586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fc38 	bl	8004e0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	3301      	adds	r3, #1
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f47f af45 	bne.w	8004438 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f007 f8da 	bl	800b76c <USB_ReadInterrupts>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c2:	d122      	bne.n	800460a <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d108      	bne.n	80045f4 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045ea:	2100      	movs	r1, #0
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fe67 	bl	80052c0 <HAL_PCDEx_LPM_Callback>
 80045f2:	e002      	b.n	80045fa <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f009 fadf 	bl	800dbb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f007 f8ac 	bl	800b76c <USB_ReadInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d112      	bne.n	8004646 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d102      	bne.n	8004636 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f009 fa9b 	bl	800db6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004644:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f007 f88e 	bl	800b76c <USB_ReadInterrupts>
 8004650:	4603      	mov	r3, r0
 8004652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800465a:	d121      	bne.n	80046a0 <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800466a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d111      	bne.n	800469a <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004690:	2101      	movs	r1, #1
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fe14 	bl	80052c0 <HAL_PCDEx_LPM_Callback>
 8004698:	e002      	b.n	80046a0 <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f009 fa66 	bl	800db6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f007 f861 	bl	800b76c <USB_ReadInterrupts>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b4:	f040 80b7 	bne.w	8004826 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2110      	movs	r1, #16
 80046d2:	4618      	mov	r0, r3
 80046d4:	f006 f8d2 	bl	800a87c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d8:	2300      	movs	r3, #0
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046dc:	e046      	b.n	800476c <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004710:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	461a      	mov	r2, r3
 8004720:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004724:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004744:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	440a      	add	r2, r1
 800475c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004764:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	3301      	adds	r3, #1
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004772:	429a      	cmp	r2, r3
 8004774:	d3b3      	bcc.n	80046de <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004788:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a2:	f043 030b 	orr.w	r3, r3, #11
 80047a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b8:	f043 030b 	orr.w	r3, r3, #11
 80047bc:	6453      	str	r3, [r2, #68]	; 0x44
 80047be:	e015      	b.n	80047ec <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	4619      	mov	r1, r3
 80047d0:	f242 032b 	movw	r3, #8235	; 0x202b
 80047d4:	4313      	orrs	r3, r2
 80047d6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e6:	f043 030b 	orr.w	r3, r3, #11
 80047ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004810:	461a      	mov	r2, r3
 8004812:	f007 f871 	bl	800b8f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f006 ff9e 	bl	800b76c <USB_ReadInterrupts>
 8004830:	4603      	mov	r3, r0
 8004832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	d124      	bne.n	8004886 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f007 f835 	bl	800b8b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f006 f88f 	bl	800a96e <USB_GetDevSpeed>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681c      	ldr	r4, [r3, #0]
 800485c:	f001 fce2 	bl	8006224 <HAL_RCC_GetHCLKFreq>
 8004860:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	4620      	mov	r0, r4
 800486c:	f005 fd98 	bl	800a3a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f009 f952 	bl	800db1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004884:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f006 ff6e 	bl	800b76c <USB_ReadInterrupts>
 8004890:	4603      	mov	r3, r0
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b08      	cmp	r3, #8
 8004898:	d10a      	bne.n	80048b0 <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f009 f92f 	bl	800dafe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f002 0208 	and.w	r2, r2, #8
 80048ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f006 ff59 	bl	800b76c <USB_ReadInterrupts>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c4:	d10f      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f009 f991 	bl	800dbf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f006 ff3e 	bl	800b76c <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fa:	d10f      	bne.n	800491c <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	b2db      	uxtb	r3, r3
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f009 f964 	bl	800dbd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800491a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f006 ff23 	bl	800b76c <USB_ReadInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d10a      	bne.n	8004948 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f009 f972 	bl	800dc1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f006 ff0d 	bl	800b76c <USB_ReadInterrupts>
 8004952:	4603      	mov	r3, r0
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d115      	bne.n	8004988 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f009 f962 	bl	800dc38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	e000      	b.n	8004988 <HAL_PCD_IRQHandler+0x7a0>
      return;
 8004986:	bf00      	nop
    }
  }
}
 8004988:	3734      	adds	r7, #52	; 0x34
 800498a:	46bd      	mov	sp, r7
 800498c:	bd90      	pop	{r4, r7, pc}

0800498e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_PCD_SetAddress+0x1a>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e013      	b.n	80049d0 <HAL_PCD_SetAddress+0x42>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	78fa      	ldrb	r2, [r7, #3]
 80049b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f006 fe6b 	bl	800b69c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	70fb      	strb	r3, [r7, #3]
 80049ea:	460b      	mov	r3, r1
 80049ec:	803b      	strh	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da0f      	bge.n	8004a1e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	f003 020f 	and.w	r2, r3, #15
 8004a04:	4613      	mov	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	3338      	adds	r3, #56	; 0x38
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4413      	add	r3, r2
 8004a12:	3304      	adds	r3, #4
 8004a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	705a      	strb	r2, [r3, #1]
 8004a1c:	e00f      	b.n	8004a3e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a4a:	883a      	ldrh	r2, [r7, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	78ba      	ldrb	r2, [r7, #2]
 8004a54:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a68:	78bb      	ldrb	r3, [r7, #2]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d102      	bne.n	8004a74 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_PCD_EP_Open+0xaa>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e00e      	b.n	8004aa0 <HAL_PCD_EP_Open+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f005 ff91 	bl	800a9b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	da0f      	bge.n	8004adc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	f003 020f 	and.w	r2, r3, #15
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	3338      	adds	r3, #56	; 0x38
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4413      	add	r3, r2
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	705a      	strb	r2, [r3, #1]
 8004ada:	e00f      	b.n	8004afc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 020f 	and.w	r2, r3, #15
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	3304      	adds	r3, #4
 8004af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_PCD_EP_Close+0x6e>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e00e      	b.n	8004b34 <HAL_PCD_EP_Close+0x8c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f005 ffcf 	bl	800aac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b4c:	7afb      	ldrb	r3, [r7, #11]
 8004b4e:	f003 020f 	and.w	r2, r3, #15
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d102      	bne.n	8004b98 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b98:	7afb      	ldrb	r3, [r7, #11]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	461a      	mov	r2, r3
 8004bae:	6979      	ldr	r1, [r7, #20]
 8004bb0:	f006 fab2 	bl	800b118 <USB_EP0StartXfer>
 8004bb4:	e008      	b.n	8004bc8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6979      	ldr	r1, [r7, #20]
 8004bc4:	f006 f85c 	bl	800ac80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004bf4:	681b      	ldr	r3, [r3, #0]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c12:	7afb      	ldrb	r3, [r7, #11]
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	3338      	adds	r3, #56	; 0x38
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	3304      	adds	r3, #4
 8004c28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c42:	7afb      	ldrb	r3, [r7, #11]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d102      	bne.n	8004c5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c5c:	7afb      	ldrb	r3, [r7, #11]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	f006 fa50 	bl	800b118 <USB_EP0StartXfer>
 8004c78:	e008      	b.n	8004c8c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	f005 fffa 	bl	800ac80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f003 020f 	and.w	r2, r3, #15
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d901      	bls.n	8004cb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e050      	b.n	8004d56 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	da0f      	bge.n	8004cdc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	f003 020f 	and.w	r2, r3, #15
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	3338      	adds	r3, #56	; 0x38
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4413      	add	r3, r2
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	705a      	strb	r2, [r3, #1]
 8004cda:	e00d      	b.n	8004cf8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	3304      	adds	r3, #4
 8004cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_PCD_EP_SetStall+0x82>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e01e      	b.n	8004d56 <HAL_PCD_EP_SetStall+0xc0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f006 fbe4 	bl	800b4f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	b2d9      	uxtb	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d46:	461a      	mov	r2, r3
 8004d48:	f006 fdd6 	bl	800b8f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d901      	bls.n	8004d7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e042      	b.n	8004e02 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	da0f      	bge.n	8004da4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	f003 020f 	and.w	r2, r3, #15
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	3338      	adds	r3, #56	; 0x38
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	705a      	strb	r2, [r3, #1]
 8004da2:	e00f      	b.n	8004dc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	f003 020f 	and.w	r2, r3, #15
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	3304      	adds	r3, #4
 8004dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_PCD_EP_ClrStall+0x86>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e00e      	b.n	8004e02 <HAL_PCD_EP_ClrStall+0xa4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68f9      	ldr	r1, [r7, #12]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f006 fbec 	bl	800b5d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b08a      	sub	sp, #40	; 0x28
 8004e0e:	af02      	add	r7, sp, #8
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	3338      	adds	r3, #56	; 0x38
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3304      	adds	r3, #4
 8004e30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d901      	bls.n	8004e42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e06c      	b.n	8004f1c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d902      	bls.n	8004e5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3303      	adds	r3, #3
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e66:	e02b      	b.n	8004ec0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d902      	bls.n	8004e84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3303      	adds	r3, #3
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	6978      	ldr	r0, [r7, #20]
 8004ea4:	f006 fa90 	bl	800b3c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	441a      	add	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	441a      	add	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d809      	bhi.n	8004eea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d203      	bcs.n	8004eea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1be      	bne.n	8004e68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d811      	bhi.n	8004f1a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	2201      	movs	r2, #1
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	6939      	ldr	r1, [r7, #16]
 8004f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f16:	4013      	ands	r3, r2
 8004f18:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	333c      	adds	r3, #60	; 0x3c
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	f040 80a0 	bne.w	800509c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d015      	beq.n	8004f92 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a72      	ldr	r2, [pc, #456]	; (8005134 <PCD_EP_OutXfrComplete_int+0x210>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	f240 80dd 	bls.w	800512a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80d7 	beq.w	800512a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8e:	6093      	str	r3, [r2, #8]
 8004f90:	e0cb      	b.n	800512a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2320      	movs	r3, #32
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	e0bc      	b.n	800512a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f040 80b7 	bne.w	800512a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a5d      	ldr	r2, [pc, #372]	; (8005134 <PCD_EP_OutXfrComplete_int+0x210>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d90f      	bls.n	8004fe4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe0:	6093      	str	r3, [r2, #8]
 8004fe2:	e0a2      	b.n	800512a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ff6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	0159      	lsls	r1, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	440b      	add	r3, r1
 8005000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800500a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4403      	add	r3, r0
 800501a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800501e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4403      	add	r3, r0
 8005042:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4419      	add	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	4613      	mov	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4403      	add	r3, r0
 8005058:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800505c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d114      	bne.n	800508e <PCD_EP_OutXfrComplete_int+0x16a>
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d108      	bne.n	800508e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005086:	461a      	mov	r2, r3
 8005088:	2101      	movs	r1, #1
 800508a:	f006 fc35 	bl	800b8f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f008 fcfd 	bl	800da94 <HAL_PCD_DataOutStageCallback>
 800509a:	e046      	b.n	800512a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a26      	ldr	r2, [pc, #152]	; (8005138 <PCD_EP_OutXfrComplete_int+0x214>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d124      	bne.n	80050ee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	461a      	mov	r2, r3
 80050bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c0:	6093      	str	r3, [r2, #8]
 80050c2:	e032      	b.n	800512a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	461a      	mov	r2, r3
 80050dc:	2320      	movs	r3, #32
 80050de:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f008 fcd4 	bl	800da94 <HAL_PCD_DataOutStageCallback>
 80050ec:	e01d      	b.n	800512a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d114      	bne.n	800511e <PCD_EP_OutXfrComplete_int+0x1fa>
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d108      	bne.n	800511e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005116:	461a      	mov	r2, r3
 8005118:	2100      	movs	r1, #0
 800511a:	f006 fbed 	bl	800b8f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f008 fcb5 	bl	800da94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	4f54300a 	.word	0x4f54300a
 8005138:	4f54310a 	.word	0x4f54310a

0800513c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	333c      	adds	r3, #60	; 0x3c
 8005154:	3304      	adds	r3, #4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d90e      	bls.n	8005190 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	461a      	mov	r2, r3
 800518a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f008 fc6d 	bl	800da70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a0a      	ldr	r2, [pc, #40]	; (80051c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d90c      	bls.n	80051b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d108      	bne.n	80051b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051b0:	461a      	mov	r2, r3
 80051b2:	2101      	movs	r1, #1
 80051b4:	f006 fba0 	bl	800b8f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	4f54300a 	.word	0x4f54300a

080051c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
 80051d4:	4613      	mov	r3, r2
 80051d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051e6:	883b      	ldrh	r3, [r7, #0]
 80051e8:	0419      	lsls	r1, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
 80051f4:	e028      	b.n	8005248 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4413      	add	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]
 8005208:	e00d      	b.n	8005226 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	3340      	adds	r3, #64	; 0x40
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	3301      	adds	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	7bfa      	ldrb	r2, [r7, #15]
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	3b01      	subs	r3, #1
 800522c:	429a      	cmp	r2, r3
 800522e:	d3ec      	bcc.n	800520a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005230:	883b      	ldrh	r3, [r7, #0]
 8005232:	0418      	lsls	r0, r3, #16
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	3b01      	subs	r3, #1
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	4302      	orrs	r2, r0
 8005240:	3340      	adds	r3, #64	; 0x40
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	887a      	ldrh	r2, [r7, #2]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_PCDEx_ActivateLPM+0x44>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	10000003 	.word	0x10000003

080052c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_PWREx_ConfigSupply+0x70>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d00a      	beq.n	8005302 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052ec:	4b16      	ldr	r3, [pc, #88]	; (8005348 <HAL_PWREx_ConfigSupply+0x70>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d001      	beq.n	80052fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e01f      	b.n	800533e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e01d      	b.n	800533e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005302:	4b11      	ldr	r3, [pc, #68]	; (8005348 <HAL_PWREx_ConfigSupply+0x70>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f023 0207 	bic.w	r2, r3, #7
 800530a:	490f      	ldr	r1, [pc, #60]	; (8005348 <HAL_PWREx_ConfigSupply+0x70>)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4313      	orrs	r3, r2
 8005310:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005312:	f7fb ff89 	bl	8001228 <HAL_GetTick>
 8005316:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005318:	e009      	b.n	800532e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800531a:	f7fb ff85 	bl	8001228 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005328:	d901      	bls.n	800532e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e007      	b.n	800533e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_PWREx_ConfigSupply+0x70>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533a:	d1ee      	bne.n	800531a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	58024800 	.word	0x58024800

0800534c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a04      	ldr	r2, [pc, #16]	; (8005368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800535a:	60d3      	str	r3, [r2, #12]
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	58024800 	.word	0x58024800

0800536c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08c      	sub	sp, #48	; 0x30
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f000 bc1c 	b.w	8005bb8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8087 	beq.w	800549c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800538e:	4b9e      	ldr	r3, [pc, #632]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005398:	4b9b      	ldr	r3, [pc, #620]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d007      	beq.n	80053b4 <HAL_RCC_OscConfig+0x48>
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	2b18      	cmp	r3, #24
 80053a8:	d110      	bne.n	80053cc <HAL_RCC_OscConfig+0x60>
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d10b      	bne.n	80053cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	4b94      	ldr	r3, [pc, #592]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d06c      	beq.n	800549a <HAL_RCC_OscConfig+0x12e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d168      	bne.n	800549a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e3f5      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x78>
 80053d6:	4b8c      	ldr	r3, [pc, #560]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a8b      	ldr	r2, [pc, #556]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e02e      	b.n	8005442 <HAL_RCC_OscConfig+0xd6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10c      	bne.n	8005406 <HAL_RCC_OscConfig+0x9a>
 80053ec:	4b86      	ldr	r3, [pc, #536]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a85      	ldr	r2, [pc, #532]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b83      	ldr	r3, [pc, #524]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a82      	ldr	r2, [pc, #520]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	e01d      	b.n	8005442 <HAL_RCC_OscConfig+0xd6>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800540e:	d10c      	bne.n	800542a <HAL_RCC_OscConfig+0xbe>
 8005410:	4b7d      	ldr	r3, [pc, #500]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a7c      	ldr	r2, [pc, #496]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	4b7a      	ldr	r3, [pc, #488]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a79      	ldr	r2, [pc, #484]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e00b      	b.n	8005442 <HAL_RCC_OscConfig+0xd6>
 800542a:	4b77      	ldr	r3, [pc, #476]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a76      	ldr	r2, [pc, #472]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b74      	ldr	r3, [pc, #464]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a73      	ldr	r2, [pc, #460]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800543c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005440:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d013      	beq.n	8005472 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544a:	f7fb feed 	bl	8001228 <HAL_GetTick>
 800544e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005452:	f7fb fee9 	bl	8001228 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b64      	cmp	r3, #100	; 0x64
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e3a9      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005464:	4b68      	ldr	r3, [pc, #416]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0xe6>
 8005470:	e014      	b.n	800549c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fb fed9 	bl	8001228 <HAL_GetTick>
 8005476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547a:	f7fb fed5 	bl	8001228 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b64      	cmp	r3, #100	; 0x64
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e395      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800548c:	4b5e      	ldr	r3, [pc, #376]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f0      	bne.n	800547a <HAL_RCC_OscConfig+0x10e>
 8005498:	e000      	b.n	800549c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80ca 	beq.w	800563e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054aa:	4b57      	ldr	r3, [pc, #348]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054b4:	4b54      	ldr	r3, [pc, #336]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_RCC_OscConfig+0x164>
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	2b18      	cmp	r3, #24
 80054c4:	d156      	bne.n	8005574 <HAL_RCC_OscConfig+0x208>
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d151      	bne.n	8005574 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d0:	4b4d      	ldr	r3, [pc, #308]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_OscConfig+0x17c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e367      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054e8:	4b47      	ldr	r3, [pc, #284]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 0219 	bic.w	r2, r3, #25
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4944      	ldr	r1, [pc, #272]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054fa:	f7fb fe95 	bl	8001228 <HAL_GetTick>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005502:	f7fb fe91 	bl	8001228 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e351      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005514:	4b3c      	ldr	r3, [pc, #240]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005520:	f7fb feb2 	bl	8001288 <HAL_GetREVID>
 8005524:	4603      	mov	r3, r0
 8005526:	f241 0203 	movw	r2, #4099	; 0x1003
 800552a:	4293      	cmp	r3, r2
 800552c:	d817      	bhi.n	800555e <HAL_RCC_OscConfig+0x1f2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d108      	bne.n	8005548 <HAL_RCC_OscConfig+0x1dc>
 8005536:	4b34      	ldr	r3, [pc, #208]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800553e:	4a32      	ldr	r2, [pc, #200]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005544:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005546:	e07a      	b.n	800563e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005548:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	031b      	lsls	r3, r3, #12
 8005556:	492c      	ldr	r1, [pc, #176]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800555c:	e06f      	b.n	800563e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555e:	4b2a      	ldr	r3, [pc, #168]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	4926      	ldr	r1, [pc, #152]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005572:	e064      	b.n	800563e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d047      	beq.n	800560c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800557c:	4b22      	ldr	r3, [pc, #136]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 0219 	bic.w	r2, r3, #25
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	491f      	ldr	r1, [pc, #124]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558e:	f7fb fe4b 	bl	8001228 <HAL_GetTick>
 8005592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005596:	f7fb fe47 	bl	8001228 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e307      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b4:	f7fb fe68 	bl	8001288 <HAL_GetREVID>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80055be:	4293      	cmp	r3, r2
 80055c0:	d817      	bhi.n	80055f2 <HAL_RCC_OscConfig+0x286>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d108      	bne.n	80055dc <HAL_RCC_OscConfig+0x270>
 80055ca:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055d2:	4a0d      	ldr	r2, [pc, #52]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d8:	6053      	str	r3, [r2, #4]
 80055da:	e030      	b.n	800563e <HAL_RCC_OscConfig+0x2d2>
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	4907      	ldr	r1, [pc, #28]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	604b      	str	r3, [r1, #4]
 80055f0:	e025      	b.n	800563e <HAL_RCC_OscConfig+0x2d2>
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	4901      	ldr	r1, [pc, #4]	; (8005608 <HAL_RCC_OscConfig+0x29c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	604b      	str	r3, [r1, #4]
 8005606:	e01a      	b.n	800563e <HAL_RCC_OscConfig+0x2d2>
 8005608:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800560c:	4b9e      	ldr	r3, [pc, #632]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a9d      	ldr	r2, [pc, #628]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fb fe06 	bl	8001228 <HAL_GetTick>
 800561c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005620:	f7fb fe02 	bl	8001228 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e2c2      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005632:	4b95      	ldr	r3, [pc, #596]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80a9 	beq.w	800579e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564c:	4b8e      	ldr	r3, [pc, #568]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005654:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005656:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b08      	cmp	r3, #8
 8005660:	d007      	beq.n	8005672 <HAL_RCC_OscConfig+0x306>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b18      	cmp	r3, #24
 8005666:	d13a      	bne.n	80056de <HAL_RCC_OscConfig+0x372>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b01      	cmp	r3, #1
 8005670:	d135      	bne.n	80056de <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005672:	4b85      	ldr	r3, [pc, #532]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_RCC_OscConfig+0x31e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e296      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800568a:	f7fb fdfd 	bl	8001288 <HAL_GetREVID>
 800568e:	4603      	mov	r3, r0
 8005690:	f241 0203 	movw	r2, #4099	; 0x1003
 8005694:	4293      	cmp	r3, r2
 8005696:	d817      	bhi.n	80056c8 <HAL_RCC_OscConfig+0x35c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	2b20      	cmp	r3, #32
 800569e:	d108      	bne.n	80056b2 <HAL_RCC_OscConfig+0x346>
 80056a0:	4b79      	ldr	r3, [pc, #484]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056a8:	4a77      	ldr	r2, [pc, #476]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056b0:	e075      	b.n	800579e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056b2:	4b75      	ldr	r3, [pc, #468]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	069b      	lsls	r3, r3, #26
 80056c0:	4971      	ldr	r1, [pc, #452]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056c6:	e06a      	b.n	800579e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056c8:	4b6f      	ldr	r3, [pc, #444]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	496c      	ldr	r1, [pc, #432]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056dc:	e05f      	b.n	800579e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d042      	beq.n	800576c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056e6:	4b68      	ldr	r3, [pc, #416]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a67      	ldr	r2, [pc, #412]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fb fd99 	bl	8001228 <HAL_GetTick>
 80056f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056fa:	f7fb fd95 	bl	8001228 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e255      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800570c:	4b5e      	ldr	r3, [pc, #376]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005718:	f7fb fdb6 	bl	8001288 <HAL_GetREVID>
 800571c:	4603      	mov	r3, r0
 800571e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005722:	4293      	cmp	r3, r2
 8005724:	d817      	bhi.n	8005756 <HAL_RCC_OscConfig+0x3ea>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	2b20      	cmp	r3, #32
 800572c:	d108      	bne.n	8005740 <HAL_RCC_OscConfig+0x3d4>
 800572e:	4b56      	ldr	r3, [pc, #344]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005736:	4a54      	ldr	r2, [pc, #336]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800573c:	6053      	str	r3, [r2, #4]
 800573e:	e02e      	b.n	800579e <HAL_RCC_OscConfig+0x432>
 8005740:	4b51      	ldr	r3, [pc, #324]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	069b      	lsls	r3, r3, #26
 800574e:	494e      	ldr	r1, [pc, #312]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	e023      	b.n	800579e <HAL_RCC_OscConfig+0x432>
 8005756:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	4948      	ldr	r1, [pc, #288]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	60cb      	str	r3, [r1, #12]
 800576a:	e018      	b.n	800579e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800576c:	4b46      	ldr	r3, [pc, #280]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a45      	ldr	r2, [pc, #276]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fb fd56 	bl	8001228 <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005780:	f7fb fd52 	bl	8001228 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e212      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005792:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d036      	beq.n	8005818 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d019      	beq.n	80057e6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b2:	4b35      	ldr	r3, [pc, #212]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80057b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b6:	4a34      	ldr	r2, [pc, #208]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057be:	f7fb fd33 	bl	8001228 <HAL_GetTick>
 80057c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c6:	f7fb fd2f 	bl	8001228 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e1ef      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x45a>
 80057e4:	e018      	b.n	8005818 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e6:	4b28      	ldr	r3, [pc, #160]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80057e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ea:	4a27      	ldr	r2, [pc, #156]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fb fd19 	bl	8001228 <HAL_GetTick>
 80057f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fb fd15 	bl	8001228 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e1d5      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d039      	beq.n	8005898 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800582c:	4b16      	ldr	r3, [pc, #88]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005838:	f7fb fcf6 	bl	8001228 <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005840:	f7fb fcf2 	bl	8001228 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1b2      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x4d4>
 800585e:	e01b      	b.n	8005898 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a08      	ldr	r2, [pc, #32]	; (8005888 <HAL_RCC_OscConfig+0x51c>)
 8005866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800586a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800586c:	f7fb fcdc 	bl	8001228 <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005872:	e00b      	b.n	800588c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005874:	f7fb fcd8 	bl	8001228 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d904      	bls.n	800588c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e198      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800588c:	4ba3      	ldr	r3, [pc, #652]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ed      	bne.n	8005874 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8081 	beq.w	80059a8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058a6:	4b9e      	ldr	r3, [pc, #632]	; (8005b20 <HAL_RCC_OscConfig+0x7b4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a9d      	ldr	r2, [pc, #628]	; (8005b20 <HAL_RCC_OscConfig+0x7b4>)
 80058ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058b2:	f7fb fcb9 	bl	8001228 <HAL_GetTick>
 80058b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058ba:	f7fb fcb5 	bl	8001228 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b64      	cmp	r3, #100	; 0x64
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e175      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058cc:	4b94      	ldr	r3, [pc, #592]	; (8005b20 <HAL_RCC_OscConfig+0x7b4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d106      	bne.n	80058ee <HAL_RCC_OscConfig+0x582>
 80058e0:	4b8e      	ldr	r3, [pc, #568]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	4a8d      	ldr	r2, [pc, #564]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6713      	str	r3, [r2, #112]	; 0x70
 80058ec:	e02d      	b.n	800594a <HAL_RCC_OscConfig+0x5de>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x5a4>
 80058f6:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a88      	ldr	r2, [pc, #544]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	6713      	str	r3, [r2, #112]	; 0x70
 8005902:	4b86      	ldr	r3, [pc, #536]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a85      	ldr	r2, [pc, #532]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	6713      	str	r3, [r2, #112]	; 0x70
 800590e:	e01c      	b.n	800594a <HAL_RCC_OscConfig+0x5de>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b05      	cmp	r3, #5
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0x5c6>
 8005918:	4b80      	ldr	r3, [pc, #512]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	4a7f      	ldr	r2, [pc, #508]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	6713      	str	r3, [r2, #112]	; 0x70
 8005924:	4b7d      	ldr	r3, [pc, #500]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	4a7c      	ldr	r2, [pc, #496]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	6713      	str	r3, [r2, #112]	; 0x70
 8005930:	e00b      	b.n	800594a <HAL_RCC_OscConfig+0x5de>
 8005932:	4b7a      	ldr	r3, [pc, #488]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a79      	ldr	r2, [pc, #484]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
 800593e:	4b77      	ldr	r3, [pc, #476]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	4a76      	ldr	r2, [pc, #472]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d015      	beq.n	800597e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005952:	f7fb fc69 	bl	8001228 <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005958:	e00a      	b.n	8005970 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fb fc65 	bl	8001228 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e123      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005970:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ee      	beq.n	800595a <HAL_RCC_OscConfig+0x5ee>
 800597c:	e014      	b.n	80059a8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597e:	f7fb fc53 	bl	8001228 <HAL_GetTick>
 8005982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005984:	e00a      	b.n	800599c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fb fc4f 	bl	8001228 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e10d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800599c:	4b5f      	ldr	r3, [pc, #380]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ee      	bne.n	8005986 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8102 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059b2:	4b5a      	ldr	r3, [pc, #360]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ba:	2b18      	cmp	r3, #24
 80059bc:	f000 80bd 	beq.w	8005b3a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 8095 	bne.w	8005af4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ca:	4b54      	ldr	r3, [pc, #336]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a53      	ldr	r2, [pc, #332]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80059d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d6:	f7fb fc27 	bl	8001228 <HAL_GetTick>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059de:	f7fb fc23 	bl	8001228 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e0e3      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059f0:	4b4a      	ldr	r3, [pc, #296]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059fc:	4b47      	ldr	r3, [pc, #284]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 80059fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a00:	4b48      	ldr	r3, [pc, #288]	; (8005b24 <HAL_RCC_OscConfig+0x7b8>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a0c:	0112      	lsls	r2, r2, #4
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	4942      	ldr	r1, [pc, #264]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	628b      	str	r3, [r1, #40]	; 0x28
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	3b01      	subs	r3, #1
 8005a26:	025b      	lsls	r3, r3, #9
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	3b01      	subs	r3, #1
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	061b      	lsls	r3, r3, #24
 8005a42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a46:	4935      	ldr	r1, [pc, #212]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a4c:	4b33      	ldr	r3, [pc, #204]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4a32      	ldr	r2, [pc, #200]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a58:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a5c:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <HAL_RCC_OscConfig+0x7bc>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a64:	00d2      	lsls	r2, r2, #3
 8005a66:	492d      	ldr	r1, [pc, #180]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	f023 020c 	bic.w	r2, r3, #12
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	4928      	ldr	r1, [pc, #160]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a7e:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	f023 0202 	bic.w	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	4924      	ldr	r1, [pc, #144]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a90:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a21      	ldr	r2, [pc, #132]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9c:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005aa8:	4b1c      	ldr	r3, [pc, #112]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005ab4:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac0:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fb fbac 	bl	8001228 <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad4:	f7fb fba8 	bl	8001228 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e068      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f0      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x768>
 8005af2:	e060      	b.n	8005bb6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <HAL_RCC_OscConfig+0x7b0>)
 8005afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fb fb92 	bl	8001228 <HAL_GetTick>
 8005b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b06:	e011      	b.n	8005b2c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b08:	f7fb fb8e 	bl	8001228 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d90a      	bls.n	8005b2c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e04e      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
 8005b1a:	bf00      	nop
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	58024800 	.word	0x58024800
 8005b24:	fffffc0c 	.word	0xfffffc0c
 8005b28:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <HAL_RCC_OscConfig+0x854>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e7      	bne.n	8005b08 <HAL_RCC_OscConfig+0x79c>
 8005b38:	e03d      	b.n	8005bb6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b3a:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <HAL_RCC_OscConfig+0x854>)
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b40:	4b1f      	ldr	r3, [pc, #124]	; (8005bc0 <HAL_RCC_OscConfig+0x854>)
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d031      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f003 0203 	and.w	r2, r3, #3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d12a      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d122      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d11a      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	0a5b      	lsrs	r3, r3, #9
 8005b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d111      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d108      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	0e1b      	lsrs	r3, r3, #24
 8005ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d001      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3730      	adds	r7, #48	; 0x30
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	58024400 	.word	0x58024400

08005bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e19c      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b8a      	ldr	r3, [pc, #552]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d910      	bls.n	8005c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b87      	ldr	r3, [pc, #540]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 020f 	bic.w	r2, r3, #15
 8005bee:	4985      	ldr	r1, [pc, #532]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b83      	ldr	r3, [pc, #524]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e184      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	4b7b      	ldr	r3, [pc, #492]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d908      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c24:	4b78      	ldr	r3, [pc, #480]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	4975      	ldr	r1, [pc, #468]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	4b70      	ldr	r3, [pc, #448]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d908      	bls.n	8005c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c52:	4b6d      	ldr	r3, [pc, #436]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	496a      	ldr	r1, [pc, #424]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d010      	beq.n	8005c92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	4b64      	ldr	r3, [pc, #400]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d908      	bls.n	8005c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c80:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	495e      	ldr	r1, [pc, #376]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d010      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	4b59      	ldr	r3, [pc, #356]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d908      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cae:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	4953      	ldr	r1, [pc, #332]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	4b4d      	ldr	r3, [pc, #308]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d908      	bls.n	8005cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cdc:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f023 020f 	bic.w	r2, r3, #15
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4947      	ldr	r1, [pc, #284]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d055      	beq.n	8005da6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cfa:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4940      	ldr	r1, [pc, #256]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d107      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d14:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d121      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0f6      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d107      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d115      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0ea      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d44:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0de      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d54:	4b2c      	ldr	r3, [pc, #176]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0d6      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d64:	4b28      	ldr	r3, [pc, #160]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f023 0207 	bic.w	r2, r3, #7
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4925      	ldr	r1, [pc, #148]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d76:	f7fb fa57 	bl	8001228 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d7e:	f7fb fa53 	bl	8001228 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0be      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d94:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d1eb      	bne.n	8005d7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d010      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d208      	bcs.n	8005dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f023 020f 	bic.w	r2, r3, #15
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	490e      	ldr	r1, [pc, #56]	; (8005e08 <HAL_RCC_ClockConfig+0x244>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d214      	bcs.n	8005e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de2:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 020f 	bic.w	r2, r3, #15
 8005dea:	4906      	ldr	r1, [pc, #24]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <HAL_RCC_ClockConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d005      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e086      	b.n	8005f12 <HAL_RCC_ClockConfig+0x34e>
 8005e04:	52002000 	.word	0x52002000
 8005e08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d208      	bcs.n	8005e3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e28:	4b3c      	ldr	r3, [pc, #240]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	4939      	ldr	r1, [pc, #228]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d010      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	4b34      	ldr	r3, [pc, #208]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d208      	bcs.n	8005e68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e56:	4b31      	ldr	r3, [pc, #196]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	492e      	ldr	r1, [pc, #184]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d208      	bcs.n	8005e96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e84:	4b25      	ldr	r3, [pc, #148]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	4922      	ldr	r1, [pc, #136]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d010      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69da      	ldr	r2, [r3, #28]
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d208      	bcs.n	8005ec4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005eb2:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	4917      	ldr	r1, [pc, #92]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ec4:	f000 f834 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	4912      	ldr	r1, [pc, #72]	; (8005f20 <HAL_RCC_ClockConfig+0x35c>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <HAL_RCC_ClockConfig+0x358>)
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <HAL_RCC_ClockConfig+0x35c>)
 8005eec:	5cd3      	ldrb	r3, [r2, r3]
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef8:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <HAL_RCC_ClockConfig+0x360>)
 8005efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005efc:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <HAL_RCC_ClockConfig+0x364>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f02:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <HAL_RCC_ClockConfig+0x368>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fb f944 	bl	8001194 <HAL_InitTick>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	0800e0cc 	.word	0x0800e0cc
 8005f24:	24000004 	.word	0x24000004
 8005f28:	24000000 	.word	0x24000000
 8005f2c:	24000008 	.word	0x24000008

08005f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f36:	4bb3      	ldr	r3, [pc, #716]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f3e:	2b18      	cmp	r3, #24
 8005f40:	f200 8155 	bhi.w	80061ee <HAL_RCC_GetSysClockFreq+0x2be>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	080061ef 	.word	0x080061ef
 8005f54:	080061ef 	.word	0x080061ef
 8005f58:	080061ef 	.word	0x080061ef
 8005f5c:	080061ef 	.word	0x080061ef
 8005f60:	080061ef 	.word	0x080061ef
 8005f64:	080061ef 	.word	0x080061ef
 8005f68:	080061ef 	.word	0x080061ef
 8005f6c:	08005fd7 	.word	0x08005fd7
 8005f70:	080061ef 	.word	0x080061ef
 8005f74:	080061ef 	.word	0x080061ef
 8005f78:	080061ef 	.word	0x080061ef
 8005f7c:	080061ef 	.word	0x080061ef
 8005f80:	080061ef 	.word	0x080061ef
 8005f84:	080061ef 	.word	0x080061ef
 8005f88:	080061ef 	.word	0x080061ef
 8005f8c:	08005fdd 	.word	0x08005fdd
 8005f90:	080061ef 	.word	0x080061ef
 8005f94:	080061ef 	.word	0x080061ef
 8005f98:	080061ef 	.word	0x080061ef
 8005f9c:	080061ef 	.word	0x080061ef
 8005fa0:	080061ef 	.word	0x080061ef
 8005fa4:	080061ef 	.word	0x080061ef
 8005fa8:	080061ef 	.word	0x080061ef
 8005fac:	08005fe3 	.word	0x08005fe3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fb0:	4b94      	ldr	r3, [pc, #592]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fbc:	4b91      	ldr	r3, [pc, #580]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	08db      	lsrs	r3, r3, #3
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	4a90      	ldr	r2, [pc, #576]	; (8006208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fce:	e111      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fd0:	4b8d      	ldr	r3, [pc, #564]	; (8006208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fd2:	61bb      	str	r3, [r7, #24]
    break;
 8005fd4:	e10e      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fd6:	4b8d      	ldr	r3, [pc, #564]	; (800620c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fd8:	61bb      	str	r3, [r7, #24]
    break;
 8005fda:	e10b      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fdc:	4b8c      	ldr	r3, [pc, #560]	; (8006210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005fde:	61bb      	str	r3, [r7, #24]
    break;
 8005fe0:	e108      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe2:	4b88      	ldr	r3, [pc, #544]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fec:	4b85      	ldr	r3, [pc, #532]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ff8:	4b82      	ldr	r3, [pc, #520]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006002:	4b80      	ldr	r3, [pc, #512]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80e1 	beq.w	80061e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b02      	cmp	r3, #2
 800602a:	f000 8083 	beq.w	8006134 <HAL_RCC_GetSysClockFreq+0x204>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b02      	cmp	r3, #2
 8006032:	f200 80a1 	bhi.w	8006178 <HAL_RCC_GetSysClockFreq+0x248>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_RCC_GetSysClockFreq+0x114>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d056      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006042:	e099      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006044:	4b6f      	ldr	r3, [pc, #444]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d02d      	beq.n	80060ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006050:	4b6c      	ldr	r3, [pc, #432]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	08db      	lsrs	r3, r3, #3
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	4a6b      	ldr	r2, [pc, #428]	; (8006208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	4b62      	ldr	r3, [pc, #392]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608a:	ed97 6a02 	vldr	s12, [r7, #8]
 800608e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80060aa:	e087      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80060ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060be:	4b51      	ldr	r3, [pc, #324]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ee:	e065      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800621c <HAL_RCC_GetSysClockFreq+0x2ec>
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006102:	4b40      	ldr	r3, [pc, #256]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006112:	ed97 6a02 	vldr	s12, [r7, #8]
 8006116:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800611a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006132:	e043      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006146:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	ed97 6a02 	vldr	s12, [r7, #8]
 800615a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800615e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006176:	e021      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	eddf 6a26 	vldr	s13, [pc, #152]	; 800621c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618a:	4b1e      	ldr	r3, [pc, #120]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619a:	ed97 6a02 	vldr	s12, [r7, #8]
 800619e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061bc:	4b11      	ldr	r3, [pc, #68]	; (8006204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	0a5b      	lsrs	r3, r3, #9
 80061c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c6:	3301      	adds	r3, #1
 80061c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e0:	ee17 3a90 	vmov	r3, s15
 80061e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061e6:	e005      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61bb      	str	r3, [r7, #24]
    break;
 80061ec:	e002      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80061ee:	4b07      	ldr	r3, [pc, #28]	; (800620c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061f0:	61bb      	str	r3, [r7, #24]
    break;
 80061f2:	bf00      	nop
  }

  return sysclockfreq;
 80061f4:	69bb      	ldr	r3, [r7, #24]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3724      	adds	r7, #36	; 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	58024400 	.word	0x58024400
 8006208:	03d09000 	.word	0x03d09000
 800620c:	003d0900 	.word	0x003d0900
 8006210:	007a1200 	.word	0x007a1200
 8006214:	46000000 	.word	0x46000000
 8006218:	4c742400 	.word	0x4c742400
 800621c:	4a742400 	.word	0x4a742400
 8006220:	4af42400 	.word	0x4af42400

08006224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800622a:	f7ff fe81 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 800622e:	4602      	mov	r2, r0
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <HAL_RCC_GetHCLKFreq+0x50>)
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	490f      	ldr	r1, [pc, #60]	; (8006278 <HAL_RCC_GetHCLKFreq+0x54>)
 800623c:	5ccb      	ldrb	r3, [r1, r3]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	fa22 f303 	lsr.w	r3, r2, r3
 8006246:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <HAL_RCC_GetHCLKFreq+0x50>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	4a09      	ldr	r2, [pc, #36]	; (8006278 <HAL_RCC_GetHCLKFreq+0x54>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	fa22 f303 	lsr.w	r3, r2, r3
 800625e:	4a07      	ldr	r2, [pc, #28]	; (800627c <HAL_RCC_GetHCLKFreq+0x58>)
 8006260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006262:	4a07      	ldr	r2, [pc, #28]	; (8006280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <HAL_RCC_GetHCLKFreq+0x58>)
 800626a:	681b      	ldr	r3, [r3, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	58024400 	.word	0x58024400
 8006278:	0800e0cc 	.word	0x0800e0cc
 800627c:	24000004 	.word	0x24000004
 8006280:	24000000 	.word	0x24000000

08006284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006288:	f7ff ffcc 	bl	8006224 <HAL_RCC_GetHCLKFreq>
 800628c:	4602      	mov	r2, r0
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	4904      	ldr	r1, [pc, #16]	; (80062ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800629a:	5ccb      	ldrb	r3, [r1, r3]
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	58024400 	.word	0x58024400
 80062ac:	0800e0cc 	.word	0x0800e0cc

080062b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062b4:	f7ff ffb6 	bl	8006224 <HAL_RCC_GetHCLKFreq>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	4904      	ldr	r1, [pc, #16]	; (80062d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062c6:	5ccb      	ldrb	r3, [r1, r3]
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	58024400 	.word	0x58024400
 80062d8:	0800e0cc 	.word	0x0800e0cc

080062dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062e4:	2300      	movs	r3, #0
 80062e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062e8:	2300      	movs	r3, #0
 80062ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d03f      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006300:	d02a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006306:	d824      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800630c:	d018      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800630e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006312:	d81e      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631c:	d007      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800631e:	e018      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006320:	4bab      	ldr	r3, [pc, #684]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4aaa      	ldr	r2, [pc, #680]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800632c:	e015      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3304      	adds	r3, #4
 8006332:	2102      	movs	r1, #2
 8006334:	4618      	mov	r0, r3
 8006336:	f001 f9cf 	bl	80076d8 <RCCEx_PLL2_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800633e:	e00c      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3324      	adds	r3, #36	; 0x24
 8006344:	2102      	movs	r1, #2
 8006346:	4618      	mov	r0, r3
 8006348:	f001 fa78 	bl	800783c <RCCEx_PLL3_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	e000      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d109      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006360:	4b9b      	ldr	r3, [pc, #620]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636c:	4998      	ldr	r1, [pc, #608]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800636e:	4313      	orrs	r3, r2
 8006370:	650b      	str	r3, [r1, #80]	; 0x50
 8006372:	e001      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d03d      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	2b04      	cmp	r3, #4
 800638a:	d826      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063a9 	.word	0x080063a9
 8006398:	080063b7 	.word	0x080063b7
 800639c:	080063c9 	.word	0x080063c9
 80063a0:	080063e1 	.word	0x080063e1
 80063a4:	080063e1 	.word	0x080063e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a8:	4b89      	ldr	r3, [pc, #548]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a88      	ldr	r2, [pc, #544]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b4:	e015      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3304      	adds	r3, #4
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f98b 	bl	80076d8 <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c6:	e00c      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 fa34 	bl	800783c <RCCEx_PLL3_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
      break;
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80063e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063e8:	4b79      	ldr	r3, [pc, #484]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	f023 0207 	bic.w	r2, r3, #7
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	4976      	ldr	r1, [pc, #472]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	650b      	str	r3, [r1, #80]	; 0x50
 80063fa:	e001      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006408:	2b00      	cmp	r3, #0
 800640a:	d042      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006414:	d02b      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641a:	d825      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800641c:	2bc0      	cmp	r3, #192	; 0xc0
 800641e:	d028      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006420:	2bc0      	cmp	r3, #192	; 0xc0
 8006422:	d821      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d016      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d81d      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d007      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006434:	e018      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006436:	4b66      	ldr	r3, [pc, #408]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a65      	ldr	r2, [pc, #404]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800643c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006442:	e017      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f001 f944 	bl	80076d8 <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006454:	e00e      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f001 f9ed 	bl	800783c <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006466:	e005      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	75fb      	strb	r3, [r7, #23]
      break;
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800647a:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	4952      	ldr	r1, [pc, #328]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006488:	4313      	orrs	r3, r2
 800648a:	650b      	str	r3, [r1, #80]	; 0x50
 800648c:	e001      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649a:	2b00      	cmp	r3, #0
 800649c:	d049      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a8:	d030      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80064aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ae:	d82a      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064b4:	d02c      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80064b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064ba:	d824      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c0:	d018      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80064c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c6:	d81e      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80064cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064d0:	d007      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064d2:	e018      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d4:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	4a3d      	ldr	r2, [pc, #244]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064e0:	e017      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2100      	movs	r1, #0
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 f8f5 	bl	80076d8 <RCCEx_PLL2_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064f2:	e00e      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3324      	adds	r3, #36	; 0x24
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f99e 	bl	800783c <RCCEx_PLL3_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006504:	e005      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	75fb      	strb	r3, [r7, #23]
      break;
 800650a:	e002      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800650c:	bf00      	nop
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800651a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006526:	492a      	ldr	r1, [pc, #168]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	658b      	str	r3, [r1, #88]	; 0x58
 800652c:	e001      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04c      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006548:	d030      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800654a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800654e:	d82a      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006550:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006554:	d02c      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800655a:	d824      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800655c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006560:	d018      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006566:	d81e      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800656c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006570:	d007      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006572:	e018      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006574:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800657a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006580:	e017      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3304      	adds	r3, #4
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f001 f8a5 	bl	80076d8 <RCCEx_PLL2_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006592:	e00e      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3324      	adds	r3, #36	; 0x24
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f94e 	bl	800783c <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065a4:	e005      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
      break;
 80065aa:	e002      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80065ac:	bf00      	nop
 80065ae:	e000      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80065b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10d      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065c6:	4902      	ldr	r1, [pc, #8]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	658b      	str	r3, [r1, #88]	; 0x58
 80065cc:	e004      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80065ce:	bf00      	nop
 80065d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d032      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e8:	2b30      	cmp	r3, #48	; 0x30
 80065ea:	d01c      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d817      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d00c      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d813      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d10f      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006600:	4baf      	ldr	r3, [pc, #700]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4aae      	ldr	r2, [pc, #696]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800660c:	e00e      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	2102      	movs	r1, #2
 8006614:	4618      	mov	r0, r3
 8006616:	f001 f85f 	bl	80076d8 <RCCEx_PLL2_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800661e:	e005      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	75fb      	strb	r3, [r7, #23]
      break;
 8006624:	e002      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800662a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006632:	4ba3      	ldr	r3, [pc, #652]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	49a0      	ldr	r1, [pc, #640]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006640:	4313      	orrs	r3, r2
 8006642:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006644:	e001      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d047      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800665e:	d030      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006664:	d82a      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800666a:	d02c      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800666c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006670:	d824      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006676:	d018      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667c:	d81e      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006686:	d007      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006688:	e018      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668a:	4b8d      	ldr	r3, [pc, #564]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	4a8c      	ldr	r2, [pc, #560]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006696:	e017      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 f81a 	bl	80076d8 <RCCEx_PLL2_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066a8:	e00e      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3324      	adds	r3, #36	; 0x24
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 f8c3 	bl	800783c <RCCEx_PLL3_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066ba:	e005      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]
      break;
 80066c0:	e002      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066c2:	bf00      	nop
 80066c4:	e000      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80066c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d109      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066ce:	4b7c      	ldr	r3, [pc, #496]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066da:	4979      	ldr	r1, [pc, #484]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	650b      	str	r3, [r1, #80]	; 0x50
 80066e0:	e001      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d049      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066fa:	d02e      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80066fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006700:	d828      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006706:	d02a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800670c:	d822      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800670e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006712:	d026      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006714:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006718:	d81c      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800671a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800671e:	d010      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006724:	d816      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01d      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800672a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672e:	d111      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	2101      	movs	r1, #1
 8006736:	4618      	mov	r0, r3
 8006738:	f000 ffce 	bl	80076d8 <RCCEx_PLL2_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006740:	e012      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3324      	adds	r3, #36	; 0x24
 8006746:	2101      	movs	r1, #1
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f877 	bl	800783c <RCCEx_PLL3_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006752:	e009      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]
      break;
 8006758:	e006      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800675a:	bf00      	nop
 800675c:	e004      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800676e:	4b54      	ldr	r3, [pc, #336]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006772:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800677a:	4951      	ldr	r1, [pc, #324]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800677c:	4313      	orrs	r3, r2
 800677e:	650b      	str	r3, [r1, #80]	; 0x50
 8006780:	e001      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d04b      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800679c:	d02e      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800679e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067a2:	d828      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d02a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80067aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ae:	d822      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067b4:	d026      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80067b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067ba:	d81c      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c0:	d010      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80067c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c6:	d816      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01d      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80067cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067d0:	d111      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	2101      	movs	r1, #1
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 ff7d 	bl	80076d8 <RCCEx_PLL2_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067e2:	e012      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	2101      	movs	r1, #1
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 f826 	bl	800783c <RCCEx_PLL3_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067f4:	e009      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
      break;
 80067fa:	e006      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80067fc:	bf00      	nop
 80067fe:	e004      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006800:	bf00      	nop
 8006802:	e002      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006804:	bf00      	nop
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006810:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006814:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800681e:	4928      	ldr	r1, [pc, #160]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006820:	4313      	orrs	r3, r2
 8006822:	658b      	str	r3, [r1, #88]	; 0x58
 8006824:	e001      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d02f      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683e:	d00e      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006844:	d814      	bhi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006846:	2b00      	cmp	r3, #0
 8006848:	d015      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800684a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800684e:	d10f      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800685c:	e00c      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3304      	adds	r3, #4
 8006862:	2101      	movs	r1, #1
 8006864:	4618      	mov	r0, r3
 8006866:	f000 ff37 	bl	80076d8 <RCCEx_PLL2_Config>
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
      break;
 8006874:	e000      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006882:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688a:	490d      	ldr	r1, [pc, #52]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800688c:	4313      	orrs	r3, r2
 800688e:	650b      	str	r3, [r1, #80]	; 0x50
 8006890:	e001      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d033      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d81c      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068eb 	.word	0x080068eb
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	080068d3 	.word	0x080068d3
 80068bc:	080068eb 	.word	0x080068eb
 80068c0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c4:	4bb8      	ldr	r3, [pc, #736]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	4ab7      	ldr	r2, [pc, #732]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068d0:	e00c      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	2102      	movs	r1, #2
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fefd 	bl	80076d8 <RCCEx_PLL2_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068e2:	e003      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
      break;
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80068ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068f2:	4bad      	ldr	r3, [pc, #692]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f6:	f023 0203 	bic.w	r2, r3, #3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	49aa      	ldr	r1, [pc, #680]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006900:	4313      	orrs	r3, r2
 8006902:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006904:	e001      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8086 	beq.w	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006918:	4ba4      	ldr	r3, [pc, #656]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4aa3      	ldr	r2, [pc, #652]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800691e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006924:	f7fa fc80 	bl	8001228 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800692a:	e009      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800692c:	f7fa fc7c 	bl	8001228 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	; 0x64
 8006938:	d902      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	75fb      	strb	r3, [r7, #23]
        break;
 800693e:	e005      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006940:	4b9a      	ldr	r3, [pc, #616]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ef      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d166      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006952:	4b95      	ldr	r3, [pc, #596]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006954:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800695c:	4053      	eors	r3, r2
 800695e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006962:	2b00      	cmp	r3, #0
 8006964:	d013      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006966:	4b90      	ldr	r3, [pc, #576]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006970:	4b8d      	ldr	r3, [pc, #564]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a8c      	ldr	r2, [pc, #560]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800697c:	4b8a      	ldr	r3, [pc, #552]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a89      	ldr	r2, [pc, #548]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006988:	4a87      	ldr	r2, [pc, #540]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006998:	d115      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fa fc45 	bl	8001228 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a0:	e00b      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fa fc41 	bl	8001228 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d902      	bls.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	75fb      	strb	r3, [r7, #23]
            break;
 80069b8:	e005      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069ba:	4b7b      	ldr	r3, [pc, #492]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0ed      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d126      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069da:	d10d      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80069dc:	4b72      	ldr	r3, [pc, #456]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ea:	0919      	lsrs	r1, r3, #4
 80069ec:	4b70      	ldr	r3, [pc, #448]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80069ee:	400b      	ands	r3, r1
 80069f0:	496d      	ldr	r1, [pc, #436]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	610b      	str	r3, [r1, #16]
 80069f6:	e005      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80069f8:	4b6b      	ldr	r3, [pc, #428]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	4a6a      	ldr	r2, [pc, #424]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a02:	6113      	str	r3, [r2, #16]
 8006a04:	4b68      	ldr	r3, [pc, #416]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a12:	4965      	ldr	r1, [pc, #404]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	670b      	str	r3, [r1, #112]	; 0x70
 8006a18:	e004      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	75bb      	strb	r3, [r7, #22]
 8006a1e:	e001      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d07e      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a34:	2b28      	cmp	r3, #40	; 0x28
 8006a36:	d867      	bhi.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006b0f 	.word	0x08006b0f
 8006a44:	08006b09 	.word	0x08006b09
 8006a48:	08006b09 	.word	0x08006b09
 8006a4c:	08006b09 	.word	0x08006b09
 8006a50:	08006b09 	.word	0x08006b09
 8006a54:	08006b09 	.word	0x08006b09
 8006a58:	08006b09 	.word	0x08006b09
 8006a5c:	08006b09 	.word	0x08006b09
 8006a60:	08006ae5 	.word	0x08006ae5
 8006a64:	08006b09 	.word	0x08006b09
 8006a68:	08006b09 	.word	0x08006b09
 8006a6c:	08006b09 	.word	0x08006b09
 8006a70:	08006b09 	.word	0x08006b09
 8006a74:	08006b09 	.word	0x08006b09
 8006a78:	08006b09 	.word	0x08006b09
 8006a7c:	08006b09 	.word	0x08006b09
 8006a80:	08006af7 	.word	0x08006af7
 8006a84:	08006b09 	.word	0x08006b09
 8006a88:	08006b09 	.word	0x08006b09
 8006a8c:	08006b09 	.word	0x08006b09
 8006a90:	08006b09 	.word	0x08006b09
 8006a94:	08006b09 	.word	0x08006b09
 8006a98:	08006b09 	.word	0x08006b09
 8006a9c:	08006b09 	.word	0x08006b09
 8006aa0:	08006b0f 	.word	0x08006b0f
 8006aa4:	08006b09 	.word	0x08006b09
 8006aa8:	08006b09 	.word	0x08006b09
 8006aac:	08006b09 	.word	0x08006b09
 8006ab0:	08006b09 	.word	0x08006b09
 8006ab4:	08006b09 	.word	0x08006b09
 8006ab8:	08006b09 	.word	0x08006b09
 8006abc:	08006b09 	.word	0x08006b09
 8006ac0:	08006b0f 	.word	0x08006b0f
 8006ac4:	08006b09 	.word	0x08006b09
 8006ac8:	08006b09 	.word	0x08006b09
 8006acc:	08006b09 	.word	0x08006b09
 8006ad0:	08006b09 	.word	0x08006b09
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006b09 	.word	0x08006b09
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	08006b0f 	.word	0x08006b0f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fdf4 	bl	80076d8 <RCCEx_PLL2_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006af4:	e00c      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3324      	adds	r3, #36	; 0x24
 8006afa:	2101      	movs	r1, #1
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fe9d 	bl	800783c <RCCEx_PLL3_Config>
 8006b02:	4603      	mov	r3, r0
 8006b04:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b06:	e003      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b0c:	e000      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b16:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b22:	4921      	ldr	r1, [pc, #132]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	654b      	str	r3, [r1, #84]	; 0x54
 8006b28:	e001      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d03e      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d820      	bhi.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b8b 	.word	0x08006b8b
 8006b4c:	08006b61 	.word	0x08006b61
 8006b50:	08006b73 	.word	0x08006b73
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006b8b 	.word	0x08006b8b
 8006b5c:	08006b8b 	.word	0x08006b8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fdb6 	bl	80076d8 <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b70:	e00c      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3324      	adds	r3, #36	; 0x24
 8006b76:	2101      	movs	r1, #1
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fe5f 	bl	800783c <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]
      break;
 8006b88:	e000      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d110      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f023 0207 	bic.w	r2, r3, #7
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9e:	4902      	ldr	r1, [pc, #8]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	654b      	str	r3, [r1, #84]	; 0x54
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006ba6:	bf00      	nop
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	58024800 	.word	0x58024800
 8006bb0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d039      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d820      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c17 	.word	0x08006c17
 8006bd8:	08006bed 	.word	0x08006bed
 8006bdc:	08006bff 	.word	0x08006bff
 8006be0:	08006c17 	.word	0x08006c17
 8006be4:	08006c17 	.word	0x08006c17
 8006be8:	08006c17 	.word	0x08006c17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fd70 	bl	80076d8 <RCCEx_PLL2_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bfc:	e00c      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3324      	adds	r3, #36	; 0x24
 8006c02:	2101      	movs	r1, #1
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fe19 	bl	800783c <RCCEx_PLL3_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c0e:	e003      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c1e:	4bb7      	ldr	r3, [pc, #732]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c22:	f023 0207 	bic.w	r2, r3, #7
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2c:	49b3      	ldr	r1, [pc, #716]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	658b      	str	r3, [r1, #88]	; 0x58
 8006c32:	e001      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d04b      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c4e:	d02e      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c54:	d828      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5a:	d02a      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c60:	d822      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c66:	d026      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c6c:	d81c      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c72:	d010      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c78:	d816      	bhi.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01d      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c82:	d111      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fd24 	bl	80076d8 <RCCEx_PLL2_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c94:	e012      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3324      	adds	r3, #36	; 0x24
 8006c9a:	2102      	movs	r1, #2
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fdcd 	bl	800783c <RCCEx_PLL3_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ca6:	e009      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cac:	e006      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e004      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e002      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006cb6:	bf00      	nop
 8006cb8:	e000      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cc2:	4b8e      	ldr	r3, [pc, #568]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd0:	498a      	ldr	r1, [pc, #552]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	654b      	str	r3, [r1, #84]	; 0x54
 8006cd6:	e001      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d04b      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cf2:	d02e      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006cf4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cf8:	d828      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfe:	d02a      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d04:	d822      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d0a:	d026      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d10:	d81c      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d16:	d010      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1c:	d816      	bhi.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d01d      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d26:	d111      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fcd2 	bl	80076d8 <RCCEx_PLL2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d38:	e012      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3324      	adds	r3, #36	; 0x24
 8006d3e:	2102      	movs	r1, #2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fd7b 	bl	800783c <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d4a:	e009      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d50:	e006      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d52:	bf00      	nop
 8006d54:	e004      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d56:	bf00      	nop
 8006d58:	e002      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d66:	4b65      	ldr	r3, [pc, #404]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d74:	4961      	ldr	r1, [pc, #388]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	658b      	str	r3, [r1, #88]	; 0x58
 8006d7a:	e001      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d04b      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d96:	d02e      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006d98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d9c:	d828      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da2:	d02a      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da8:	d822      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006daa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006dae:	d026      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006db0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006db4:	d81c      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dba:	d010      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc0:	d816      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01d      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dca:	d111      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fc80 	bl	80076d8 <RCCEx_PLL2_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ddc:	e012      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3324      	adds	r3, #36	; 0x24
 8006de2:	2102      	movs	r1, #2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fd29 	bl	800783c <RCCEx_PLL3_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dee:	e009      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	75fb      	strb	r3, [r7, #23]
      break;
 8006df4:	e006      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006df6:	bf00      	nop
 8006df8:	e004      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006dfa:	bf00      	nop
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006dfe:	bf00      	nop
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e0a:	4b3c      	ldr	r3, [pc, #240]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e18:	4938      	ldr	r1, [pc, #224]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e1e:	e001      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3a:	d10a      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3324      	adds	r3, #36	; 0x24
 8006e40:	2102      	movs	r1, #2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fcfa 	bl	800783c <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e52:	4b2a      	ldr	r3, [pc, #168]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e60:	4926      	ldr	r1, [pc, #152]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0310 	and.w	r3, r3, #16
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01a      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7c:	d10a      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3324      	adds	r3, #36	; 0x24
 8006e82:	2102      	movs	r1, #2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fcd9 	bl	800783c <RCCEx_PLL3_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e94:	4b19      	ldr	r3, [pc, #100]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea2:	4916      	ldr	r1, [pc, #88]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d036      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ebe:	d01f      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ec4:	d817      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ece:	d009      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006ed0:	e011      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fbfd 	bl	80076d8 <RCCEx_PLL2_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ee2:	e00e      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3324      	adds	r3, #36	; 0x24
 8006ee8:	2102      	movs	r1, #2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fca6 	bl	800783c <RCCEx_PLL3_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ef4:	e005      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8006efa:	e002      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006efc:	58024400 	.word	0x58024400
      break;
 8006f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f08:	4b93      	ldr	r3, [pc, #588]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f16:	4990      	ldr	r1, [pc, #576]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f1c:	e001      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d033      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f38:	d01c      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006f3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f3e:	d816      	bhi.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f44:	d003      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f4a:	d007      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006f4c:	e00f      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f4e:	4b82      	ldr	r3, [pc, #520]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	4a81      	ldr	r2, [pc, #516]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f5a:	e00c      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fc6a 	bl	800783c <RCCEx_PLL3_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f6c:	e003      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
      break;
 8006f72:	e000      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f7c:	4b76      	ldr	r3, [pc, #472]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8a:	4973      	ldr	r1, [pc, #460]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f90:	e001      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d029      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fae:	d007      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006fb0:	e00f      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb2:	4b69      	ldr	r3, [pc, #420]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	4a68      	ldr	r2, [pc, #416]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fbe:	e00b      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fb86 	bl	80076d8 <RCCEx_PLL2_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fde:	4b5e      	ldr	r3, [pc, #376]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fea:	495b      	ldr	r1, [pc, #364]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ff0:	e001      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3324      	adds	r3, #36	; 0x24
 8007006:	2102      	movs	r1, #2
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fc17 	bl	800783c <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d030      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800702c:	d017      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800702e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007032:	d811      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007038:	d013      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800703a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800703e:	d80b      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d010      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007048:	d106      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800704a:	4b43      	ldr	r3, [pc, #268]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	4a42      	ldr	r2, [pc, #264]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007056:	e007      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	75fb      	strb	r3, [r7, #23]
      break;
 800705c:	e004      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800705e:	bf00      	nop
 8007060:	e002      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800706e:	4b3a      	ldr	r3, [pc, #232]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800707a:	4937      	ldr	r1, [pc, #220]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800707c:	4313      	orrs	r3, r2
 800707e:	654b      	str	r3, [r1, #84]	; 0x54
 8007080:	e001      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007092:	4b31      	ldr	r3, [pc, #196]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007096:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	492e      	ldr	r1, [pc, #184]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070b0:	4b29      	ldr	r3, [pc, #164]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070be:	4926      	ldr	r1, [pc, #152]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070d0:	4b21      	ldr	r3, [pc, #132]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070dc:	491e      	ldr	r1, [pc, #120]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070ee:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	4a19      	ldr	r2, [pc, #100]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070f8:	6113      	str	r3, [r2, #16]
 80070fa:	4b17      	ldr	r3, [pc, #92]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007104:	4914      	ldr	r1, [pc, #80]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	da08      	bge.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007112:	4b11      	ldr	r3, [pc, #68]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	490e      	ldr	r1, [pc, #56]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007120:	4313      	orrs	r3, r2
 8007122:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d009      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007134:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	4906      	ldr	r1, [pc, #24]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007140:	4313      	orrs	r3, r2
 8007142:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007144:	7dbb      	ldrb	r3, [r7, #22]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	58024400 	.word	0x58024400

0800715c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007160:	f7ff f860 	bl	8006224 <HAL_RCC_GetHCLKFreq>
 8007164:	4602      	mov	r2, r0
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	091b      	lsrs	r3, r3, #4
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	4904      	ldr	r1, [pc, #16]	; (8007184 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007172:	5ccb      	ldrb	r3, [r1, r3]
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800717c:	4618      	mov	r0, r3
 800717e:	bd80      	pop	{r7, pc}
 8007180:	58024400 	.word	0x58024400
 8007184:	0800e0cc 	.word	0x0800e0cc

08007188 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007188:	b480      	push	{r7}
 800718a:	b089      	sub	sp, #36	; 0x24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007190:	4ba1      	ldr	r3, [pc, #644]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800719a:	4b9f      	ldr	r3, [pc, #636]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	0b1b      	lsrs	r3, r3, #12
 80071a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071a6:	4b9c      	ldr	r3, [pc, #624]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071aa:	091b      	lsrs	r3, r3, #4
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071b2:	4b99      	ldr	r3, [pc, #612]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	08db      	lsrs	r3, r3, #3
 80071b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8111 	beq.w	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	f000 8083 	beq.w	80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	f200 80a1 	bhi.w	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d056      	beq.n	80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071f2:	e099      	b.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f4:	4b88      	ldr	r3, [pc, #544]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d02d      	beq.n	800725c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007200:	4b85      	ldr	r3, [pc, #532]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	08db      	lsrs	r3, r3, #3
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	4a84      	ldr	r2, [pc, #528]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
 8007210:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b7b      	ldr	r3, [pc, #492]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800725a:	e087      	b.n	800736c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b6a      	ldr	r3, [pc, #424]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800729e:	e065      	b.n	800736c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e2:	e043      	b.n	800736c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800742c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b48      	ldr	r3, [pc, #288]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a03 	vldr	s12, [r7, #12]
 800730a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007326:	e021      	b.n	800736c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b37      	ldr	r3, [pc, #220]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a03 	vldr	s12, [r7, #12]
 800734e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800736a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800736c:	4b2a      	ldr	r3, [pc, #168]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	0a5b      	lsrs	r3, r3, #9
 8007372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007386:	edd7 6a07 	vldr	s13, [r7, #28]
 800738a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007392:	ee17 2a90 	vmov	r2, s15
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800739a:	4b1f      	ldr	r3, [pc, #124]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	0c1b      	lsrs	r3, r3, #16
 80073a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c0:	ee17 2a90 	vmov	r2, s15
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073c8:	4b13      	ldr	r3, [pc, #76]	; (8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	0e1b      	lsrs	r3, r3, #24
 80073ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ee:	ee17 2a90 	vmov	r2, s15
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073f6:	e008      	b.n	800740a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	609a      	str	r2, [r3, #8]
}
 800740a:	bf00      	nop
 800740c:	3724      	adds	r7, #36	; 0x24
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	58024400 	.word	0x58024400
 800741c:	03d09000 	.word	0x03d09000
 8007420:	46000000 	.word	0x46000000
 8007424:	4c742400 	.word	0x4c742400
 8007428:	4a742400 	.word	0x4a742400
 800742c:	4af42400 	.word	0x4af42400

08007430 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007430:	b480      	push	{r7}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007438:	4ba1      	ldr	r3, [pc, #644]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007442:	4b9f      	ldr	r3, [pc, #636]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007446:	0d1b      	lsrs	r3, r3, #20
 8007448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800744c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800744e:	4b9c      	ldr	r3, [pc, #624]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800745a:	4b99      	ldr	r3, [pc, #612]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745e:	08db      	lsrs	r3, r3, #3
 8007460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8111 	beq.w	80076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b02      	cmp	r3, #2
 8007482:	f000 8083 	beq.w	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b02      	cmp	r3, #2
 800748a:	f200 80a1 	bhi.w	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d056      	beq.n	8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800749a:	e099      	b.n	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749c:	4b88      	ldr	r3, [pc, #544]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d02d      	beq.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a8:	4b85      	ldr	r3, [pc, #532]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	08db      	lsrs	r3, r3, #3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	4a84      	ldr	r2, [pc, #528]	; (80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b7b      	ldr	r3, [pc, #492]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007502:	e087      	b.n	8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b6a      	ldr	r3, [pc, #424]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a03 	vldr	s12, [r7, #12]
 800752a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007546:	e065      	b.n	8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b59      	ldr	r3, [pc, #356]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800758a:	e043      	b.n	8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b48      	ldr	r3, [pc, #288]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ce:	e021      	b.n	8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e2:	4b37      	ldr	r3, [pc, #220]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007612:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007614:	4b2a      	ldr	r3, [pc, #168]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	0a5b      	lsrs	r3, r3, #9
 800761a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800762a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800762e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763a:	ee17 2a90 	vmov	r2, s15
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007642:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	0c1b      	lsrs	r3, r3, #16
 8007648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800765c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007668:	ee17 2a90 	vmov	r2, s15
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007670:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	0e1b      	lsrs	r3, r3, #24
 8007676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800768a:	edd7 6a07 	vldr	s13, [r7, #28]
 800768e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007696:	ee17 2a90 	vmov	r2, s15
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800769e:	e008      	b.n	80076b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	609a      	str	r2, [r3, #8]
}
 80076b2:	bf00      	nop
 80076b4:	3724      	adds	r7, #36	; 0x24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
 80076c4:	03d09000 	.word	0x03d09000
 80076c8:	46000000 	.word	0x46000000
 80076cc:	4c742400 	.word	0x4c742400
 80076d0:	4a742400 	.word	0x4a742400
 80076d4:	4af42400 	.word	0x4af42400

080076d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e6:	4b53      	ldr	r3, [pc, #332]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d101      	bne.n	80076f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e099      	b.n	800782a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076f6:	4b4f      	ldr	r3, [pc, #316]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a4e      	ldr	r2, [pc, #312]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007702:	f7f9 fd91 	bl	8001228 <HAL_GetTick>
 8007706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007708:	e008      	b.n	800771c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800770a:	f7f9 fd8d 	bl	8001228 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e086      	b.n	800782a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800771c:	4b45      	ldr	r3, [pc, #276]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f0      	bne.n	800770a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007728:	4b42      	ldr	r3, [pc, #264]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	031b      	lsls	r3, r3, #12
 8007736:	493f      	ldr	r1, [pc, #252]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	628b      	str	r3, [r1, #40]	; 0x28
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	3b01      	subs	r3, #1
 8007742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	3b01      	subs	r3, #1
 800774c:	025b      	lsls	r3, r3, #9
 800774e:	b29b      	uxth	r3, r3
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	3b01      	subs	r3, #1
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	3b01      	subs	r3, #1
 8007766:	061b      	lsls	r3, r3, #24
 8007768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800776c:	4931      	ldr	r1, [pc, #196]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007772:	4b30      	ldr	r3, [pc, #192]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	492d      	ldr	r1, [pc, #180]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007780:	4313      	orrs	r3, r2
 8007782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007784:	4b2b      	ldr	r3, [pc, #172]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	f023 0220 	bic.w	r2, r3, #32
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	4928      	ldr	r1, [pc, #160]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007796:	4b27      	ldr	r3, [pc, #156]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	4a26      	ldr	r2, [pc, #152]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077a2:	4b24      	ldr	r3, [pc, #144]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a6:	4b24      	ldr	r3, [pc, #144]	; (8007838 <RCCEx_PLL2_Config+0x160>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	69d2      	ldr	r2, [r2, #28]
 80077ae:	00d2      	lsls	r2, r2, #3
 80077b0:	4920      	ldr	r1, [pc, #128]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077b6:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	4a1e      	ldr	r2, [pc, #120]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	f043 0310 	orr.w	r3, r3, #16
 80077c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d106      	bne.n	80077d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	4a19      	ldr	r2, [pc, #100]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d4:	e00f      	b.n	80077f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d106      	bne.n	80077ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077dc:	4b15      	ldr	r3, [pc, #84]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077e8:	e005      	b.n	80077f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077ea:	4b12      	ldr	r3, [pc, #72]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	4a11      	ldr	r2, [pc, #68]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a0e      	ldr	r2, [pc, #56]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 80077fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007802:	f7f9 fd11 	bl	8001228 <HAL_GetTick>
 8007806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007808:	e008      	b.n	800781c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800780a:	f7f9 fd0d 	bl	8001228 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e006      	b.n	800782a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <RCCEx_PLL2_Config+0x15c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
 8007838:	ffff0007 	.word	0xffff0007

0800783c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800784a:	4b53      	ldr	r3, [pc, #332]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d101      	bne.n	800785a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e099      	b.n	800798e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800785a:	4b4f      	ldr	r3, [pc, #316]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a4e      	ldr	r2, [pc, #312]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007866:	f7f9 fcdf 	bl	8001228 <HAL_GetTick>
 800786a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800786c:	e008      	b.n	8007880 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800786e:	f7f9 fcdb 	bl	8001228 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e086      	b.n	800798e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007880:	4b45      	ldr	r3, [pc, #276]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f0      	bne.n	800786e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800788c:	4b42      	ldr	r3, [pc, #264]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	051b      	lsls	r3, r3, #20
 800789a:	493f      	ldr	r1, [pc, #252]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	628b      	str	r3, [r1, #40]	; 0x28
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	025b      	lsls	r3, r3, #9
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	061b      	lsls	r3, r3, #24
 80078cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078d0:	4931      	ldr	r1, [pc, #196]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078d6:	4b30      	ldr	r3, [pc, #192]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	492d      	ldr	r1, [pc, #180]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078e8:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	4928      	ldr	r1, [pc, #160]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078fa:	4b27      	ldr	r3, [pc, #156]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	4a26      	ldr	r2, [pc, #152]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007906:	4b24      	ldr	r3, [pc, #144]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800790a:	4b24      	ldr	r3, [pc, #144]	; (800799c <RCCEx_PLL3_Config+0x160>)
 800790c:	4013      	ands	r3, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	69d2      	ldr	r2, [r2, #28]
 8007912:	00d2      	lsls	r2, r2, #3
 8007914:	4920      	ldr	r1, [pc, #128]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007916:	4313      	orrs	r3, r2
 8007918:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800791a:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4a19      	ldr	r2, [pc, #100]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007938:	e00f      	b.n	800795a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d106      	bne.n	800794e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007940:	4b15      	ldr	r3, [pc, #84]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	4a14      	ldr	r2, [pc, #80]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800794a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800794c:	e005      	b.n	800795a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	4a11      	ldr	r2, [pc, #68]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800795a:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a0e      	ldr	r2, [pc, #56]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007966:	f7f9 fc5f 	bl	8001228 <HAL_GetTick>
 800796a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800796c:	e008      	b.n	8007980 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800796e:	f7f9 fc5b 	bl	8001228 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e006      	b.n	800798e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007980:	4b05      	ldr	r3, [pc, #20]	; (8007998 <RCCEx_PLL3_Config+0x15c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0f0      	beq.n	800796e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	58024400 	.word	0x58024400
 800799c:	ffff0007 	.word	0xffff0007

080079a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e0f1      	b.n	8007b96 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a78      	ldr	r2, [pc, #480]	; (8007ba0 <HAL_SPI_Init+0x200>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <HAL_SPI_Init+0x42>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a77      	ldr	r2, [pc, #476]	; (8007ba4 <HAL_SPI_Init+0x204>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00a      	beq.n	80079e2 <HAL_SPI_Init+0x42>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a75      	ldr	r2, [pc, #468]	; (8007ba8 <HAL_SPI_Init+0x208>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d005      	beq.n	80079e2 <HAL_SPI_Init+0x42>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b0f      	cmp	r3, #15
 80079dc:	d901      	bls.n	80079e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e0d9      	b.n	8007b96 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 ff66 	bl	80088b4 <SPI_GetPacketSize>
 80079e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a6c      	ldr	r2, [pc, #432]	; (8007ba0 <HAL_SPI_Init+0x200>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00c      	beq.n	8007a0e <HAL_SPI_Init+0x6e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a6a      	ldr	r2, [pc, #424]	; (8007ba4 <HAL_SPI_Init+0x204>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <HAL_SPI_Init+0x6e>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a69      	ldr	r2, [pc, #420]	; (8007ba8 <HAL_SPI_Init+0x208>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d002      	beq.n	8007a0e <HAL_SPI_Init+0x6e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d811      	bhi.n	8007a32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a12:	4a63      	ldr	r2, [pc, #396]	; (8007ba0 <HAL_SPI_Init+0x200>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a61      	ldr	r2, [pc, #388]	; (8007ba4 <HAL_SPI_Init+0x204>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_SPI_Init+0x8c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a60      	ldr	r2, [pc, #384]	; (8007ba8 <HAL_SPI_Init+0x208>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d104      	bne.n	8007a36 <HAL_SPI_Init+0x96>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d901      	bls.n	8007a36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e0af      	b.n	8007b96 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7f9 f902 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a7c:	d119      	bne.n	8007ab2 <HAL_SPI_Init+0x112>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a86:	d103      	bne.n	8007a90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10c      	bne.n	8007ab2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aa0:	d107      	bne.n	8007ab2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ab0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69da      	ldr	r2, [r3, #28]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac4:	ea42 0103 	orr.w	r1, r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b12:	ea42 0103 	orr.w	r1, r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d113      	bne.n	8007b52 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0201 	bic.w	r2, r2, #1
 8007b60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40013000 	.word	0x40013000
 8007ba4:	40003800 	.word	0x40003800
 8007ba8:	40003c00 	.word	0x40003c00

08007bac <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d110      	bne.n	8007be8 <HAL_SPI_Receive_DMA+0x3c>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bce:	d10b      	bne.n	8007be8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f940 	bl	8007e64 <HAL_SPI_TransmitReceive_DMA>
 8007be4:	4603      	mov	r3, r0
 8007be6:	e130      	b.n	8007e4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_SPI_Receive_DMA+0x4a>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e129      	b.n	8007e4a <HAL_SPI_Receive_DMA+0x29e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d007      	beq.n	8007c1a <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	e117      	b.n	8007e4a <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_SPI_Receive_DMA+0x7a>
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	e109      	b.n	8007e4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2204      	movs	r2, #4
 8007c3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	88fa      	ldrh	r2, [r7, #6]
 8007c50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	88fa      	ldrh	r2, [r7, #6]
 8007c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007c80:	d107      	bne.n	8007c92 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c90:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d905      	bls.n	8007ca6 <HAL_SPI_Receive_DMA+0xfa>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ca4:	d10f      	bne.n	8007cc6 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007caa:	2b07      	cmp	r3, #7
 8007cac:	d913      	bls.n	8007cd6 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb8:	d00d      	beq.n	8007cd6 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cc4:	d007      	beq.n	8007cd6 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	e0b9      	b.n	8007e4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ce4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2b07      	cmp	r3, #7
 8007cec:	d820      	bhi.n	8007d30 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf8:	d109      	bne.n	8007d0e <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3301      	adds	r3, #1
 8007d04:	105b      	asrs	r3, r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d18:	d11e      	bne.n	8007d58 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3303      	adds	r3, #3
 8007d24:	109b      	asrs	r3, r3, #2
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007d2e:	e013      	b.n	8007d58 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b0f      	cmp	r3, #15
 8007d36:	d80f      	bhi.n	8007d58 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d42:	d109      	bne.n	8007d58 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	105b      	asrs	r3, r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5c:	4a3d      	ldr	r2, [pc, #244]	; (8007e54 <HAL_SPI_Receive_DMA+0x2a8>)
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d64:	4a3c      	ldr	r2, [pc, #240]	; (8007e58 <HAL_SPI_Receive_DMA+0x2ac>)
 8007d66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6c:	4a3b      	ldr	r2, [pc, #236]	; (8007e5c <HAL_SPI_Receive_DMA+0x2b0>)
 8007d6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d74:	2200      	movs	r2, #0
 8007d76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3330      	adds	r3, #48	; 0x30
 8007d82:	4619      	mov	r1, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d88:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d90:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007d92:	f7f9 ff23 	bl	8001bdc <HAL_DMA_Start_IT>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d013      	beq.n	8007dc4 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da2:	f043 0210 	orr.w	r2, r3, #16
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	e042      	b.n	8007e4a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dce:	d108      	bne.n	8007de2 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b21      	ldr	r3, [pc, #132]	; (8007e60 <HAL_SPI_Receive_DMA+0x2b4>)
 8007ddc:	400b      	ands	r3, r1
 8007dde:	6053      	str	r3, [r2, #4]
 8007de0:	e009      	b.n	8007df6 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	4b1d      	ldr	r3, [pc, #116]	; (8007e60 <HAL_SPI_Receive_DMA+0x2b4>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	88f9      	ldrh	r1, [r7, #6]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	6812      	ldr	r2, [r2, #0]
 8007df2:	430b      	orrs	r3, r1
 8007df4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e04:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8007e14:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0201 	orr.w	r2, r2, #1
 8007e24:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e2e:	d107      	bne.n	8007e40 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e3e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	080086c1 	.word	0x080086c1
 8007e58:	08008635 	.word	0x08008635
 8007e5c:	080086f9 	.word	0x080086f9
 8007e60:	ffff0000 	.word	0xffff0000

08007e64 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e1b4      	b.n	80081ee <HAL_SPI_TransmitReceive_DMA+0x38a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e92:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e9a:	7dbb      	ldrb	r3, [r7, #22]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d012      	beq.n	8007ec6 <HAL_SPI_TransmitReceive_DMA+0x62>
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ea6:	d106      	bne.n	8007eb6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d102      	bne.n	8007eb6 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007eb0:	7dbb      	ldrb	r3, [r7, #22]
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d007      	beq.n	8007ec6 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	e193      	b.n	80081ee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007ed2:	887b      	ldrh	r3, [r7, #2]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d107      	bne.n	8007ee8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	e182      	b.n	80081ee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d003      	beq.n	8007efc <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2205      	movs	r2, #5
 8007ef8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	887a      	ldrh	r2, [r7, #2]
 8007f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	887a      	ldrh	r2, [r7, #2]
 8007f16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	887a      	ldrh	r2, [r7, #2]
 8007f24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	887a      	ldrh	r2, [r7, #2]
 8007f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f4a:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	2b0f      	cmp	r3, #15
 8007f52:	d905      	bls.n	8007f60 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f5e:	d10f      	bne.n	8007f80 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	d913      	bls.n	8007f90 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f72:	d00d      	beq.n	8007f90 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f78:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f7e:	d007      	beq.n	8007f90 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	e12e      	b.n	80081ee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b07      	cmp	r3, #7
 8007f96:	d840      	bhi.n	800801a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fa2:	d109      	bne.n	8007fb8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3301      	adds	r3, #1
 8007fae:	105b      	asrs	r3, r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc2:	d109      	bne.n	8007fd8 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3303      	adds	r3, #3
 8007fce:	109b      	asrs	r3, r3, #2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe2:	d109      	bne.n	8007ff8 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3301      	adds	r3, #1
 8007fee:	105b      	asrs	r3, r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008002:	d12e      	bne.n	8008062 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800800a:	b29b      	uxth	r3, r3
 800800c:	3303      	adds	r3, #3
 800800e:	109b      	asrs	r3, r3, #2
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008018:	e023      	b.n	8008062 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b0f      	cmp	r3, #15
 8008020:	d81f      	bhi.n	8008062 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800802c:	d109      	bne.n	8008042 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008034:	b29b      	uxth	r3, r3
 8008036:	3301      	adds	r3, #1
 8008038:	105b      	asrs	r3, r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800804c:	d109      	bne.n	8008062 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008054:	b29b      	uxth	r3, r3
 8008056:	3301      	adds	r3, #1
 8008058:	105b      	asrs	r3, r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b04      	cmp	r3, #4
 800806c:	d108      	bne.n	8008080 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008072:	4a61      	ldr	r2, [pc, #388]	; (80081f8 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807a:	4a60      	ldr	r2, [pc, #384]	; (80081fc <HAL_SPI_TransmitReceive_DMA+0x398>)
 800807c:	63da      	str	r2, [r3, #60]	; 0x3c
 800807e:	e007      	b.n	8008090 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008084:	4a5e      	ldr	r2, [pc, #376]	; (8008200 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8008086:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800808c:	4a5d      	ldr	r2, [pc, #372]	; (8008204 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800808e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008094:	4a5c      	ldr	r2, [pc, #368]	; (8008208 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8008096:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800809c:	2200      	movs	r2, #0
 800809e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3330      	adds	r3, #48	; 0x30
 80080aa:	4619      	mov	r1, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80080ba:	f7f9 fd8f 	bl	8001bdc <HAL_DMA_Start_IT>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d013      	beq.n	80080ec <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ca:	f043 0210 	orr.w	r2, r3, #16
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	e080      	b.n	80081ee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080fa:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008100:	2200      	movs	r2, #0
 8008102:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008108:	2200      	movs	r2, #0
 800810a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008110:	2200      	movs	r2, #0
 8008112:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008118:	2200      	movs	r2, #0
 800811a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008124:	4619      	mov	r1, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3320      	adds	r3, #32
 800812c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008134:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008136:	f7f9 fd51 	bl	8001bdc <HAL_DMA_Start_IT>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d013      	beq.n	8008168 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008146:	f043 0210 	orr.w	r2, r3, #16
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	e042      	b.n	80081ee <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008172:	d108      	bne.n	8008186 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b23      	ldr	r3, [pc, #140]	; (800820c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8008180:	400b      	ands	r3, r1
 8008182:	6053      	str	r3, [r2, #4]
 8008184:	e009      	b.n	800819a <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b1f      	ldr	r3, [pc, #124]	; (800820c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800818e:	4013      	ands	r3, r2
 8008190:	8879      	ldrh	r1, [r7, #2]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	430b      	orrs	r3, r1
 8008198:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081a8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 80081b8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081d2:	d107      	bne.n	80081e4 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	080086c1 	.word	0x080086c1
 80081fc:	08008635 	.word	0x08008635
 8008200:	080086dd 	.word	0x080086dd
 8008204:	0800867b 	.word	0x0800867b
 8008208:	080086f9 	.word	0x080086f9
 800820c:	ffff0000 	.word	0xffff0000

08008210 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08a      	sub	sp, #40	; 0x28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008228:	6a3a      	ldr	r2, [r7, #32]
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	4013      	ands	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008238:	2300      	movs	r3, #0
 800823a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008242:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3330      	adds	r3, #48	; 0x30
 800824a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d113      	bne.n	800827e <HAL_SPI_IRQHandler+0x6e>
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10e      	bne.n	800827e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
    handled = 1UL;
 800827a:	2301      	movs	r3, #1
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10f      	bne.n	80082a8 <HAL_SPI_IRQHandler+0x98>
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008298:	2b00      	cmp	r3, #0
 800829a:	d105      	bne.n	80082a8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
    handled = 1UL;
 80082a4:	2301      	movs	r3, #1
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10f      	bne.n	80082d2 <HAL_SPI_IRQHandler+0xc2>
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d105      	bne.n	80082d2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
    handled = 1UL;
 80082ce:	2301      	movs	r3, #1
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f040 816f 	bne.w	80085b8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80a0 	beq.w	8008426 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699a      	ldr	r2, [r3, #24]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0208 	orr.w	r2, r2, #8
 80082f4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699a      	ldr	r2, [r3, #24]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0210 	orr.w	r2, r2, #16
 8008304:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699a      	ldr	r2, [r3, #24]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008314:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0208 	bic.w	r2, r2, #8
 8008324:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00f      	beq.n	8008350 <HAL_SPI_IRQHandler+0x140>
 8008330:	7cfb      	ldrb	r3, [r7, #19]
 8008332:	2b04      	cmp	r3, #4
 8008334:	d004      	beq.n	8008340 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <HAL_SPI_IRQHandler+0x140>
 8008340:	7cfb      	ldrb	r3, [r7, #19]
 8008342:	2b03      	cmp	r3, #3
 8008344:	d059      	beq.n	80083fa <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d154      	bne.n	80083fa <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d13d      	bne.n	80083da <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800835e:	e036      	b.n	80083ce <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	2b0f      	cmp	r3, #15
 8008366:	d90b      	bls.n	8008380 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008370:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008372:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008378:	1d1a      	adds	r2, r3, #4
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	665a      	str	r2, [r3, #100]	; 0x64
 800837e:	e01d      	b.n	80083bc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b07      	cmp	r3, #7
 8008386:	d90b      	bls.n	80083a0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	8812      	ldrh	r2, [r2, #0]
 8008390:	b292      	uxth	r2, r2
 8008392:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008398:	1c9a      	adds	r2, r3, #2
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	665a      	str	r2, [r3, #100]	; 0x64
 800839e:	e00d      	b.n	80083bc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1c2      	bne.n	8008360 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f9ca 	bl	8008774 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f914 	bl	8008620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80083f8:	e0e3      	b.n	80085c2 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80083fa:	7cfb      	ldrb	r3, [r7, #19]
 80083fc:	2b05      	cmp	r3, #5
 80083fe:	d103      	bne.n	8008408 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f8ef 	bl	80085e4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008406:	e0d9      	b.n	80085bc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008408:	7cfb      	ldrb	r3, [r7, #19]
 800840a:	2b04      	cmp	r3, #4
 800840c:	d103      	bne.n	8008416 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7f8 f8f4 	bl	80005fc <HAL_SPI_RxCpltCallback>
    return;
 8008414:	e0d2      	b.n	80085bc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008416:	7cfb      	ldrb	r3, [r7, #19]
 8008418:	2b03      	cmp	r3, #3
 800841a:	f040 80cf 	bne.w	80085bc <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8d6 	bl	80085d0 <HAL_SPI_TxCpltCallback>
    return;
 8008424:	e0ca      	b.n	80085bc <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00d      	beq.n	800844c <HAL_SPI_IRQHandler+0x23c>
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699a      	ldr	r2, [r3, #24]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008448:	619a      	str	r2, [r3, #24]

    return;
 800844a:	e0ba      	b.n	80085c2 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 80b5 	beq.w	80085c2 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00f      	beq.n	8008482 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008468:	f043 0204 	orr.w	r2, r3, #4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008480:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00f      	beq.n	80084ac <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008492:	f043 0201 	orr.w	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00f      	beq.n	80084d6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084bc:	f043 0208 	orr.w	r2, r3, #8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f003 0320 	and.w	r3, r3, #32
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00f      	beq.n	8008500 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0220 	orr.w	r2, r2, #32
 80084fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008506:	2b00      	cmp	r3, #0
 8008508:	d05a      	beq.n	80085c0 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0201 	bic.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6919      	ldr	r1, [r3, #16]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4b28      	ldr	r3, [pc, #160]	; (80085c8 <HAL_SPI_IRQHandler+0x3b8>)
 8008526:	400b      	ands	r3, r1
 8008528:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008530:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008534:	d138      	bne.n	80085a8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008544:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854a:	2b00      	cmp	r3, #0
 800854c:	d013      	beq.n	8008576 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008552:	4a1e      	ldr	r2, [pc, #120]	; (80085cc <HAL_SPI_IRQHandler+0x3bc>)
 8008554:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800855a:	4618      	mov	r0, r3
 800855c:	f7f9 fda8 	bl	80020b0 <HAL_DMA_Abort_IT>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d007      	beq.n	8008576 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800856c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800857a:	2b00      	cmp	r3, #0
 800857c:	d020      	beq.n	80085c0 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008582:	4a12      	ldr	r2, [pc, #72]	; (80085cc <HAL_SPI_IRQHandler+0x3bc>)
 8008584:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858a:	4618      	mov	r0, r3
 800858c:	f7f9 fd90 	bl	80020b0 <HAL_DMA_Abort_IT>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d014      	beq.n	80085c0 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800859c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80085a6:	e00b      	b.n	80085c0 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f835 	bl	8008620 <HAL_SPI_ErrorCallback>
    return;
 80085b6:	e003      	b.n	80085c0 <HAL_SPI_IRQHandler+0x3b0>
    return;
 80085b8:	bf00      	nop
 80085ba:	e002      	b.n	80085c2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80085bc:	bf00      	nop
 80085be:	e000      	b.n	80085c2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80085c0:	bf00      	nop
  }
}
 80085c2:	3728      	adds	r7, #40	; 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	fffffc94 	.word	0xfffffc94
 80085cc:	0800873f 	.word	0x0800873f

080085d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b07      	cmp	r3, #7
 800864c:	d011      	beq.n	8008672 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008658:	d103      	bne.n	8008662 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7f7 ffce 	bl	80005fc <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008660:	e007      	b.n	8008672 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f042 0208 	orr.w	r2, r2, #8
 8008670:	611a      	str	r2, [r3, #16]
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b07      	cmp	r3, #7
 8008692:	d011      	beq.n	80086b8 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869e:	d103      	bne.n	80086a8 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff ff9f 	bl	80085e4 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80086a6:	e007      	b.n	80086b8 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0208 	orr.w	r2, r2, #8
 80086b6:	611a      	str	r2, [r3, #16]
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff ff92 	bl	80085f8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff ff8e 	bl	800860c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086f0:	bf00      	nop
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7fa fe40 	bl	800338c <HAL_DMA_GetError>
 800870c:	4603      	mov	r3, r0
 800870e:	2b02      	cmp	r3, #2
 8008710:	d011      	beq.n	8008736 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 f82e 	bl	8008774 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800871e:	f043 0210 	orr.w	r2, r3, #16
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff ff75 	bl	8008620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff ff5b 	bl	8008620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0208 	orr.w	r2, r2, #8
 8008792:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0210 	orr.w	r2, r2, #16
 80087a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0201 	bic.w	r2, r2, #1
 80087b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6919      	ldr	r1, [r3, #16]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4b3c      	ldr	r3, [pc, #240]	; (80088b0 <SPI_CloseTransfer+0x13c>)
 80087c0:	400b      	ands	r3, r1
 80087c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80087d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d014      	beq.n	800880a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f003 0320 	and.w	r3, r3, #32
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00f      	beq.n	800880a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f042 0220 	orr.w	r2, r2, #32
 8008808:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b03      	cmp	r3, #3
 8008814:	d014      	beq.n	8008840 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00f      	beq.n	8008840 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008826:	f043 0204 	orr.w	r2, r3, #4
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800883e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00f      	beq.n	800886a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008850:	f043 0201 	orr.w	r2, r3, #1
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008868:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00f      	beq.n	8008894 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800887a:	f043 0208 	orr.w	r2, r3, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008892:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80088a4:	bf00      	nop
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	fffffc90 	.word	0xfffffc90

080088b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c0:	095b      	lsrs	r3, r3, #5
 80088c2:	3301      	adds	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	3307      	adds	r3, #7
 80088d2:	08db      	lsrs	r3, r3, #3
 80088d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	fb02 f303 	mul.w	r3, r2, r3
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e049      	b.n	8008990 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7f8 fa65 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f000 fa7f 	bl	8008e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0202 	mvn.w	r2, #2
 80089c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa08 	bl	8008df0 <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9fa 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa0b 	bl	8008e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0204 	mvn.w	r2, #4
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9de 	bl	8008df0 <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9d0 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f9e1 	bl	8008e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d122      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0208 	mvn.w	r2, #8
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2204      	movs	r2, #4
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f9b4 	bl	8008df0 <HAL_TIM_IC_CaptureCallback>
 8008a88:	e005      	b.n	8008a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9a6 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f9b7 	bl	8008e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d122      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d11b      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0210 	mvn.w	r2, #16
 8008ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2208      	movs	r2, #8
 8008ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f98a 	bl	8008df0 <HAL_TIM_IC_CaptureCallback>
 8008adc:	e005      	b.n	8008aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f97c 	bl	8008ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f98d 	bl	8008e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d10e      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d107      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f06f 0201 	mvn.w	r2, #1
 8008b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f956 	bl	8008dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b26:	2b80      	cmp	r3, #128	; 0x80
 8008b28:	d10e      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b34:	2b80      	cmp	r3, #128	; 0x80
 8008b36:	d107      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fb42 	bl	80091cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b56:	d10e      	bne.n	8008b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	d107      	bne.n	8008b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fb35 	bl	80091e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b80:	2b40      	cmp	r3, #64	; 0x40
 8008b82:	d10e      	bne.n	8008ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8e:	2b40      	cmp	r3, #64	; 0x40
 8008b90:	d107      	bne.n	8008ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f93b 	bl	8008e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d10e      	bne.n	8008bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d107      	bne.n	8008bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f06f 0220 	mvn.w	r2, #32
 8008bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 faf5 	bl	80091b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e0dc      	b.n	8008dae <HAL_TIM_ConfigClockSource+0x1d6>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	4b6a      	ldr	r3, [pc, #424]	; (8008db8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a64      	ldr	r2, [pc, #400]	; (8008dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	f000 80a9 	beq.w	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c30:	4a62      	ldr	r2, [pc, #392]	; (8008dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	f200 80ae 	bhi.w	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c38:	4a61      	ldr	r2, [pc, #388]	; (8008dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	f000 80a1 	beq.w	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c40:	4a5f      	ldr	r2, [pc, #380]	; (8008dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	f200 80a6 	bhi.w	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c48:	4a5e      	ldr	r2, [pc, #376]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	f000 8099 	beq.w	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c50:	4a5c      	ldr	r2, [pc, #368]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	f200 809e 	bhi.w	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c5c:	f000 8091 	beq.w	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c64:	f200 8096 	bhi.w	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c6c:	f000 8089 	beq.w	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c74:	f200 808e 	bhi.w	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c7c:	d03e      	beq.n	8008cfc <HAL_TIM_ConfigClockSource+0x124>
 8008c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c82:	f200 8087 	bhi.w	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8a:	f000 8086 	beq.w	8008d9a <HAL_TIM_ConfigClockSource+0x1c2>
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c92:	d87f      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c94:	2b70      	cmp	r3, #112	; 0x70
 8008c96:	d01a      	beq.n	8008cce <HAL_TIM_ConfigClockSource+0xf6>
 8008c98:	2b70      	cmp	r3, #112	; 0x70
 8008c9a:	d87b      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c9c:	2b60      	cmp	r3, #96	; 0x60
 8008c9e:	d050      	beq.n	8008d42 <HAL_TIM_ConfigClockSource+0x16a>
 8008ca0:	2b60      	cmp	r3, #96	; 0x60
 8008ca2:	d877      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ca4:	2b50      	cmp	r3, #80	; 0x50
 8008ca6:	d03c      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x14a>
 8008ca8:	2b50      	cmp	r3, #80	; 0x50
 8008caa:	d873      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cac:	2b40      	cmp	r3, #64	; 0x40
 8008cae:	d058      	beq.n	8008d62 <HAL_TIM_ConfigClockSource+0x18a>
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d86f      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cb4:	2b30      	cmp	r3, #48	; 0x30
 8008cb6:	d064      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cb8:	2b30      	cmp	r3, #48	; 0x30
 8008cba:	d86b      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d060      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d867      	bhi.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d05c      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cc8:	2b10      	cmp	r3, #16
 8008cca:	d05a      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ccc:	e062      	b.n	8008d94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	6899      	ldr	r1, [r3, #8]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f000 f9bd 	bl	800905c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	609a      	str	r2, [r3, #8]
      break;
 8008cfa:	e04f      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	6899      	ldr	r1, [r3, #8]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f000 f9a6 	bl	800905c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689a      	ldr	r2, [r3, #8]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d1e:	609a      	str	r2, [r3, #8]
      break;
 8008d20:	e03c      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6859      	ldr	r1, [r3, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f000 f916 	bl	8008f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2150      	movs	r1, #80	; 0x50
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f970 	bl	8009020 <TIM_ITRx_SetConfig>
      break;
 8008d40:	e02c      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6818      	ldr	r0, [r3, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	6859      	ldr	r1, [r3, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f000 f935 	bl	8008fbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2160      	movs	r1, #96	; 0x60
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f960 	bl	8009020 <TIM_ITRx_SetConfig>
      break;
 8008d60:	e01c      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	6859      	ldr	r1, [r3, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f000 f8f6 	bl	8008f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2140      	movs	r1, #64	; 0x40
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 f950 	bl	8009020 <TIM_ITRx_SetConfig>
      break;
 8008d80:	e00c      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	f000 f947 	bl	8009020 <TIM_ITRx_SetConfig>
      break;
 8008d92:	e003      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
      break;
 8008d98:	e000      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	ffceff88 	.word	0xffceff88
 8008dbc:	00100040 	.word	0x00100040
 8008dc0:	00100030 	.word	0x00100030
 8008dc4:	00100020 	.word	0x00100020

08008dc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a40      	ldr	r2, [pc, #256]	; (8008f40 <TIM_Base_SetConfig+0x114>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <TIM_Base_SetConfig+0x40>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e4a:	d00f      	beq.n	8008e6c <TIM_Base_SetConfig+0x40>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a3d      	ldr	r2, [pc, #244]	; (8008f44 <TIM_Base_SetConfig+0x118>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00b      	beq.n	8008e6c <TIM_Base_SetConfig+0x40>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a3c      	ldr	r2, [pc, #240]	; (8008f48 <TIM_Base_SetConfig+0x11c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d007      	beq.n	8008e6c <TIM_Base_SetConfig+0x40>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a3b      	ldr	r2, [pc, #236]	; (8008f4c <TIM_Base_SetConfig+0x120>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_Base_SetConfig+0x40>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a3a      	ldr	r2, [pc, #232]	; (8008f50 <TIM_Base_SetConfig+0x124>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d108      	bne.n	8008e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a2f      	ldr	r2, [pc, #188]	; (8008f40 <TIM_Base_SetConfig+0x114>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d01f      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8c:	d01b      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a2c      	ldr	r2, [pc, #176]	; (8008f44 <TIM_Base_SetConfig+0x118>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d017      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a2b      	ldr	r2, [pc, #172]	; (8008f48 <TIM_Base_SetConfig+0x11c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d013      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a2a      	ldr	r2, [pc, #168]	; (8008f4c <TIM_Base_SetConfig+0x120>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00f      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a29      	ldr	r2, [pc, #164]	; (8008f50 <TIM_Base_SetConfig+0x124>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00b      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a28      	ldr	r2, [pc, #160]	; (8008f54 <TIM_Base_SetConfig+0x128>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d007      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a27      	ldr	r2, [pc, #156]	; (8008f58 <TIM_Base_SetConfig+0x12c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d003      	beq.n	8008ec6 <TIM_Base_SetConfig+0x9a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a26      	ldr	r2, [pc, #152]	; (8008f5c <TIM_Base_SetConfig+0x130>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d108      	bne.n	8008ed8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a10      	ldr	r2, [pc, #64]	; (8008f40 <TIM_Base_SetConfig+0x114>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00f      	beq.n	8008f24 <TIM_Base_SetConfig+0xf8>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a12      	ldr	r2, [pc, #72]	; (8008f50 <TIM_Base_SetConfig+0x124>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00b      	beq.n	8008f24 <TIM_Base_SetConfig+0xf8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a11      	ldr	r2, [pc, #68]	; (8008f54 <TIM_Base_SetConfig+0x128>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d007      	beq.n	8008f24 <TIM_Base_SetConfig+0xf8>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a10      	ldr	r2, [pc, #64]	; (8008f58 <TIM_Base_SetConfig+0x12c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d003      	beq.n	8008f24 <TIM_Base_SetConfig+0xf8>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a0f      	ldr	r2, [pc, #60]	; (8008f5c <TIM_Base_SetConfig+0x130>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d103      	bne.n	8008f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	691a      	ldr	r2, [r3, #16]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	615a      	str	r2, [r3, #20]
}
 8008f32:	bf00      	nop
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	40010000 	.word	0x40010000
 8008f44:	40000400 	.word	0x40000400
 8008f48:	40000800 	.word	0x40000800
 8008f4c:	40000c00 	.word	0x40000c00
 8008f50:	40010400 	.word	0x40010400
 8008f54:	40014000 	.word	0x40014000
 8008f58:	40014400 	.word	0x40014400
 8008f5c:	40014800 	.word	0x40014800

08008f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	f023 0201 	bic.w	r2, r3, #1
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f023 030a 	bic.w	r3, r3, #10
 8008f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	f023 0210 	bic.w	r2, r3, #16
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
 8008fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	031b      	lsls	r3, r3, #12
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	011b      	lsls	r3, r3, #4
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	4313      	orrs	r3, r2
 8009004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	621a      	str	r2, [r3, #32]
}
 8009012:	bf00      	nop
 8009014:	371c      	adds	r7, #28
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
	...

08009020 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4b09      	ldr	r3, [pc, #36]	; (8009058 <TIM_ITRx_SetConfig+0x38>)
 8009034:	4013      	ands	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4313      	orrs	r3, r2
 800903e:	f043 0307 	orr.w	r3, r3, #7
 8009042:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	609a      	str	r2, [r3, #8]
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	ffcfff8f 	.word	0xffcfff8f

0800905c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	021a      	lsls	r2, r3, #8
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	431a      	orrs	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	4313      	orrs	r3, r2
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	4313      	orrs	r3, r2
 8009088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	609a      	str	r2, [r3, #8]
}
 8009090:	bf00      	nop
 8009092:	371c      	adds	r7, #28
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d101      	bne.n	80090b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e06d      	b.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a30      	ldr	r2, [pc, #192]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d004      	beq.n	80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a2f      	ldr	r2, [pc, #188]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d108      	bne.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009100:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a20      	ldr	r2, [pc, #128]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d022      	beq.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009126:	d01d      	beq.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a1d      	ldr	r2, [pc, #116]	; (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d018      	beq.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a1c      	ldr	r2, [pc, #112]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d013      	beq.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1a      	ldr	r2, [pc, #104]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d00e      	beq.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d009      	beq.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a16      	ldr	r2, [pc, #88]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d004      	beq.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a15      	ldr	r2, [pc, #84]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d10c      	bne.n	800917e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800916a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	4313      	orrs	r3, r2
 8009174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	40010000 	.word	0x40010000
 80091a0:	40010400 	.word	0x40010400
 80091a4:	40000400 	.word	0x40000400
 80091a8:	40000800 	.word	0x40000800
 80091ac:	40000c00 	.word	0x40000c00
 80091b0:	40001800 	.word	0x40001800
 80091b4:	40014000 	.word	0x40014000

080091b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e042      	b.n	800928c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7f7 fe09 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2224      	movs	r2, #36	; 0x24
 8009222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0201 	bic.w	r2, r2, #1
 8009234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f82c 	bl	8009294 <UART_SetConfig>
 800923c:	4603      	mov	r3, r0
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e022      	b.n	800928c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fd80 	bl	8009d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0201 	orr.w	r2, r2, #1
 8009282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fe07 	bl	8009e98 <UART_CheckIdleState>
 800928a:	4603      	mov	r3, r0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009294:	b5b0      	push	{r4, r5, r7, lr}
 8009296:	b08e      	sub	sp, #56	; 0x38
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	4bbf      	ldr	r3, [pc, #764]	; (80095c0 <UART_SetConfig+0x32c>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092ca:	430b      	orrs	r3, r1
 80092cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4ab5      	ldr	r2, [pc, #724]	; (80095c4 <UART_SetConfig+0x330>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d004      	beq.n	80092fe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092fa:	4313      	orrs	r3, r2
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	4bb0      	ldr	r3, [pc, #704]	; (80095c8 <UART_SetConfig+0x334>)
 8009306:	4013      	ands	r3, r2
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6812      	ldr	r2, [r2, #0]
 800930c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800930e:	430b      	orrs	r3, r1
 8009310:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	f023 010f 	bic.w	r1, r3, #15
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4aa7      	ldr	r2, [pc, #668]	; (80095cc <UART_SetConfig+0x338>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d176      	bne.n	8009420 <UART_SetConfig+0x18c>
 8009332:	4ba7      	ldr	r3, [pc, #668]	; (80095d0 <UART_SetConfig+0x33c>)
 8009334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800933a:	2b28      	cmp	r3, #40	; 0x28
 800933c:	d86c      	bhi.n	8009418 <UART_SetConfig+0x184>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <UART_SetConfig+0xb0>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	080093e9 	.word	0x080093e9
 8009348:	08009419 	.word	0x08009419
 800934c:	08009419 	.word	0x08009419
 8009350:	08009419 	.word	0x08009419
 8009354:	08009419 	.word	0x08009419
 8009358:	08009419 	.word	0x08009419
 800935c:	08009419 	.word	0x08009419
 8009360:	08009419 	.word	0x08009419
 8009364:	080093f1 	.word	0x080093f1
 8009368:	08009419 	.word	0x08009419
 800936c:	08009419 	.word	0x08009419
 8009370:	08009419 	.word	0x08009419
 8009374:	08009419 	.word	0x08009419
 8009378:	08009419 	.word	0x08009419
 800937c:	08009419 	.word	0x08009419
 8009380:	08009419 	.word	0x08009419
 8009384:	080093f9 	.word	0x080093f9
 8009388:	08009419 	.word	0x08009419
 800938c:	08009419 	.word	0x08009419
 8009390:	08009419 	.word	0x08009419
 8009394:	08009419 	.word	0x08009419
 8009398:	08009419 	.word	0x08009419
 800939c:	08009419 	.word	0x08009419
 80093a0:	08009419 	.word	0x08009419
 80093a4:	08009401 	.word	0x08009401
 80093a8:	08009419 	.word	0x08009419
 80093ac:	08009419 	.word	0x08009419
 80093b0:	08009419 	.word	0x08009419
 80093b4:	08009419 	.word	0x08009419
 80093b8:	08009419 	.word	0x08009419
 80093bc:	08009419 	.word	0x08009419
 80093c0:	08009419 	.word	0x08009419
 80093c4:	08009409 	.word	0x08009409
 80093c8:	08009419 	.word	0x08009419
 80093cc:	08009419 	.word	0x08009419
 80093d0:	08009419 	.word	0x08009419
 80093d4:	08009419 	.word	0x08009419
 80093d8:	08009419 	.word	0x08009419
 80093dc:	08009419 	.word	0x08009419
 80093e0:	08009419 	.word	0x08009419
 80093e4:	08009411 	.word	0x08009411
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ee:	e222      	b.n	8009836 <UART_SetConfig+0x5a2>
 80093f0:	2304      	movs	r3, #4
 80093f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f6:	e21e      	b.n	8009836 <UART_SetConfig+0x5a2>
 80093f8:	2308      	movs	r3, #8
 80093fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fe:	e21a      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009400:	2310      	movs	r3, #16
 8009402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009406:	e216      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009408:	2320      	movs	r3, #32
 800940a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940e:	e212      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009410:	2340      	movs	r3, #64	; 0x40
 8009412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009416:	e20e      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009418:	2380      	movs	r3, #128	; 0x80
 800941a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941e:	e20a      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a6b      	ldr	r2, [pc, #428]	; (80095d4 <UART_SetConfig+0x340>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d130      	bne.n	800948c <UART_SetConfig+0x1f8>
 800942a:	4b69      	ldr	r3, [pc, #420]	; (80095d0 <UART_SetConfig+0x33c>)
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b05      	cmp	r3, #5
 8009434:	d826      	bhi.n	8009484 <UART_SetConfig+0x1f0>
 8009436:	a201      	add	r2, pc, #4	; (adr r2, 800943c <UART_SetConfig+0x1a8>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	08009455 	.word	0x08009455
 8009440:	0800945d 	.word	0x0800945d
 8009444:	08009465 	.word	0x08009465
 8009448:	0800946d 	.word	0x0800946d
 800944c:	08009475 	.word	0x08009475
 8009450:	0800947d 	.word	0x0800947d
 8009454:	2300      	movs	r3, #0
 8009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945a:	e1ec      	b.n	8009836 <UART_SetConfig+0x5a2>
 800945c:	2304      	movs	r3, #4
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	e1e8      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009464:	2308      	movs	r3, #8
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e1e4      	b.n	8009836 <UART_SetConfig+0x5a2>
 800946c:	2310      	movs	r3, #16
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e1e0      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009474:	2320      	movs	r3, #32
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e1dc      	b.n	8009836 <UART_SetConfig+0x5a2>
 800947c:	2340      	movs	r3, #64	; 0x40
 800947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009482:	e1d8      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009484:	2380      	movs	r3, #128	; 0x80
 8009486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800948a:	e1d4      	b.n	8009836 <UART_SetConfig+0x5a2>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a51      	ldr	r2, [pc, #324]	; (80095d8 <UART_SetConfig+0x344>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d130      	bne.n	80094f8 <UART_SetConfig+0x264>
 8009496:	4b4e      	ldr	r3, [pc, #312]	; (80095d0 <UART_SetConfig+0x33c>)
 8009498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	2b05      	cmp	r3, #5
 80094a0:	d826      	bhi.n	80094f0 <UART_SetConfig+0x25c>
 80094a2:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <UART_SetConfig+0x214>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	080094c1 	.word	0x080094c1
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	080094d1 	.word	0x080094d1
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	080094e1 	.word	0x080094e1
 80094bc:	080094e9 	.word	0x080094e9
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c6:	e1b6      	b.n	8009836 <UART_SetConfig+0x5a2>
 80094c8:	2304      	movs	r3, #4
 80094ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ce:	e1b2      	b.n	8009836 <UART_SetConfig+0x5a2>
 80094d0:	2308      	movs	r3, #8
 80094d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d6:	e1ae      	b.n	8009836 <UART_SetConfig+0x5a2>
 80094d8:	2310      	movs	r3, #16
 80094da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094de:	e1aa      	b.n	8009836 <UART_SetConfig+0x5a2>
 80094e0:	2320      	movs	r3, #32
 80094e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e6:	e1a6      	b.n	8009836 <UART_SetConfig+0x5a2>
 80094e8:	2340      	movs	r3, #64	; 0x40
 80094ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ee:	e1a2      	b.n	8009836 <UART_SetConfig+0x5a2>
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f6:	e19e      	b.n	8009836 <UART_SetConfig+0x5a2>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a37      	ldr	r2, [pc, #220]	; (80095dc <UART_SetConfig+0x348>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d130      	bne.n	8009564 <UART_SetConfig+0x2d0>
 8009502:	4b33      	ldr	r3, [pc, #204]	; (80095d0 <UART_SetConfig+0x33c>)
 8009504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	2b05      	cmp	r3, #5
 800950c:	d826      	bhi.n	800955c <UART_SetConfig+0x2c8>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <UART_SetConfig+0x280>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	0800952d 	.word	0x0800952d
 8009518:	08009535 	.word	0x08009535
 800951c:	0800953d 	.word	0x0800953d
 8009520:	08009545 	.word	0x08009545
 8009524:	0800954d 	.word	0x0800954d
 8009528:	08009555 	.word	0x08009555
 800952c:	2300      	movs	r3, #0
 800952e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009532:	e180      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009534:	2304      	movs	r3, #4
 8009536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953a:	e17c      	b.n	8009836 <UART_SetConfig+0x5a2>
 800953c:	2308      	movs	r3, #8
 800953e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009542:	e178      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009544:	2310      	movs	r3, #16
 8009546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954a:	e174      	b.n	8009836 <UART_SetConfig+0x5a2>
 800954c:	2320      	movs	r3, #32
 800954e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009552:	e170      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955a:	e16c      	b.n	8009836 <UART_SetConfig+0x5a2>
 800955c:	2380      	movs	r3, #128	; 0x80
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e168      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1d      	ldr	r2, [pc, #116]	; (80095e0 <UART_SetConfig+0x34c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d142      	bne.n	80095f4 <UART_SetConfig+0x360>
 800956e:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <UART_SetConfig+0x33c>)
 8009570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	2b05      	cmp	r3, #5
 8009578:	d838      	bhi.n	80095ec <UART_SetConfig+0x358>
 800957a:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <UART_SetConfig+0x2ec>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	08009599 	.word	0x08009599
 8009584:	080095a1 	.word	0x080095a1
 8009588:	080095a9 	.word	0x080095a9
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b9 	.word	0x080095b9
 8009594:	080095e5 	.word	0x080095e5
 8009598:	2300      	movs	r3, #0
 800959a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959e:	e14a      	b.n	8009836 <UART_SetConfig+0x5a2>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a6:	e146      	b.n	8009836 <UART_SetConfig+0x5a2>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ae:	e142      	b.n	8009836 <UART_SetConfig+0x5a2>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b6:	e13e      	b.n	8009836 <UART_SetConfig+0x5a2>
 80095b8:	2320      	movs	r3, #32
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e13a      	b.n	8009836 <UART_SetConfig+0x5a2>
 80095c0:	cfff69f3 	.word	0xcfff69f3
 80095c4:	58000c00 	.word	0x58000c00
 80095c8:	11fff4ff 	.word	0x11fff4ff
 80095cc:	40011000 	.word	0x40011000
 80095d0:	58024400 	.word	0x58024400
 80095d4:	40004400 	.word	0x40004400
 80095d8:	40004800 	.word	0x40004800
 80095dc:	40004c00 	.word	0x40004c00
 80095e0:	40005000 	.word	0x40005000
 80095e4:	2340      	movs	r3, #64	; 0x40
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e124      	b.n	8009836 <UART_SetConfig+0x5a2>
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e120      	b.n	8009836 <UART_SetConfig+0x5a2>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4acc      	ldr	r2, [pc, #816]	; (800992c <UART_SetConfig+0x698>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d176      	bne.n	80096ec <UART_SetConfig+0x458>
 80095fe:	4bcc      	ldr	r3, [pc, #816]	; (8009930 <UART_SetConfig+0x69c>)
 8009600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009606:	2b28      	cmp	r3, #40	; 0x28
 8009608:	d86c      	bhi.n	80096e4 <UART_SetConfig+0x450>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <UART_SetConfig+0x37c>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	080096b5 	.word	0x080096b5
 8009614:	080096e5 	.word	0x080096e5
 8009618:	080096e5 	.word	0x080096e5
 800961c:	080096e5 	.word	0x080096e5
 8009620:	080096e5 	.word	0x080096e5
 8009624:	080096e5 	.word	0x080096e5
 8009628:	080096e5 	.word	0x080096e5
 800962c:	080096e5 	.word	0x080096e5
 8009630:	080096bd 	.word	0x080096bd
 8009634:	080096e5 	.word	0x080096e5
 8009638:	080096e5 	.word	0x080096e5
 800963c:	080096e5 	.word	0x080096e5
 8009640:	080096e5 	.word	0x080096e5
 8009644:	080096e5 	.word	0x080096e5
 8009648:	080096e5 	.word	0x080096e5
 800964c:	080096e5 	.word	0x080096e5
 8009650:	080096c5 	.word	0x080096c5
 8009654:	080096e5 	.word	0x080096e5
 8009658:	080096e5 	.word	0x080096e5
 800965c:	080096e5 	.word	0x080096e5
 8009660:	080096e5 	.word	0x080096e5
 8009664:	080096e5 	.word	0x080096e5
 8009668:	080096e5 	.word	0x080096e5
 800966c:	080096e5 	.word	0x080096e5
 8009670:	080096cd 	.word	0x080096cd
 8009674:	080096e5 	.word	0x080096e5
 8009678:	080096e5 	.word	0x080096e5
 800967c:	080096e5 	.word	0x080096e5
 8009680:	080096e5 	.word	0x080096e5
 8009684:	080096e5 	.word	0x080096e5
 8009688:	080096e5 	.word	0x080096e5
 800968c:	080096e5 	.word	0x080096e5
 8009690:	080096d5 	.word	0x080096d5
 8009694:	080096e5 	.word	0x080096e5
 8009698:	080096e5 	.word	0x080096e5
 800969c:	080096e5 	.word	0x080096e5
 80096a0:	080096e5 	.word	0x080096e5
 80096a4:	080096e5 	.word	0x080096e5
 80096a8:	080096e5 	.word	0x080096e5
 80096ac:	080096e5 	.word	0x080096e5
 80096b0:	080096dd 	.word	0x080096dd
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ba:	e0bc      	b.n	8009836 <UART_SetConfig+0x5a2>
 80096bc:	2304      	movs	r3, #4
 80096be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c2:	e0b8      	b.n	8009836 <UART_SetConfig+0x5a2>
 80096c4:	2308      	movs	r3, #8
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e0b4      	b.n	8009836 <UART_SetConfig+0x5a2>
 80096cc:	2310      	movs	r3, #16
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e0b0      	b.n	8009836 <UART_SetConfig+0x5a2>
 80096d4:	2320      	movs	r3, #32
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e0ac      	b.n	8009836 <UART_SetConfig+0x5a2>
 80096dc:	2340      	movs	r3, #64	; 0x40
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e0a8      	b.n	8009836 <UART_SetConfig+0x5a2>
 80096e4:	2380      	movs	r3, #128	; 0x80
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e0a4      	b.n	8009836 <UART_SetConfig+0x5a2>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a90      	ldr	r2, [pc, #576]	; (8009934 <UART_SetConfig+0x6a0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d130      	bne.n	8009758 <UART_SetConfig+0x4c4>
 80096f6:	4b8e      	ldr	r3, [pc, #568]	; (8009930 <UART_SetConfig+0x69c>)
 80096f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	2b05      	cmp	r3, #5
 8009700:	d826      	bhi.n	8009750 <UART_SetConfig+0x4bc>
 8009702:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <UART_SetConfig+0x474>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	08009721 	.word	0x08009721
 800970c:	08009729 	.word	0x08009729
 8009710:	08009731 	.word	0x08009731
 8009714:	08009739 	.word	0x08009739
 8009718:	08009741 	.word	0x08009741
 800971c:	08009749 	.word	0x08009749
 8009720:	2300      	movs	r3, #0
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e086      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009728:	2304      	movs	r3, #4
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e082      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009730:	2308      	movs	r3, #8
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e07e      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009738:	2310      	movs	r3, #16
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e07a      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009740:	2320      	movs	r3, #32
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e076      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009748:	2340      	movs	r3, #64	; 0x40
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	e072      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009750:	2380      	movs	r3, #128	; 0x80
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	e06e      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a76      	ldr	r2, [pc, #472]	; (8009938 <UART_SetConfig+0x6a4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d130      	bne.n	80097c4 <UART_SetConfig+0x530>
 8009762:	4b73      	ldr	r3, [pc, #460]	; (8009930 <UART_SetConfig+0x69c>)
 8009764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b05      	cmp	r3, #5
 800976c:	d826      	bhi.n	80097bc <UART_SetConfig+0x528>
 800976e:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <UART_SetConfig+0x4e0>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	0800978d 	.word	0x0800978d
 8009778:	08009795 	.word	0x08009795
 800977c:	0800979d 	.word	0x0800979d
 8009780:	080097a5 	.word	0x080097a5
 8009784:	080097ad 	.word	0x080097ad
 8009788:	080097b5 	.word	0x080097b5
 800978c:	2300      	movs	r3, #0
 800978e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009792:	e050      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009794:	2304      	movs	r3, #4
 8009796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979a:	e04c      	b.n	8009836 <UART_SetConfig+0x5a2>
 800979c:	2308      	movs	r3, #8
 800979e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a2:	e048      	b.n	8009836 <UART_SetConfig+0x5a2>
 80097a4:	2310      	movs	r3, #16
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e044      	b.n	8009836 <UART_SetConfig+0x5a2>
 80097ac:	2320      	movs	r3, #32
 80097ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b2:	e040      	b.n	8009836 <UART_SetConfig+0x5a2>
 80097b4:	2340      	movs	r3, #64	; 0x40
 80097b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ba:	e03c      	b.n	8009836 <UART_SetConfig+0x5a2>
 80097bc:	2380      	movs	r3, #128	; 0x80
 80097be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c2:	e038      	b.n	8009836 <UART_SetConfig+0x5a2>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a5c      	ldr	r2, [pc, #368]	; (800993c <UART_SetConfig+0x6a8>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d130      	bne.n	8009830 <UART_SetConfig+0x59c>
 80097ce:	4b58      	ldr	r3, [pc, #352]	; (8009930 <UART_SetConfig+0x69c>)
 80097d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	d826      	bhi.n	8009828 <UART_SetConfig+0x594>
 80097da:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <UART_SetConfig+0x54c>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	080097f9 	.word	0x080097f9
 80097e4:	08009801 	.word	0x08009801
 80097e8:	08009809 	.word	0x08009809
 80097ec:	08009811 	.word	0x08009811
 80097f0:	08009819 	.word	0x08009819
 80097f4:	08009821 	.word	0x08009821
 80097f8:	2302      	movs	r3, #2
 80097fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fe:	e01a      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009800:	2304      	movs	r3, #4
 8009802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009806:	e016      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009808:	2308      	movs	r3, #8
 800980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980e:	e012      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009810:	2310      	movs	r3, #16
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e00e      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009818:	2320      	movs	r3, #32
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e00a      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009820:	2340      	movs	r3, #64	; 0x40
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e006      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e002      	b.n	8009836 <UART_SetConfig+0x5a2>
 8009830:	2380      	movs	r3, #128	; 0x80
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a40      	ldr	r2, [pc, #256]	; (800993c <UART_SetConfig+0x6a8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	f040 80ef 	bne.w	8009a20 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009846:	2b20      	cmp	r3, #32
 8009848:	dc46      	bgt.n	80098d8 <UART_SetConfig+0x644>
 800984a:	2b02      	cmp	r3, #2
 800984c:	f2c0 8081 	blt.w	8009952 <UART_SetConfig+0x6be>
 8009850:	3b02      	subs	r3, #2
 8009852:	2b1e      	cmp	r3, #30
 8009854:	d87d      	bhi.n	8009952 <UART_SetConfig+0x6be>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0x5c8>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	080098df 	.word	0x080098df
 8009860:	08009953 	.word	0x08009953
 8009864:	080098e7 	.word	0x080098e7
 8009868:	08009953 	.word	0x08009953
 800986c:	08009953 	.word	0x08009953
 8009870:	08009953 	.word	0x08009953
 8009874:	080098f7 	.word	0x080098f7
 8009878:	08009953 	.word	0x08009953
 800987c:	08009953 	.word	0x08009953
 8009880:	08009953 	.word	0x08009953
 8009884:	08009953 	.word	0x08009953
 8009888:	08009953 	.word	0x08009953
 800988c:	08009953 	.word	0x08009953
 8009890:	08009953 	.word	0x08009953
 8009894:	08009907 	.word	0x08009907
 8009898:	08009953 	.word	0x08009953
 800989c:	08009953 	.word	0x08009953
 80098a0:	08009953 	.word	0x08009953
 80098a4:	08009953 	.word	0x08009953
 80098a8:	08009953 	.word	0x08009953
 80098ac:	08009953 	.word	0x08009953
 80098b0:	08009953 	.word	0x08009953
 80098b4:	08009953 	.word	0x08009953
 80098b8:	08009953 	.word	0x08009953
 80098bc:	08009953 	.word	0x08009953
 80098c0:	08009953 	.word	0x08009953
 80098c4:	08009953 	.word	0x08009953
 80098c8:	08009953 	.word	0x08009953
 80098cc:	08009953 	.word	0x08009953
 80098d0:	08009953 	.word	0x08009953
 80098d4:	08009945 	.word	0x08009945
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	d036      	beq.n	800994a <UART_SetConfig+0x6b6>
 80098dc:	e039      	b.n	8009952 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098de:	f7fd fc3d 	bl	800715c <HAL_RCCEx_GetD3PCLK1Freq>
 80098e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80098e4:	e03b      	b.n	800995e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e6:	f107 0314 	add.w	r3, r7, #20
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fd fc4c 	bl	8007188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098f4:	e033      	b.n	800995e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f6:	f107 0308 	add.w	r3, r7, #8
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fd fd98 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009904:	e02b      	b.n	800995e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <UART_SetConfig+0x69c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d009      	beq.n	8009926 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009912:	4b07      	ldr	r3, [pc, #28]	; (8009930 <UART_SetConfig+0x69c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	08db      	lsrs	r3, r3, #3
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	4a08      	ldr	r2, [pc, #32]	; (8009940 <UART_SetConfig+0x6ac>)
 800991e:	fa22 f303 	lsr.w	r3, r2, r3
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009924:	e01b      	b.n	800995e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <UART_SetConfig+0x6ac>)
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800992a:	e018      	b.n	800995e <UART_SetConfig+0x6ca>
 800992c:	40011400 	.word	0x40011400
 8009930:	58024400 	.word	0x58024400
 8009934:	40007800 	.word	0x40007800
 8009938:	40007c00 	.word	0x40007c00
 800993c:	58000c00 	.word	0x58000c00
 8009940:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009944:	4bc4      	ldr	r3, [pc, #784]	; (8009c58 <UART_SetConfig+0x9c4>)
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009948:	e009      	b.n	800995e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800994a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800994e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009950:	e005      	b.n	800995e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800995c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 81da 	beq.w	8009d1a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	4abc      	ldr	r2, [pc, #752]	; (8009c5c <UART_SetConfig+0x9c8>)
 800996c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009970:	461a      	mov	r2, r3
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	fbb3 f3f2 	udiv	r3, r3, r2
 8009978:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	4413      	add	r3, r2
 8009984:	6a3a      	ldr	r2, [r7, #32]
 8009986:	429a      	cmp	r2, r3
 8009988:	d305      	bcc.n	8009996 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009990:	6a3a      	ldr	r2, [r7, #32]
 8009992:	429a      	cmp	r2, r3
 8009994:	d903      	bls.n	800999e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800999c:	e1bd      	b.n	8009d1a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a0:	4618      	mov	r0, r3
 80099a2:	f04f 0100 	mov.w	r1, #0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	4aac      	ldr	r2, [pc, #688]	; (8009c5c <UART_SetConfig+0x9c8>)
 80099ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	f04f 0300 	mov.w	r3, #0
 80099b6:	f7f6 fc8f 	bl	80002d8 <__aeabi_uldivmod>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4610      	mov	r0, r2
 80099c0:	4619      	mov	r1, r3
 80099c2:	f04f 0200 	mov.w	r2, #0
 80099c6:	f04f 0300 	mov.w	r3, #0
 80099ca:	020b      	lsls	r3, r1, #8
 80099cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099d0:	0202      	lsls	r2, r0, #8
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	6849      	ldr	r1, [r1, #4]
 80099d6:	0849      	lsrs	r1, r1, #1
 80099d8:	4608      	mov	r0, r1
 80099da:	f04f 0100 	mov.w	r1, #0
 80099de:	1814      	adds	r4, r2, r0
 80099e0:	eb43 0501 	adc.w	r5, r3, r1
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	461a      	mov	r2, r3
 80099ea:	f04f 0300 	mov.w	r3, #0
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fc71 	bl	80002d8 <__aeabi_uldivmod>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4613      	mov	r3, r2
 80099fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a04:	d308      	bcc.n	8009a18 <UART_SetConfig+0x784>
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a0c:	d204      	bcs.n	8009a18 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a14:	60da      	str	r2, [r3, #12]
 8009a16:	e180      	b.n	8009d1a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a1e:	e17c      	b.n	8009d1a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a28:	f040 80be 	bne.w	8009ba8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8009a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	dc49      	bgt.n	8009ac8 <UART_SetConfig+0x834>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	db7c      	blt.n	8009b32 <UART_SetConfig+0x89e>
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	d87a      	bhi.n	8009b32 <UART_SetConfig+0x89e>
 8009a3c:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <UART_SetConfig+0x7b0>)
 8009a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a42:	bf00      	nop
 8009a44:	08009acf 	.word	0x08009acf
 8009a48:	08009ad7 	.word	0x08009ad7
 8009a4c:	08009b33 	.word	0x08009b33
 8009a50:	08009b33 	.word	0x08009b33
 8009a54:	08009adf 	.word	0x08009adf
 8009a58:	08009b33 	.word	0x08009b33
 8009a5c:	08009b33 	.word	0x08009b33
 8009a60:	08009b33 	.word	0x08009b33
 8009a64:	08009aef 	.word	0x08009aef
 8009a68:	08009b33 	.word	0x08009b33
 8009a6c:	08009b33 	.word	0x08009b33
 8009a70:	08009b33 	.word	0x08009b33
 8009a74:	08009b33 	.word	0x08009b33
 8009a78:	08009b33 	.word	0x08009b33
 8009a7c:	08009b33 	.word	0x08009b33
 8009a80:	08009b33 	.word	0x08009b33
 8009a84:	08009aff 	.word	0x08009aff
 8009a88:	08009b33 	.word	0x08009b33
 8009a8c:	08009b33 	.word	0x08009b33
 8009a90:	08009b33 	.word	0x08009b33
 8009a94:	08009b33 	.word	0x08009b33
 8009a98:	08009b33 	.word	0x08009b33
 8009a9c:	08009b33 	.word	0x08009b33
 8009aa0:	08009b33 	.word	0x08009b33
 8009aa4:	08009b33 	.word	0x08009b33
 8009aa8:	08009b33 	.word	0x08009b33
 8009aac:	08009b33 	.word	0x08009b33
 8009ab0:	08009b33 	.word	0x08009b33
 8009ab4:	08009b33 	.word	0x08009b33
 8009ab8:	08009b33 	.word	0x08009b33
 8009abc:	08009b33 	.word	0x08009b33
 8009ac0:	08009b33 	.word	0x08009b33
 8009ac4:	08009b25 	.word	0x08009b25
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	d02e      	beq.n	8009b2a <UART_SetConfig+0x896>
 8009acc:	e031      	b.n	8009b32 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ace:	f7fc fbd9 	bl	8006284 <HAL_RCC_GetPCLK1Freq>
 8009ad2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ad4:	e033      	b.n	8009b3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ad6:	f7fc fbeb 	bl	80062b0 <HAL_RCC_GetPCLK2Freq>
 8009ada:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009adc:	e02f      	b.n	8009b3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ade:	f107 0314 	add.w	r3, r7, #20
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fd fb50 	bl	8007188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aec:	e027      	b.n	8009b3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aee:	f107 0308 	add.w	r3, r7, #8
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fd fc9c 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009afc:	e01f      	b.n	8009b3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009afe:	4b58      	ldr	r3, [pc, #352]	; (8009c60 <UART_SetConfig+0x9cc>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b0a:	4b55      	ldr	r3, [pc, #340]	; (8009c60 <UART_SetConfig+0x9cc>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	08db      	lsrs	r3, r3, #3
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	4a53      	ldr	r2, [pc, #332]	; (8009c64 <UART_SetConfig+0x9d0>)
 8009b16:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b1c:	e00f      	b.n	8009b3e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009b1e:	4b51      	ldr	r3, [pc, #324]	; (8009c64 <UART_SetConfig+0x9d0>)
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b22:	e00c      	b.n	8009b3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b24:	4b4c      	ldr	r3, [pc, #304]	; (8009c58 <UART_SetConfig+0x9c4>)
 8009b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b28:	e009      	b.n	8009b3e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b30:	e005      	b.n	8009b3e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80ea 	beq.w	8009d1a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	4a44      	ldr	r2, [pc, #272]	; (8009c5c <UART_SetConfig+0x9c8>)
 8009b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b50:	461a      	mov	r2, r3
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b58:	005a      	lsls	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	085b      	lsrs	r3, r3, #1
 8009b60:	441a      	add	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d916      	bls.n	8009ba0 <UART_SetConfig+0x90c>
 8009b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b78:	d212      	bcs.n	8009ba0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	f023 030f 	bic.w	r3, r3, #15
 8009b82:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	085b      	lsrs	r3, r3, #1
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b92:	4313      	orrs	r3, r2
 8009b94:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b9c:	60da      	str	r2, [r3, #12]
 8009b9e:	e0bc      	b.n	8009d1a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ba6:	e0b8      	b.n	8009d1a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	dc4b      	bgt.n	8009c48 <UART_SetConfig+0x9b4>
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f2c0 8087 	blt.w	8009cc4 <UART_SetConfig+0xa30>
 8009bb6:	2b20      	cmp	r3, #32
 8009bb8:	f200 8084 	bhi.w	8009cc4 <UART_SetConfig+0xa30>
 8009bbc:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x930>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009c4f 	.word	0x08009c4f
 8009bc8:	08009c69 	.word	0x08009c69
 8009bcc:	08009cc5 	.word	0x08009cc5
 8009bd0:	08009cc5 	.word	0x08009cc5
 8009bd4:	08009c71 	.word	0x08009c71
 8009bd8:	08009cc5 	.word	0x08009cc5
 8009bdc:	08009cc5 	.word	0x08009cc5
 8009be0:	08009cc5 	.word	0x08009cc5
 8009be4:	08009c81 	.word	0x08009c81
 8009be8:	08009cc5 	.word	0x08009cc5
 8009bec:	08009cc5 	.word	0x08009cc5
 8009bf0:	08009cc5 	.word	0x08009cc5
 8009bf4:	08009cc5 	.word	0x08009cc5
 8009bf8:	08009cc5 	.word	0x08009cc5
 8009bfc:	08009cc5 	.word	0x08009cc5
 8009c00:	08009cc5 	.word	0x08009cc5
 8009c04:	08009c91 	.word	0x08009c91
 8009c08:	08009cc5 	.word	0x08009cc5
 8009c0c:	08009cc5 	.word	0x08009cc5
 8009c10:	08009cc5 	.word	0x08009cc5
 8009c14:	08009cc5 	.word	0x08009cc5
 8009c18:	08009cc5 	.word	0x08009cc5
 8009c1c:	08009cc5 	.word	0x08009cc5
 8009c20:	08009cc5 	.word	0x08009cc5
 8009c24:	08009cc5 	.word	0x08009cc5
 8009c28:	08009cc5 	.word	0x08009cc5
 8009c2c:	08009cc5 	.word	0x08009cc5
 8009c30:	08009cc5 	.word	0x08009cc5
 8009c34:	08009cc5 	.word	0x08009cc5
 8009c38:	08009cc5 	.word	0x08009cc5
 8009c3c:	08009cc5 	.word	0x08009cc5
 8009c40:	08009cc5 	.word	0x08009cc5
 8009c44:	08009cb7 	.word	0x08009cb7
 8009c48:	2b40      	cmp	r3, #64	; 0x40
 8009c4a:	d037      	beq.n	8009cbc <UART_SetConfig+0xa28>
 8009c4c:	e03a      	b.n	8009cc4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4e:	f7fc fb19 	bl	8006284 <HAL_RCC_GetPCLK1Freq>
 8009c52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c54:	e03c      	b.n	8009cd0 <UART_SetConfig+0xa3c>
 8009c56:	bf00      	nop
 8009c58:	003d0900 	.word	0x003d0900
 8009c5c:	0800e0e4 	.word	0x0800e0e4
 8009c60:	58024400 	.word	0x58024400
 8009c64:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c68:	f7fc fb22 	bl	80062b0 <HAL_RCC_GetPCLK2Freq>
 8009c6c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c6e:	e02f      	b.n	8009cd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c70:	f107 0314 	add.w	r3, r7, #20
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fd fa87 	bl	8007188 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c7e:	e027      	b.n	8009cd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fd fbd3 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c8e:	e01f      	b.n	8009cd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c90:	4b2c      	ldr	r3, [pc, #176]	; (8009d44 <UART_SetConfig+0xab0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0320 	and.w	r3, r3, #32
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d009      	beq.n	8009cb0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c9c:	4b29      	ldr	r3, [pc, #164]	; (8009d44 <UART_SetConfig+0xab0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	08db      	lsrs	r3, r3, #3
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	4a28      	ldr	r2, [pc, #160]	; (8009d48 <UART_SetConfig+0xab4>)
 8009ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cae:	e00f      	b.n	8009cd0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009cb0:	4b25      	ldr	r3, [pc, #148]	; (8009d48 <UART_SetConfig+0xab4>)
 8009cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb4:	e00c      	b.n	8009cd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb6:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <UART_SetConfig+0xab8>)
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cba:	e009      	b.n	8009cd0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cc2:	e005      	b.n	8009cd0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009cce:	bf00      	nop
    }

    if (pclk != 0U)
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d021      	beq.n	8009d1a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	4a1d      	ldr	r2, [pc, #116]	; (8009d50 <UART_SetConfig+0xabc>)
 8009cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	085b      	lsrs	r3, r3, #1
 8009cee:	441a      	add	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	2b0f      	cmp	r3, #15
 8009cfe:	d909      	bls.n	8009d14 <UART_SetConfig+0xa80>
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d06:	d205      	bcs.n	8009d14 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60da      	str	r2, [r3, #12]
 8009d12:	e002      	b.n	8009d1a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009d36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3738      	adds	r7, #56	; 0x38
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bdb0      	pop	{r4, r5, r7, pc}
 8009d42:	bf00      	nop
 8009d44:	58024400 	.word	0x58024400
 8009d48:	03d09000 	.word	0x03d09000
 8009d4c:	003d0900 	.word	0x003d0900
 8009d50:	0800e0e4 	.word	0x0800e0e4

08009d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00a      	beq.n	8009d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00a      	beq.n	8009dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	f003 0308 	and.w	r3, r3, #8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00a      	beq.n	8009e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01a      	beq.n	8009e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e52:	d10a      	bne.n	8009e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	605a      	str	r2, [r3, #4]
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ea8:	f7f7 f9be 	bl	8001228 <HAL_GetTick>
 8009eac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d10e      	bne.n	8009eda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f82f 	bl	8009f2e <UART_WaitOnFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e025      	b.n	8009f26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d10e      	bne.n	8009f06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f819 	bl	8009f2e <UART_WaitOnFlagUntilTimeout>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e00f      	b.n	8009f26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2220      	movs	r2, #32
 8009f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b09c      	sub	sp, #112	; 0x70
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	603b      	str	r3, [r7, #0]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f3e:	e0a9      	b.n	800a094 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f46:	f000 80a5 	beq.w	800a094 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f4a:	f7f7 f96d 	bl	8001228 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d302      	bcc.n	8009f60 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d140      	bne.n	8009fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f74:	667b      	str	r3, [r7, #100]	; 0x64
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e6      	bne.n	8009f60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3308      	adds	r3, #8
 8009f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	f023 0301 	bic.w	r3, r3, #1
 8009fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e5      	bne.n	8009f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e069      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d051      	beq.n	800a094 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ffe:	d149      	bne.n	800a094 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a008:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a01e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a028:	637b      	str	r3, [r7, #52]	; 0x34
 800a02a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a02e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e6      	bne.n	800a00a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3308      	adds	r3, #8
 800a042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	613b      	str	r3, [r7, #16]
   return(result);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f023 0301 	bic.w	r3, r3, #1
 800a052:	66bb      	str	r3, [r7, #104]	; 0x68
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3308      	adds	r3, #8
 800a05a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a05c:	623a      	str	r2, [r7, #32]
 800a05e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	69f9      	ldr	r1, [r7, #28]
 800a062:	6a3a      	ldr	r2, [r7, #32]
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	61bb      	str	r3, [r7, #24]
   return(result);
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e5      	bne.n	800a03c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2220      	movs	r2, #32
 800a084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e010      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69da      	ldr	r2, [r3, #28]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	4013      	ands	r3, r2
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2301      	moveq	r3, #1
 800a0a6:	2300      	movne	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	f43f af46 	beq.w	8009f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3770      	adds	r7, #112	; 0x70
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d101      	bne.n	800a0d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e027      	b.n	800a124 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2224      	movs	r2, #36	; 0x24
 800a0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0201 	bic.w	r2, r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a102:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2220      	movs	r2, #32
 800a116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a140:	2b01      	cmp	r3, #1
 800a142:	d101      	bne.n	800a148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a144:	2302      	movs	r3, #2
 800a146:	e02d      	b.n	800a1a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2224      	movs	r2, #36	; 0x24
 800a154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f022 0201 	bic.w	r2, r2, #1
 800a16e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f84f 	bl	800a228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2220      	movs	r2, #32
 800a196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d101      	bne.n	800a1c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e02d      	b.n	800a220 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2224      	movs	r2, #36	; 0x24
 800a1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 0201 	bic.w	r2, r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f811 	bl	800a228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2220      	movs	r2, #32
 800a212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a234:	2b00      	cmp	r3, #0
 800a236:	d108      	bne.n	800a24a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a248:	e031      	b.n	800a2ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a24a:	2310      	movs	r3, #16
 800a24c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a24e:	2310      	movs	r3, #16
 800a250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	0e5b      	lsrs	r3, r3, #25
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	0f5b      	lsrs	r3, r3, #29
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	7b3a      	ldrb	r2, [r7, #12]
 800a276:	4911      	ldr	r1, [pc, #68]	; (800a2bc <UARTEx_SetNbDataToProcess+0x94>)
 800a278:	5c8a      	ldrb	r2, [r1, r2]
 800a27a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a27e:	7b3a      	ldrb	r2, [r7, #12]
 800a280:	490f      	ldr	r1, [pc, #60]	; (800a2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a284:	fb93 f3f2 	sdiv	r3, r3, r2
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	7b7a      	ldrb	r2, [r7, #13]
 800a294:	4909      	ldr	r1, [pc, #36]	; (800a2bc <UARTEx_SetNbDataToProcess+0x94>)
 800a296:	5c8a      	ldrb	r2, [r1, r2]
 800a298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a29c:	7b7a      	ldrb	r2, [r7, #13]
 800a29e:	4908      	ldr	r1, [pc, #32]	; (800a2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a2a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	0800e0fc 	.word	0x0800e0fc
 800a2c0:	0800e104 	.word	0x0800e104

0800a2c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	f107 001c 	add.w	r0, r7, #28
 800a2d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d120      	bne.n	800a31e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	4b2a      	ldr	r3, [pc, #168]	; (800a398 <USB_CoreInit+0xd4>)
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d105      	bne.n	800a312 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 fb4e 	bl	800b9b4 <USB_CoreReset>
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]
 800a31c:	e01a      	b.n	800a354 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f001 fb42 	bl	800b9b4 <USB_CoreReset>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	639a      	str	r2, [r3, #56]	; 0x38
 800a346:	e005      	b.n	800a354 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	2b01      	cmp	r3, #1
 800a358:	d116      	bne.n	800a388 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a35e:	b29a      	uxth	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <USB_CoreInit+0xd8>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f043 0206 	orr.w	r2, r3, #6
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	f043 0220 	orr.w	r2, r3, #32
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a394:	b004      	add	sp, #16
 800a396:	4770      	bx	lr
 800a398:	ffbdffbf 	.word	0xffbdffbf
 800a39c:	03ee0000 	.word	0x03ee0000

0800a3a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d165      	bne.n	800a480 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	4a41      	ldr	r2, [pc, #260]	; (800a4bc <USB_SetTurnaroundTime+0x11c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d906      	bls.n	800a3ca <USB_SetTurnaroundTime+0x2a>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	4a40      	ldr	r2, [pc, #256]	; (800a4c0 <USB_SetTurnaroundTime+0x120>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d202      	bcs.n	800a3ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3c4:	230f      	movs	r3, #15
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	e062      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	4a3c      	ldr	r2, [pc, #240]	; (800a4c0 <USB_SetTurnaroundTime+0x120>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d306      	bcc.n	800a3e0 <USB_SetTurnaroundTime+0x40>
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	4a3b      	ldr	r2, [pc, #236]	; (800a4c4 <USB_SetTurnaroundTime+0x124>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d202      	bcs.n	800a3e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3da:	230e      	movs	r3, #14
 800a3dc:	617b      	str	r3, [r7, #20]
 800a3de:	e057      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	4a38      	ldr	r2, [pc, #224]	; (800a4c4 <USB_SetTurnaroundTime+0x124>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d306      	bcc.n	800a3f6 <USB_SetTurnaroundTime+0x56>
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	4a37      	ldr	r2, [pc, #220]	; (800a4c8 <USB_SetTurnaroundTime+0x128>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d202      	bcs.n	800a3f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a3f0:	230d      	movs	r3, #13
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	e04c      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	4a33      	ldr	r2, [pc, #204]	; (800a4c8 <USB_SetTurnaroundTime+0x128>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d306      	bcc.n	800a40c <USB_SetTurnaroundTime+0x6c>
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	4a32      	ldr	r2, [pc, #200]	; (800a4cc <USB_SetTurnaroundTime+0x12c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d802      	bhi.n	800a40c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a406:	230c      	movs	r3, #12
 800a408:	617b      	str	r3, [r7, #20]
 800a40a:	e041      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	4a2f      	ldr	r2, [pc, #188]	; (800a4cc <USB_SetTurnaroundTime+0x12c>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d906      	bls.n	800a422 <USB_SetTurnaroundTime+0x82>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4a2e      	ldr	r2, [pc, #184]	; (800a4d0 <USB_SetTurnaroundTime+0x130>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d802      	bhi.n	800a422 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a41c:	230b      	movs	r3, #11
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	e036      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4a2a      	ldr	r2, [pc, #168]	; (800a4d0 <USB_SetTurnaroundTime+0x130>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d906      	bls.n	800a438 <USB_SetTurnaroundTime+0x98>
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4a29      	ldr	r2, [pc, #164]	; (800a4d4 <USB_SetTurnaroundTime+0x134>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d802      	bhi.n	800a438 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a432:	230a      	movs	r3, #10
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	e02b      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4a26      	ldr	r2, [pc, #152]	; (800a4d4 <USB_SetTurnaroundTime+0x134>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d906      	bls.n	800a44e <USB_SetTurnaroundTime+0xae>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4a25      	ldr	r2, [pc, #148]	; (800a4d8 <USB_SetTurnaroundTime+0x138>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d202      	bcs.n	800a44e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a448:	2309      	movs	r3, #9
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	e020      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	4a21      	ldr	r2, [pc, #132]	; (800a4d8 <USB_SetTurnaroundTime+0x138>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d306      	bcc.n	800a464 <USB_SetTurnaroundTime+0xc4>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	4a20      	ldr	r2, [pc, #128]	; (800a4dc <USB_SetTurnaroundTime+0x13c>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d802      	bhi.n	800a464 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a45e:	2308      	movs	r3, #8
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	e015      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	4a1d      	ldr	r2, [pc, #116]	; (800a4dc <USB_SetTurnaroundTime+0x13c>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d906      	bls.n	800a47a <USB_SetTurnaroundTime+0xda>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	4a1c      	ldr	r2, [pc, #112]	; (800a4e0 <USB_SetTurnaroundTime+0x140>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d202      	bcs.n	800a47a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a474:	2307      	movs	r3, #7
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	e00a      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a47a:	2306      	movs	r3, #6
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	e007      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d102      	bne.n	800a48c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a486:	2309      	movs	r3, #9
 800a488:	617b      	str	r3, [r7, #20]
 800a48a:	e001      	b.n	800a490 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a48c:	2309      	movs	r3, #9
 800a48e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	68da      	ldr	r2, [r3, #12]
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	029b      	lsls	r3, r3, #10
 800a4a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	00d8acbf 	.word	0x00d8acbf
 800a4c0:	00e4e1c0 	.word	0x00e4e1c0
 800a4c4:	00f42400 	.word	0x00f42400
 800a4c8:	01067380 	.word	0x01067380
 800a4cc:	011a499f 	.word	0x011a499f
 800a4d0:	01312cff 	.word	0x01312cff
 800a4d4:	014ca43f 	.word	0x014ca43f
 800a4d8:	016e3600 	.word	0x016e3600
 800a4dc:	01a6ab1f 	.word	0x01a6ab1f
 800a4e0:	01e84800 	.word	0x01e84800

0800a4e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f043 0201 	orr.w	r2, r3, #1
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f023 0201 	bic.w	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a544:	78fb      	ldrb	r3, [r7, #3]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d115      	bne.n	800a576 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a556:	2001      	movs	r0, #1
 800a558:	f7f6 fe72 	bl	8001240 <HAL_Delay>
      ms++;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3301      	adds	r3, #1
 800a560:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f001 f995 	bl	800b892 <USB_GetMode>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d01e      	beq.n	800a5ac <USB_SetCurrentMode+0x84>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b31      	cmp	r3, #49	; 0x31
 800a572:	d9f0      	bls.n	800a556 <USB_SetCurrentMode+0x2e>
 800a574:	e01a      	b.n	800a5ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d115      	bne.n	800a5a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a588:	2001      	movs	r0, #1
 800a58a:	f7f6 fe59 	bl	8001240 <HAL_Delay>
      ms++;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3301      	adds	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 f97c 	bl	800b892 <USB_GetMode>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <USB_SetCurrentMode+0x84>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2b31      	cmp	r3, #49	; 0x31
 800a5a4:	d9f0      	bls.n	800a588 <USB_SetCurrentMode+0x60>
 800a5a6:	e001      	b.n	800a5ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e005      	b.n	800a5b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b32      	cmp	r3, #50	; 0x32
 800a5b0:	d101      	bne.n	800a5b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e000      	b.n	800a5b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b086      	sub	sp, #24
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5da:	2300      	movs	r3, #0
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	e009      	b.n	800a5f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	3340      	adds	r3, #64	; 0x40
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	613b      	str	r3, [r7, #16]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2b0e      	cmp	r3, #14
 800a5f8:	d9f2      	bls.n	800a5e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d11c      	bne.n	800a63a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a60e:	f043 0302 	orr.w	r3, r3, #2
 800a612:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	e005      	b.n	800a646 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a64c:	461a      	mov	r2, r3
 800a64e:	2300      	movs	r3, #0
 800a650:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a658:	4619      	mov	r1, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a660:	461a      	mov	r2, r3
 800a662:	680b      	ldr	r3, [r1, #0]
 800a664:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d10c      	bne.n	800a686 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a672:	2100      	movs	r1, #0
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f961 	bl	800a93c <USB_SetDevSpeed>
 800a67a:	e008      	b.n	800a68e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a67c:	2101      	movs	r1, #1
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f95c 	bl	800a93c <USB_SetDevSpeed>
 800a684:	e003      	b.n	800a68e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a686:	2103      	movs	r1, #3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f957 	bl	800a93c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a68e:	2110      	movs	r1, #16
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f8f3 	bl	800a87c <USB_FlushTxFifo>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f91d 	bl	800a8e0 <USB_FlushRxFifo>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]
 800a6d8:	e043      	b.n	800a762 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6f0:	d118      	bne.n	800a724 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a704:	461a      	mov	r2, r3
 800a706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	e013      	b.n	800a736 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71a:	461a      	mov	r2, r3
 800a71c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e008      	b.n	800a736 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a730:	461a      	mov	r2, r3
 800a732:	2300      	movs	r3, #0
 800a734:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a742:	461a      	mov	r2, r3
 800a744:	2300      	movs	r3, #0
 800a746:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	461a      	mov	r2, r3
 800a756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a75a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3301      	adds	r3, #1
 800a760:	613b      	str	r3, [r7, #16]
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	429a      	cmp	r2, r3
 800a768:	d3b7      	bcc.n	800a6da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a76a:	2300      	movs	r3, #0
 800a76c:	613b      	str	r3, [r7, #16]
 800a76e:	e043      	b.n	800a7f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a786:	d118      	bne.n	800a7ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10a      	bne.n	800a7a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79a:	461a      	mov	r2, r3
 800a79c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e013      	b.n	800a7cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	e008      	b.n	800a7cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d8:	461a      	mov	r2, r3
 800a7da:	2300      	movs	r3, #0
 800a7dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	613b      	str	r3, [r7, #16]
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d3b7      	bcc.n	800a770 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a80e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a812:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a820:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	2b00      	cmp	r3, #0
 800a826:	d105      	bne.n	800a834 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	f043 0210 	orr.w	r2, r3, #16
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699a      	ldr	r2, [r3, #24]
 800a838:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <USB_DevInit+0x2b4>)
 800a83a:	4313      	orrs	r3, r2
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	f043 0208 	orr.w	r2, r3, #8
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a854:	2b01      	cmp	r3, #1
 800a856:	d105      	bne.n	800a864 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699a      	ldr	r2, [r3, #24]
 800a85c:	4b06      	ldr	r3, [pc, #24]	; (800a878 <USB_DevInit+0x2b8>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a870:	b004      	add	sp, #16
 800a872:	4770      	bx	lr
 800a874:	803c3800 	.word	0x803c3800
 800a878:	40000004 	.word	0x40000004

0800a87c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a886:	2300      	movs	r3, #0
 800a888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	4a12      	ldr	r2, [pc, #72]	; (800a8dc <USB_FlushTxFifo+0x60>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d901      	bls.n	800a89a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e01a      	b.n	800a8d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	daf3      	bge.n	800a88a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	019b      	lsls	r3, r3, #6
 800a8aa:	f043 0220 	orr.w	r2, r3, #32
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	4a08      	ldr	r2, [pc, #32]	; (800a8dc <USB_FlushTxFifo+0x60>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d901      	bls.n	800a8c2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e006      	b.n	800a8d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d0f1      	beq.n	800a8b2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	00030d40 	.word	0x00030d40

0800a8e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	4a11      	ldr	r2, [pc, #68]	; (800a938 <USB_FlushRxFifo+0x58>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d901      	bls.n	800a8fc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e017      	b.n	800a92c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	daf3      	bge.n	800a8ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2210      	movs	r2, #16
 800a90c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3301      	adds	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	4a08      	ldr	r2, [pc, #32]	; (800a938 <USB_FlushRxFifo+0x58>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d901      	bls.n	800a91e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e006      	b.n	800a92c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	f003 0310 	and.w	r3, r3, #16
 800a926:	2b10      	cmp	r3, #16
 800a928:	d0f1      	beq.n	800a90e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	00030d40 	.word	0x00030d40

0800a93c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	68f9      	ldr	r1, [r7, #12]
 800a958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a95c:	4313      	orrs	r3, r2
 800a95e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a96e:	b480      	push	{r7}
 800a970:	b087      	sub	sp, #28
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f003 0306 	and.w	r3, r3, #6
 800a986:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]
 800a992:	e00a      	b.n	800a9aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b02      	cmp	r3, #2
 800a998:	d002      	beq.n	800a9a0 <USB_GetDevSpeed+0x32>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b06      	cmp	r3, #6
 800a99e:	d102      	bne.n	800a9a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	75fb      	strb	r3, [r7, #23]
 800a9a4:	e001      	b.n	800a9aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a9a6:	230f      	movs	r3, #15
 800a9a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	371c      	adds	r7, #28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	785b      	ldrb	r3, [r3, #1]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d139      	bne.n	800aa48 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	69da      	ldr	r2, [r3, #28]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	f003 030f 	and.w	r3, r3, #15
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	68f9      	ldr	r1, [r7, #12]
 800a9ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d153      	bne.n	800aab4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	78db      	ldrb	r3, [r3, #3]
 800aa26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	059b      	lsls	r3, r3, #22
 800aa2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa30:	431a      	orrs	r2, r3
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	0159      	lsls	r1, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	440b      	add	r3, r1
 800aa3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4b20      	ldr	r3, [pc, #128]	; (800aac4 <USB_ActivateEndpoint+0x10c>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	600b      	str	r3, [r1, #0]
 800aa46:	e035      	b.n	800aab4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4e:	69da      	ldr	r2, [r3, #28]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	f003 030f 	and.w	r3, r3, #15
 800aa58:	2101      	movs	r1, #1
 800aa5a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa5e:	041b      	lsls	r3, r3, #16
 800aa60:	68f9      	ldr	r1, [r7, #12]
 800aa62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa66:	4313      	orrs	r3, r2
 800aa68:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d119      	bne.n	800aab4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	78db      	ldrb	r3, [r3, #3]
 800aa9a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	0159      	lsls	r1, r3, #5
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	440b      	add	r3, r1
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaac:	4619      	mov	r1, r3
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <USB_ActivateEndpoint+0x10c>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	10008000 	.word	0x10008000

0800aac8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	785b      	ldrb	r3, [r3, #1]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d161      	bne.n	800aba8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aafa:	d11f      	bne.n	800ab3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	0151      	lsls	r1, r2, #5
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	440a      	add	r2, r1
 800ab12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	0151      	lsls	r1, r2, #5
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	440a      	add	r2, r1
 800ab32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	f003 030f 	and.w	r3, r3, #15
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	43db      	mvns	r3, r3
 800ab56:	68f9      	ldr	r1, [r7, #12]
 800ab58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab66:	69da      	ldr	r2, [r3, #28]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	2101      	movs	r1, #1
 800ab72:	fa01 f303 	lsl.w	r3, r1, r3
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	43db      	mvns	r3, r3
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab80:	4013      	ands	r3, r2
 800ab82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	0159      	lsls	r1, r3, #5
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	440b      	add	r3, r1
 800ab9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4b35      	ldr	r3, [pc, #212]	; (800ac78 <USB_DeactivateEndpoint+0x1b0>)
 800aba2:	4013      	ands	r3, r2
 800aba4:	600b      	str	r3, [r1, #0]
 800aba6:	e060      	b.n	800ac6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abbe:	d11f      	bne.n	800ac00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	0151      	lsls	r1, r2, #5
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	440a      	add	r2, r1
 800abd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	0151      	lsls	r1, r2, #5
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	440a      	add	r2, r1
 800abf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f003 030f 	and.w	r3, r3, #15
 800ac10:	2101      	movs	r1, #1
 800ac12:	fa01 f303 	lsl.w	r3, r1, r3
 800ac16:	041b      	lsls	r3, r3, #16
 800ac18:	43db      	mvns	r3, r3
 800ac1a:	68f9      	ldr	r1, [r7, #12]
 800ac1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac20:	4013      	ands	r3, r2
 800ac22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2a:	69da      	ldr	r2, [r3, #28]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	f003 030f 	and.w	r3, r3, #15
 800ac34:	2101      	movs	r1, #1
 800ac36:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3a:	041b      	lsls	r3, r3, #16
 800ac3c:	43db      	mvns	r3, r3
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac44:	4013      	ands	r3, r2
 800ac46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	015a      	lsls	r2, r3, #5
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	0159      	lsls	r1, r3, #5
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	440b      	add	r3, r1
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac62:	4619      	mov	r1, r3
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <USB_DeactivateEndpoint+0x1b4>)
 800ac66:	4013      	ands	r3, r2
 800ac68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	ec337800 	.word	0xec337800
 800ac7c:	eff37800 	.word	0xeff37800

0800ac80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08a      	sub	sp, #40	; 0x28
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	785b      	ldrb	r3, [r3, #1]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	f040 8163 	bne.w	800af68 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d132      	bne.n	800ad10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	015a      	lsls	r2, r3, #5
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	4413      	add	r3, r2
 800acb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb6:	691a      	ldr	r2, [r3, #16]
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	0159      	lsls	r1, r3, #5
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	440b      	add	r3, r1
 800acc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc4:	4619      	mov	r1, r3
 800acc6:	4ba5      	ldr	r3, [pc, #660]	; (800af5c <USB_EPStartXfer+0x2dc>)
 800acc8:	4013      	ands	r3, r2
 800acca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	0151      	lsls	r1, r2, #5
 800acde:	69fa      	ldr	r2, [r7, #28]
 800ace0:	440a      	add	r2, r1
 800ace2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf8:	691a      	ldr	r2, [r3, #16]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	0159      	lsls	r1, r3, #5
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	440b      	add	r3, r1
 800ad02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad06:	4619      	mov	r1, r3
 800ad08:	4b95      	ldr	r3, [pc, #596]	; (800af60 <USB_EPStartXfer+0x2e0>)
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	610b      	str	r3, [r1, #16]
 800ad0e:	e074      	b.n	800adfa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1c:	691a      	ldr	r2, [r3, #16]
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	0159      	lsls	r1, r3, #5
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	440b      	add	r3, r1
 800ad26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4b8c      	ldr	r3, [pc, #560]	; (800af60 <USB_EPStartXfer+0x2e0>)
 800ad2e:	4013      	ands	r3, r2
 800ad30:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3e:	691a      	ldr	r2, [r3, #16]
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	0159      	lsls	r1, r3, #5
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	440b      	add	r3, r1
 800ad48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4b83      	ldr	r3, [pc, #524]	; (800af5c <USB_EPStartXfer+0x2dc>)
 800ad50:	4013      	ands	r3, r2
 800ad52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad60:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	6959      	ldr	r1, [r3, #20]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	440b      	add	r3, r1
 800ad6c:	1e59      	subs	r1, r3, #1
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad76:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad78:	4b7a      	ldr	r3, [pc, #488]	; (800af64 <USB_EPStartXfer+0x2e4>)
 800ad7a:	400b      	ands	r3, r1
 800ad7c:	69b9      	ldr	r1, [r7, #24]
 800ad7e:	0148      	lsls	r0, r1, #5
 800ad80:	69f9      	ldr	r1, [r7, #28]
 800ad82:	4401      	add	r1, r0
 800ad84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad98:	691a      	ldr	r2, [r3, #16]
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ada2:	69b9      	ldr	r1, [r7, #24]
 800ada4:	0148      	lsls	r0, r1, #5
 800ada6:	69f9      	ldr	r1, [r7, #28]
 800ada8:	4401      	add	r1, r0
 800adaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800adae:	4313      	orrs	r3, r2
 800adb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	78db      	ldrb	r3, [r3, #3]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d11f      	bne.n	800adfa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	0151      	lsls	r1, r2, #5
 800adcc:	69fa      	ldr	r2, [r7, #28]
 800adce:	440a      	add	r2, r1
 800add0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800add4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800add8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	015a      	lsls	r2, r3, #5
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	4413      	add	r3, r2
 800ade2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	0151      	lsls	r1, r2, #5
 800adec:	69fa      	ldr	r2, [r7, #28]
 800adee:	440a      	add	r2, r1
 800adf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adf8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d14b      	bne.n	800ae98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d009      	beq.n	800ae1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae14:	461a      	mov	r2, r3
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	78db      	ldrb	r3, [r3, #3]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d128      	bne.n	800ae76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d110      	bne.n	800ae56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	e00f      	b.n	800ae76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	69ba      	ldr	r2, [r7, #24]
 800ae66:	0151      	lsls	r1, r2, #5
 800ae68:	69fa      	ldr	r2, [r7, #28]
 800ae6a:	440a      	add	r2, r1
 800ae6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	69ba      	ldr	r2, [r7, #24]
 800ae86:	0151      	lsls	r1, r2, #5
 800ae88:	69fa      	ldr	r2, [r7, #28]
 800ae8a:	440a      	add	r2, r1
 800ae8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	e133      	b.n	800b100 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	0151      	lsls	r1, r2, #5
 800aeaa:	69fa      	ldr	r2, [r7, #28]
 800aeac:	440a      	add	r2, r1
 800aeae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aeb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	78db      	ldrb	r3, [r3, #3]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d015      	beq.n	800aeec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 811b 	beq.w	800b100 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	f003 030f 	and.w	r3, r3, #15
 800aeda:	2101      	movs	r1, #1
 800aedc:	fa01 f303 	lsl.w	r3, r1, r3
 800aee0:	69f9      	ldr	r1, [r7, #28]
 800aee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aee6:	4313      	orrs	r3, r2
 800aee8:	634b      	str	r3, [r1, #52]	; 0x34
 800aeea:	e109      	b.n	800b100 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d110      	bne.n	800af1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	4413      	add	r3, r2
 800af04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	0151      	lsls	r1, r2, #5
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	440a      	add	r2, r1
 800af12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af1a:	6013      	str	r3, [r2, #0]
 800af1c:	e00f      	b.n	800af3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	015a      	lsls	r2, r3, #5
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	4413      	add	r3, r2
 800af26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	69ba      	ldr	r2, [r7, #24]
 800af2e:	0151      	lsls	r1, r2, #5
 800af30:	69fa      	ldr	r2, [r7, #28]
 800af32:	440a      	add	r2, r1
 800af34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	68d9      	ldr	r1, [r3, #12]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	781a      	ldrb	r2, [r3, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	b298      	uxth	r0, r3
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	4603      	mov	r3, r0
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 fa38 	bl	800b3c8 <USB_WritePacket>
 800af58:	e0d2      	b.n	800b100 <USB_EPStartXfer+0x480>
 800af5a:	bf00      	nop
 800af5c:	e007ffff 	.word	0xe007ffff
 800af60:	fff80000 	.word	0xfff80000
 800af64:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	015a      	lsls	r2, r3, #5
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	4413      	add	r3, r2
 800af70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af74:	691a      	ldr	r2, [r3, #16]
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	0159      	lsls	r1, r3, #5
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	440b      	add	r3, r1
 800af7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af82:	4619      	mov	r1, r3
 800af84:	4b61      	ldr	r3, [pc, #388]	; (800b10c <USB_EPStartXfer+0x48c>)
 800af86:	4013      	ands	r3, r2
 800af88:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	015a      	lsls	r2, r3, #5
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	4413      	add	r3, r2
 800af92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af96:	691a      	ldr	r2, [r3, #16]
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	0159      	lsls	r1, r3, #5
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	440b      	add	r3, r1
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	4619      	mov	r1, r3
 800afa6:	4b5a      	ldr	r3, [pc, #360]	; (800b110 <USB_EPStartXfer+0x490>)
 800afa8:	4013      	ands	r3, r2
 800afaa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d123      	bne.n	800affc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc0:	691a      	ldr	r2, [r3, #16]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afca:	69b9      	ldr	r1, [r7, #24]
 800afcc:	0148      	lsls	r0, r1, #5
 800afce:	69f9      	ldr	r1, [r7, #28]
 800afd0:	4401      	add	r1, r0
 800afd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afd6:	4313      	orrs	r3, r2
 800afd8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	0151      	lsls	r1, r2, #5
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	440a      	add	r2, r1
 800aff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aff8:	6113      	str	r3, [r2, #16]
 800affa:	e033      	b.n	800b064 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	695a      	ldr	r2, [r3, #20]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	4413      	add	r3, r2
 800b006:	1e5a      	subs	r2, r3, #1
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b010:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	8afb      	ldrh	r3, [r7, #22]
 800b022:	04d9      	lsls	r1, r3, #19
 800b024:	4b3b      	ldr	r3, [pc, #236]	; (800b114 <USB_EPStartXfer+0x494>)
 800b026:	400b      	ands	r3, r1
 800b028:	69b9      	ldr	r1, [r7, #24]
 800b02a:	0148      	lsls	r0, r1, #5
 800b02c:	69f9      	ldr	r1, [r7, #28]
 800b02e:	4401      	add	r1, r0
 800b030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b034:	4313      	orrs	r3, r2
 800b036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b044:	691a      	ldr	r2, [r3, #16]
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	8af9      	ldrh	r1, [r7, #22]
 800b04c:	fb01 f303 	mul.w	r3, r1, r3
 800b050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b054:	69b9      	ldr	r1, [r7, #24]
 800b056:	0148      	lsls	r0, r1, #5
 800b058:	69f9      	ldr	r1, [r7, #28]
 800b05a:	4401      	add	r1, r0
 800b05c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b060:	4313      	orrs	r3, r2
 800b062:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d10d      	bne.n	800b086 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d009      	beq.n	800b086 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	68d9      	ldr	r1, [r3, #12]
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b082:	460a      	mov	r2, r1
 800b084:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	78db      	ldrb	r3, [r3, #3]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d128      	bne.n	800b0e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d110      	bne.n	800b0c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	69ba      	ldr	r2, [r7, #24]
 800b0ae:	0151      	lsls	r1, r2, #5
 800b0b0:	69fa      	ldr	r2, [r7, #28]
 800b0b2:	440a      	add	r2, r1
 800b0b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	e00f      	b.n	800b0e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	69fa      	ldr	r2, [r7, #28]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	0151      	lsls	r1, r2, #5
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	440a      	add	r2, r1
 800b0f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3720      	adds	r7, #32
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	fff80000 	.word	0xfff80000
 800b110:	e007ffff 	.word	0xe007ffff
 800b114:	1ff80000 	.word	0x1ff80000

0800b118 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b118:	b480      	push	{r7}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	785b      	ldrb	r3, [r3, #1]
 800b134:	2b01      	cmp	r3, #1
 800b136:	f040 80cd 	bne.w	800b2d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d132      	bne.n	800b1a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	0159      	lsls	r1, r3, #5
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	440b      	add	r3, r1
 800b158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15c:	4619      	mov	r1, r3
 800b15e:	4b98      	ldr	r3, [pc, #608]	; (800b3c0 <USB_EP0StartXfer+0x2a8>)
 800b160:	4013      	ands	r3, r2
 800b162:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	015a      	lsls	r2, r3, #5
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	4413      	add	r3, r2
 800b16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	0151      	lsls	r1, r2, #5
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	440a      	add	r2, r1
 800b17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b17e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	015a      	lsls	r2, r3, #5
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	4413      	add	r3, r2
 800b18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b190:	691a      	ldr	r2, [r3, #16]
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	0159      	lsls	r1, r3, #5
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	440b      	add	r3, r1
 800b19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4b88      	ldr	r3, [pc, #544]	; (800b3c4 <USB_EP0StartXfer+0x2ac>)
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	610b      	str	r3, [r1, #16]
 800b1a6:	e04e      	b.n	800b246 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b4:	691a      	ldr	r2, [r3, #16]
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	0159      	lsls	r1, r3, #5
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	440b      	add	r3, r1
 800b1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4b7f      	ldr	r3, [pc, #508]	; (800b3c4 <USB_EP0StartXfer+0x2ac>)
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d6:	691a      	ldr	r2, [r3, #16]
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	0159      	lsls	r1, r3, #5
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	440b      	add	r3, r1
 800b1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	4b76      	ldr	r3, [pc, #472]	; (800b3c0 <USB_EP0StartXfer+0x2a8>)
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	695a      	ldr	r2, [r3, #20]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d903      	bls.n	800b200 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b21a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b21e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	015a      	lsls	r2, r3, #5
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	4413      	add	r3, r2
 800b228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22c:	691a      	ldr	r2, [r3, #16]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b236:	6939      	ldr	r1, [r7, #16]
 800b238:	0148      	lsls	r0, r1, #5
 800b23a:	6979      	ldr	r1, [r7, #20]
 800b23c:	4401      	add	r1, r0
 800b23e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b242:	4313      	orrs	r3, r2
 800b244:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b246:	79fb      	ldrb	r3, [r7, #7]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d11e      	bne.n	800b28a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d009      	beq.n	800b268 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b260:	461a      	mov	r2, r3
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	0151      	lsls	r1, r2, #5
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	440a      	add	r2, r1
 800b27e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	e092      	b.n	800b3b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	015a      	lsls	r2, r3, #5
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	4413      	add	r3, r2
 800b292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	0151      	lsls	r1, r2, #5
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	440a      	add	r2, r1
 800b2a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d07e      	beq.n	800b3b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	f003 030f 	and.w	r3, r3, #15
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2c8:	6979      	ldr	r1, [r7, #20]
 800b2ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	634b      	str	r3, [r1, #52]	; 0x34
 800b2d2:	e06d      	b.n	800b3b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e0:	691a      	ldr	r2, [r3, #16]
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	0159      	lsls	r1, r3, #5
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	440b      	add	r3, r1
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4b34      	ldr	r3, [pc, #208]	; (800b3c4 <USB_EP0StartXfer+0x2ac>)
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	0159      	lsls	r1, r3, #5
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	440b      	add	r3, r1
 800b30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b310:	4619      	mov	r1, r3
 800b312:	4b2b      	ldr	r3, [pc, #172]	; (800b3c0 <USB_EP0StartXfer+0x2a8>)
 800b314:	4013      	ands	r3, r2
 800b316:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	689a      	ldr	r2, [r3, #8]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	0151      	lsls	r1, r2, #5
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	440a      	add	r2, r1
 800b33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b346:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b354:	691a      	ldr	r2, [r3, #16]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b35e:	6939      	ldr	r1, [r7, #16]
 800b360:	0148      	lsls	r0, r1, #5
 800b362:	6979      	ldr	r1, [r7, #20]
 800b364:	4401      	add	r1, r0
 800b366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b36a:	4313      	orrs	r3, r2
 800b36c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d10d      	bne.n	800b390 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d009      	beq.n	800b390 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	68d9      	ldr	r1, [r3, #12]
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38c:	460a      	mov	r2, r1
 800b38e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	0151      	lsls	r1, r2, #5
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	440a      	add	r2, r1
 800b3a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	e007ffff 	.word	0xe007ffff
 800b3c4:	fff80000 	.word	0xfff80000

0800b3c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b089      	sub	sp, #36	; 0x24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	71fb      	strb	r3, [r7, #7]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b3e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d123      	bne.n	800b436 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b3ee:	88bb      	ldrh	r3, [r7, #4]
 800b3f0:	3303      	adds	r3, #3
 800b3f2:	089b      	lsrs	r3, r3, #2
 800b3f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	e018      	b.n	800b42e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	031a      	lsls	r2, r3, #12
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	4413      	add	r3, r2
 800b404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b408:	461a      	mov	r2, r3
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	3301      	adds	r3, #1
 800b414:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	3301      	adds	r3, #1
 800b41a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	3301      	adds	r3, #1
 800b420:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	3301      	adds	r3, #1
 800b426:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	3301      	adds	r3, #1
 800b42c:	61bb      	str	r3, [r7, #24]
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	429a      	cmp	r2, r3
 800b434:	d3e2      	bcc.n	800b3fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3724      	adds	r7, #36	; 0x24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b444:	b480      	push	{r7}
 800b446:	b08b      	sub	sp, #44	; 0x2c
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b45a:	88fb      	ldrh	r3, [r7, #6]
 800b45c:	089b      	lsrs	r3, r3, #2
 800b45e:	b29b      	uxth	r3, r3
 800b460:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b462:	88fb      	ldrh	r3, [r7, #6]
 800b464:	f003 0303 	and.w	r3, r3, #3
 800b468:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b46a:	2300      	movs	r3, #0
 800b46c:	623b      	str	r3, [r7, #32]
 800b46e:	e014      	b.n	800b49a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	3301      	adds	r3, #1
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	3301      	adds	r3, #1
 800b486:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	3301      	adds	r3, #1
 800b48c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	3301      	adds	r3, #1
 800b492:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	3301      	adds	r3, #1
 800b498:	623b      	str	r3, [r7, #32]
 800b49a:	6a3a      	ldr	r2, [r7, #32]
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d3e6      	bcc.n	800b470 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b4a2:	8bfb      	ldrh	r3, [r7, #30]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01e      	beq.n	800b4e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f107 0310 	add.w	r3, r7, #16
 800b4b8:	6812      	ldr	r2, [r2, #0]
 800b4ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	701a      	strb	r2, [r3, #0]
      i++;
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b4da:	8bfb      	ldrh	r3, [r7, #30]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b4e0:	8bfb      	ldrh	r3, [r7, #30]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1ea      	bne.n	800b4bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	372c      	adds	r7, #44	; 0x2c
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	785b      	ldrb	r3, [r3, #1]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d12c      	bne.n	800b56a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	db12      	blt.n	800b548 <USB_EPSetStall+0x54>
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00f      	beq.n	800b548 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	0151      	lsls	r1, r2, #5
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	440a      	add	r2, r1
 800b53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b542:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b546:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	0151      	lsls	r1, r2, #5
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	440a      	add	r2, r1
 800b55e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b562:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	e02b      	b.n	800b5c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	4413      	add	r3, r2
 800b572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	db12      	blt.n	800b5a2 <USB_EPSetStall+0xae>
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00f      	beq.n	800b5a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	440a      	add	r2, r1
 800b598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b59c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b5a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	015a      	lsls	r2, r3, #5
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	0151      	lsls	r1, r2, #5
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	440a      	add	r2, r1
 800b5b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	785b      	ldrb	r3, [r3, #1]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d128      	bne.n	800b63e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	0151      	lsls	r1, r2, #5
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	440a      	add	r2, r1
 800b602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b606:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b60a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	78db      	ldrb	r3, [r3, #3]
 800b610:	2b03      	cmp	r3, #3
 800b612:	d003      	beq.n	800b61c <USB_EPClearStall+0x4c>
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	78db      	ldrb	r3, [r3, #3]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d138      	bne.n	800b68e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	e027      	b.n	800b68e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	015a      	lsls	r2, r3, #5
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	4413      	add	r3, r2
 800b646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	0151      	lsls	r1, r2, #5
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	440a      	add	r2, r1
 800b654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b658:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b65c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	78db      	ldrb	r3, [r3, #3]
 800b662:	2b03      	cmp	r3, #3
 800b664:	d003      	beq.n	800b66e <USB_EPClearStall+0x9e>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	78db      	ldrb	r3, [r3, #3]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d10f      	bne.n	800b68e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b68c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b6be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	78fb      	ldrb	r3, [r7, #3]
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b6d0:	68f9      	ldr	r1, [r7, #12]
 800b6d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b702:	f023 0303 	bic.w	r3, r3, #3
 800b706:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b716:	f023 0302 	bic.w	r3, r3, #2
 800b71a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b085      	sub	sp, #20
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b744:	f023 0303 	bic.w	r3, r3, #3
 800b748:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b758:	f043 0302 	orr.w	r3, r3, #2
 800b75c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3714      	adds	r7, #20
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	4013      	ands	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b784:	68fb      	ldr	r3, [r7, #12]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b792:	b480      	push	{r7}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ae:	69db      	ldr	r3, [r3, #28]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	0c1b      	lsrs	r3, r3, #16
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b085      	sub	sp, #20
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	b29b      	uxth	r3, r3
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b80a:	78fb      	ldrb	r3, [r7, #3]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	4013      	ands	r3, r2
 800b826:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b828:	68bb      	ldr	r3, [r7, #8]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3714      	adds	r7, #20
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b836:	b480      	push	{r7}
 800b838:	b087      	sub	sp, #28
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	460b      	mov	r3, r1
 800b840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b858:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	f003 030f 	and.w	r3, r3, #15
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	fa22 f303 	lsr.w	r3, r2, r3
 800b866:	01db      	lsls	r3, r3, #7
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b870:	78fb      	ldrb	r3, [r7, #3]
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	4413      	add	r3, r2
 800b878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	4013      	ands	r3, r2
 800b882:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b884:	68bb      	ldr	r3, [r7, #8]
}
 800b886:	4618      	mov	r0, r3
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b892:	b480      	push	{r7}
 800b894:	b083      	sub	sp, #12
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	f003 0301 	and.w	r3, r3, #1
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <USB_ActivateSetup+0x44>)
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	fffff800 	.word	0xfffff800

0800b8f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	460b      	mov	r3, r1
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	333c      	adds	r3, #60	; 0x3c
 800b90e:	3304      	adds	r3, #4
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	4a26      	ldr	r2, [pc, #152]	; (800b9b0 <USB_EP0_OutStart+0xb8>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d90a      	bls.n	800b932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b92c:	d101      	bne.n	800b932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	e037      	b.n	800b9a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b938:	461a      	mov	r2, r3
 800b93a:	2300      	movs	r3, #0
 800b93c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b94c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b960:	f043 0318 	orr.w	r3, r3, #24
 800b964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b97a:	7afb      	ldrb	r3, [r7, #11]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d10f      	bne.n	800b9a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b986:	461a      	mov	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b99a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b99e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	4f54300a 	.word	0x4f54300a

0800b9b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <USB_CoreReset+0x60>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d901      	bls.n	800b9d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	e01a      	b.n	800ba06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	daf3      	bge.n	800b9c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	f043 0201 	orr.w	r2, r3, #1
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	4a09      	ldr	r2, [pc, #36]	; (800ba14 <USB_CoreReset+0x60>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d901      	bls.n	800b9f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	e006      	b.n	800ba06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d0f1      	beq.n	800b9e8 <USB_CoreReset+0x34>

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	00030d40 	.word	0x00030d40

0800ba18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ba24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ba28:	f002 faa2 	bl	800df70 <USBD_static_malloc>
 800ba2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d105      	bne.n	800ba40 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	e066      	b.n	800bb0e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	7c1b      	ldrb	r3, [r3, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d119      	bne.n	800ba84 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba54:	2202      	movs	r2, #2
 800ba56:	2181      	movs	r1, #129	; 0x81
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f002 f966 	bl	800dd2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2201      	movs	r2, #1
 800ba62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba68:	2202      	movs	r2, #2
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f002 f95c 	bl	800dd2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2210      	movs	r2, #16
 800ba7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ba82:	e016      	b.n	800bab2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba84:	2340      	movs	r3, #64	; 0x40
 800ba86:	2202      	movs	r2, #2
 800ba88:	2181      	movs	r1, #129	; 0x81
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f002 f94d 	bl	800dd2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba96:	2340      	movs	r3, #64	; 0x40
 800ba98:	2202      	movs	r2, #2
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f002 f944 	bl	800dd2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2210      	movs	r2, #16
 800baae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bab2:	2308      	movs	r3, #8
 800bab4:	2203      	movs	r2, #3
 800bab6:	2182      	movs	r1, #130	; 0x82
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f002 f936 	bl	800dd2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2200      	movs	r2, #0
 800badc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	7c1b      	ldrb	r3, [r3, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d109      	bne.n	800bafc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800baee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baf2:	2101      	movs	r1, #1
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f002 fa07 	bl	800df08 <USBD_LL_PrepareReceive>
 800bafa:	e007      	b.n	800bb0c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb02:	2340      	movs	r3, #64	; 0x40
 800bb04:	2101      	movs	r1, #1
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f002 f9fe 	bl	800df08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bb22:	2181      	movs	r1, #129	; 0x81
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f002 f926 	bl	800dd76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bb30:	2101      	movs	r1, #1
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f002 f91f 	bl	800dd76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bb40:	2182      	movs	r1, #130	; 0x82
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f002 f917 	bl	800dd76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00e      	beq.n	800bb80 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb72:	4618      	mov	r0, r3
 800bb74:	f002 fa0a 	bl	800df8c <USBD_static_free>
    pdev->pClassData = NULL;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bba2:	2300      	movs	r3, #0
 800bba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	e0af      	b.n	800bd14 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d03f      	beq.n	800bc40 <USBD_CDC_Setup+0xb4>
 800bbc0:	2b20      	cmp	r3, #32
 800bbc2:	f040 809f 	bne.w	800bd04 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	88db      	ldrh	r3, [r3, #6]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d02e      	beq.n	800bc2c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	da16      	bge.n	800bc06 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bbe4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	88d2      	ldrh	r2, [r2, #6]
 800bbea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	88db      	ldrh	r3, [r3, #6]
 800bbf0:	2b07      	cmp	r3, #7
 800bbf2:	bf28      	it	cs
 800bbf4:	2307      	movcs	r3, #7
 800bbf6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	89fa      	ldrh	r2, [r7, #14]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f001 fb19 	bl	800d236 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bc04:	e085      	b.n	800bd12 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	785a      	ldrb	r2, [r3, #1]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	88db      	ldrh	r3, [r3, #6]
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bc1c:	6939      	ldr	r1, [r7, #16]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	88db      	ldrh	r3, [r3, #6]
 800bc22:	461a      	mov	r2, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 fb32 	bl	800d28e <USBD_CtlPrepareRx>
      break;
 800bc2a:	e072      	b.n	800bd12 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	7850      	ldrb	r0, [r2, #1]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	6839      	ldr	r1, [r7, #0]
 800bc3c:	4798      	blx	r3
      break;
 800bc3e:	e068      	b.n	800bd12 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	785b      	ldrb	r3, [r3, #1]
 800bc44:	2b0b      	cmp	r3, #11
 800bc46:	d852      	bhi.n	800bcee <USBD_CDC_Setup+0x162>
 800bc48:	a201      	add	r2, pc, #4	; (adr r2, 800bc50 <USBD_CDC_Setup+0xc4>)
 800bc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4e:	bf00      	nop
 800bc50:	0800bc81 	.word	0x0800bc81
 800bc54:	0800bcfd 	.word	0x0800bcfd
 800bc58:	0800bcef 	.word	0x0800bcef
 800bc5c:	0800bcef 	.word	0x0800bcef
 800bc60:	0800bcef 	.word	0x0800bcef
 800bc64:	0800bcef 	.word	0x0800bcef
 800bc68:	0800bcef 	.word	0x0800bcef
 800bc6c:	0800bcef 	.word	0x0800bcef
 800bc70:	0800bcef 	.word	0x0800bcef
 800bc74:	0800bcef 	.word	0x0800bcef
 800bc78:	0800bcab 	.word	0x0800bcab
 800bc7c:	0800bcd5 	.word	0x0800bcd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d107      	bne.n	800bc9c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc8c:	f107 030a 	add.w	r3, r7, #10
 800bc90:	2202      	movs	r2, #2
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f001 face 	bl	800d236 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc9a:	e032      	b.n	800bd02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f001 fa58 	bl	800d154 <USBD_CtlError>
            ret = USBD_FAIL;
 800bca4:	2303      	movs	r3, #3
 800bca6:	75fb      	strb	r3, [r7, #23]
          break;
 800bca8:	e02b      	b.n	800bd02 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d107      	bne.n	800bcc6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bcb6:	f107 030d 	add.w	r3, r7, #13
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 fab9 	bl	800d236 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcc4:	e01d      	b.n	800bd02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f001 fa43 	bl	800d154 <USBD_CtlError>
            ret = USBD_FAIL;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	75fb      	strb	r3, [r7, #23]
          break;
 800bcd2:	e016      	b.n	800bd02 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d00f      	beq.n	800bd00 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 fa36 	bl	800d154 <USBD_CtlError>
            ret = USBD_FAIL;
 800bce8:	2303      	movs	r3, #3
 800bcea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bcec:	e008      	b.n	800bd00 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f001 fa2f 	bl	800d154 <USBD_CtlError>
          ret = USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	75fb      	strb	r3, [r7, #23]
          break;
 800bcfa:	e002      	b.n	800bd02 <USBD_CDC_Setup+0x176>
          break;
 800bcfc:	bf00      	nop
 800bcfe:	e008      	b.n	800bd12 <USBD_CDC_Setup+0x186>
          break;
 800bd00:	bf00      	nop
      }
      break;
 800bd02:	e006      	b.n	800bd12 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f001 fa24 	bl	800d154 <USBD_CtlError>
      ret = USBD_FAIL;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd10:	bf00      	nop
  }

  return (uint8_t)ret;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	e04f      	b.n	800bdde <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd46:	78fa      	ldrb	r2, [r7, #3]
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	440b      	add	r3, r1
 800bd54:	3318      	adds	r3, #24
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d029      	beq.n	800bdb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bd5c:	78fa      	ldrb	r2, [r7, #3]
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	4613      	mov	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4413      	add	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	440b      	add	r3, r1
 800bd6a:	3318      	adds	r3, #24
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	78f9      	ldrb	r1, [r7, #3]
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	460b      	mov	r3, r1
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	1a5b      	subs	r3, r3, r1
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4403      	add	r3, r0
 800bd7c:	3344      	adds	r3, #68	; 0x44
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd84:	fb03 f301 	mul.w	r3, r3, r1
 800bd88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d110      	bne.n	800bdb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bd8e:	78fa      	ldrb	r2, [r7, #3]
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	440b      	add	r3, r1
 800bd9c:	3318      	adds	r3, #24
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bda2:	78f9      	ldrb	r1, [r7, #3]
 800bda4:	2300      	movs	r3, #0
 800bda6:	2200      	movs	r2, #0
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f002 f88c 	bl	800dec6 <USBD_LL_Transmit>
 800bdae:	e015      	b.n	800bddc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bdd8:	78fa      	ldrb	r2, [r7, #3]
 800bdda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b084      	sub	sp, #16
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdf8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be04:	2303      	movs	r3, #3
 800be06:	e015      	b.n	800be34 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be08:	78fb      	ldrb	r3, [r7, #3]
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f002 f89c 	bl	800df4a <USBD_LL_GetRxDataSize>
 800be12:	4602      	mov	r2, r0
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800be2e:	4611      	mov	r1, r2
 800be30:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800be52:	2303      	movs	r3, #3
 800be54:	e01b      	b.n	800be8e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d015      	beq.n	800be8c <USBD_CDC_EP0_RxReady+0x50>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be66:	2bff      	cmp	r3, #255	; 0xff
 800be68:	d010      	beq.n	800be8c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800be78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be80:	b292      	uxth	r2, r2
 800be82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	22ff      	movs	r2, #255	; 0xff
 800be88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2243      	movs	r2, #67	; 0x43
 800bea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bea6:	4b03      	ldr	r3, [pc, #12]	; (800beb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	24000098 	.word	0x24000098

0800beb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2243      	movs	r2, #67	; 0x43
 800bec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bec6:	4b03      	ldr	r3, [pc, #12]	; (800bed4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	24000054 	.word	0x24000054

0800bed8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2243      	movs	r2, #67	; 0x43
 800bee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bee6:	4b03      	ldr	r3, [pc, #12]	; (800bef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bee8:	4618      	mov	r0, r3
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	240000dc 	.word	0x240000dc

0800bef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	220a      	movs	r2, #10
 800bf04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bf06:	4b03      	ldr	r3, [pc, #12]	; (800bf14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	24000010 	.word	0x24000010

0800bf18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e004      	b.n	800bf36 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b087      	sub	sp, #28
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	60f8      	str	r0, [r7, #12]
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf54:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d101      	bne.n	800bf60 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e008      	b.n	800bf72 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	371c      	adds	r7, #28
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b085      	sub	sp, #20
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bf96:	2303      	movs	r3, #3
 800bf98:	e004      	b.n	800bfa4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	683a      	ldr	r2, [r7, #0]
 800bf9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfbe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e01a      	b.n	800c008 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d114      	bne.n	800c006 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bffa:	2181      	movs	r1, #129	; 0x81
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 ff62 	bl	800dec6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c006:	7bfb      	ldrb	r3, [r7, #15]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c01e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e016      	b.n	800c05c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	7c1b      	ldrb	r3, [r3, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d109      	bne.n	800c04a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c03c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c040:	2101      	movs	r1, #1
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f001 ff60 	bl	800df08 <USBD_LL_PrepareReceive>
 800c048:	e007      	b.n	800c05a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c050:	2340      	movs	r3, #64	; 0x40
 800c052:	2101      	movs	r1, #1
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f001 ff57 	bl	800df08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	4613      	mov	r3, r2
 800c070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c078:	2303      	movs	r3, #3
 800c07a:	e01f      	b.n	800c0bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	79fa      	ldrb	r2, [r7, #7]
 800c0ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f001 fdcf 	bl	800dc54 <USBD_LL_Init>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d101      	bne.n	800c0dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	e016      	b.n	800c10a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00b      	beq.n	800c108 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	f107 020e 	add.w	r2, r7, #14
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	4798      	blx	r3
 800c100:	4602      	mov	r2, r0
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f001 fdea 	bl	800dcf4 <USBD_LL_Start>
 800c120:	4603      	mov	r3, r0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c14c:	2303      	movs	r3, #3
 800c14e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c156:	2b00      	cmp	r3, #0
 800c158:	d009      	beq.n	800c16e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	78fa      	ldrb	r2, [r7, #3]
 800c164:	4611      	mov	r1, r2
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	4798      	blx	r3
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d007      	beq.n	800c19e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	4611      	mov	r1, r2
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	4798      	blx	r3
  }

  return USBD_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 ff90 	bl	800d0e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1dc:	f003 031f 	and.w	r3, r3, #31
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d01a      	beq.n	800c21a <USBD_LL_SetupStage+0x72>
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d822      	bhi.n	800c22e <USBD_LL_SetupStage+0x86>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <USBD_LL_SetupStage+0x4a>
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d00a      	beq.n	800c206 <USBD_LL_SetupStage+0x5e>
 800c1f0:	e01d      	b.n	800c22e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fa62 	bl	800c6c4 <USBD_StdDevReq>
 800c200:	4603      	mov	r3, r0
 800c202:	73fb      	strb	r3, [r7, #15]
      break;
 800c204:	e020      	b.n	800c248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fac6 	bl	800c7a0 <USBD_StdItfReq>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]
      break;
 800c218:	e016      	b.n	800c248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fb05 	bl	800c832 <USBD_StdEPReq>
 800c228:	4603      	mov	r3, r0
 800c22a:	73fb      	strb	r3, [r7, #15]
      break;
 800c22c:	e00c      	b.n	800c248 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 fdb9 	bl	800ddb4 <USBD_LL_StallEP>
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]
      break;
 800c246:	bf00      	nop
  }

  return ret;
 800c248:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b086      	sub	sp, #24
 800c256:	af00      	add	r7, sp, #0
 800c258:	60f8      	str	r0, [r7, #12]
 800c25a:	460b      	mov	r3, r1
 800c25c:	607a      	str	r2, [r7, #4]
 800c25e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c260:	7afb      	ldrb	r3, [r7, #11]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d138      	bne.n	800c2d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c26c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c274:	2b03      	cmp	r3, #3
 800c276:	d14a      	bne.n	800c30e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	689a      	ldr	r2, [r3, #8]
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	429a      	cmp	r2, r3
 800c282:	d913      	bls.n	800c2ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	689a      	ldr	r2, [r3, #8]
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	1ad2      	subs	r2, r2, r3
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	4293      	cmp	r3, r2
 800c29c:	bf28      	it	cs
 800c29e:	4613      	movcs	r3, r2
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6879      	ldr	r1, [r7, #4]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f001 f80f 	bl	800d2c8 <USBD_CtlContinueRx>
 800c2aa:	e030      	b.n	800c30e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d10b      	bne.n	800c2d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f001 f80a 	bl	800d2ea <USBD_CtlSendStatus>
 800c2d6:	e01a      	b.n	800c30e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d114      	bne.n	800c30e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00e      	beq.n	800c30e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	7afa      	ldrb	r2, [r7, #11]
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	4798      	blx	r3
 800c300:	4603      	mov	r3, r0
 800c302:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
 800c30c:	e000      	b.n	800c310 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	460b      	mov	r3, r1
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c326:	7afb      	ldrb	r3, [r7, #11]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d16b      	bne.n	800c404 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3314      	adds	r3, #20
 800c330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d156      	bne.n	800c3ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	689a      	ldr	r2, [r3, #8]
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	429a      	cmp	r2, r3
 800c346:	d914      	bls.n	800c372 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	1ad2      	subs	r2, r2, r3
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	461a      	mov	r2, r3
 800c35c:	6879      	ldr	r1, [r7, #4]
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f000 ff84 	bl	800d26c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c364:	2300      	movs	r3, #0
 800c366:	2200      	movs	r2, #0
 800c368:	2100      	movs	r1, #0
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f001 fdcc 	bl	800df08 <USBD_LL_PrepareReceive>
 800c370:	e03b      	b.n	800c3ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	68da      	ldr	r2, [r3, #12]
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d11c      	bne.n	800c3b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c386:	429a      	cmp	r2, r3
 800c388:	d316      	bcc.n	800c3b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c394:	429a      	cmp	r2, r3
 800c396:	d20f      	bcs.n	800c3b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c398:	2200      	movs	r2, #0
 800c39a:	2100      	movs	r1, #0
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 ff65 	bl	800d26c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f001 fda9 	bl	800df08 <USBD_LL_PrepareReceive>
 800c3b6:	e018      	b.n	800c3ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b03      	cmp	r3, #3
 800c3c2:	d10b      	bne.n	800c3dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3dc:	2180      	movs	r1, #128	; 0x80
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f001 fce8 	bl	800ddb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 ff93 	bl	800d310 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d122      	bne.n	800c43a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f7ff fe98 	bl	800c12a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c402:	e01a      	b.n	800c43a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b03      	cmp	r3, #3
 800c40e:	d114      	bne.n	800c43a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00e      	beq.n	800c43a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	7afa      	ldrb	r2, [r7, #11]
 800c426:	4611      	mov	r1, r2
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	4798      	blx	r3
 800c42c:	4603      	mov	r3, r0
 800c42e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	e000      	b.n	800c43c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c474:	2303      	movs	r3, #3
 800c476:	e02f      	b.n	800c4d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00f      	beq.n	800c4a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d009      	beq.n	800c4a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	6852      	ldr	r2, [r2, #4]
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	4611      	mov	r1, r2
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f001 fc3e 	bl	800dd2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2240      	movs	r2, #64	; 0x40
 800c4ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4be:	2340      	movs	r3, #64	; 0x40
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2180      	movs	r1, #128	; 0x80
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f001 fc30 	bl	800dd2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2240      	movs	r2, #64	; 0x40
 800c4d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	78fa      	ldrb	r2, [r7, #3]
 800c4f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2204      	movs	r2, #4
 800c51a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d106      	bne.n	800c54e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c546:	b2da      	uxtb	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c56e:	2303      	movs	r3, #3
 800c570:	e012      	b.n	800c598 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d10b      	bne.n	800c596 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d005      	beq.n	800c596 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	e014      	b.n	800c5e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d10d      	bne.n	800c5e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d007      	beq.n	800c5e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	78fa      	ldrb	r2, [r7, #3]
 800c5dc:	4611      	mov	r1, r2
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c602:	2303      	movs	r3, #3
 800c604:	e014      	b.n	800c630 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b03      	cmp	r3, #3
 800c610:	d10d      	bne.n	800c62e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d007      	beq.n	800c62e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c626:	78fa      	ldrb	r2, [r7, #3]
 800c628:	4611      	mov	r1, r2
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b082      	sub	sp, #8
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c664:	2b00      	cmp	r3, #0
 800c666:	d009      	beq.n	800c67c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	6852      	ldr	r2, [r2, #4]
 800c674:	b2d2      	uxtb	r2, r2
 800c676:	4611      	mov	r1, r2
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	4798      	blx	r3
  }

  return USBD_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c686:	b480      	push	{r7}
 800c688:	b087      	sub	sp, #28
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	3301      	adds	r3, #1
 800c69c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6a4:	8a3b      	ldrh	r3, [r7, #16]
 800c6a6:	021b      	lsls	r3, r3, #8
 800c6a8:	b21a      	sxth	r2, r3
 800c6aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	b21b      	sxth	r3, r3
 800c6b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	371c      	adds	r7, #28
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
	...

0800c6c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6da:	2b40      	cmp	r3, #64	; 0x40
 800c6dc:	d005      	beq.n	800c6ea <USBD_StdDevReq+0x26>
 800c6de:	2b40      	cmp	r3, #64	; 0x40
 800c6e0:	d853      	bhi.n	800c78a <USBD_StdDevReq+0xc6>
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00b      	beq.n	800c6fe <USBD_StdDevReq+0x3a>
 800c6e6:	2b20      	cmp	r3, #32
 800c6e8:	d14f      	bne.n	800c78a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	4798      	blx	r3
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c6fc:	e04a      	b.n	800c794 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	2b09      	cmp	r3, #9
 800c704:	d83b      	bhi.n	800c77e <USBD_StdDevReq+0xba>
 800c706:	a201      	add	r2, pc, #4	; (adr r2, 800c70c <USBD_StdDevReq+0x48>)
 800c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70c:	0800c761 	.word	0x0800c761
 800c710:	0800c775 	.word	0x0800c775
 800c714:	0800c77f 	.word	0x0800c77f
 800c718:	0800c76b 	.word	0x0800c76b
 800c71c:	0800c77f 	.word	0x0800c77f
 800c720:	0800c73f 	.word	0x0800c73f
 800c724:	0800c735 	.word	0x0800c735
 800c728:	0800c77f 	.word	0x0800c77f
 800c72c:	0800c757 	.word	0x0800c757
 800c730:	0800c749 	.word	0x0800c749
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f9de 	bl	800caf8 <USBD_GetDescriptor>
          break;
 800c73c:	e024      	b.n	800c788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fb43 	bl	800cdcc <USBD_SetAddress>
          break;
 800c746:	e01f      	b.n	800c788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fb82 	bl	800ce54 <USBD_SetConfig>
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
          break;
 800c754:	e018      	b.n	800c788 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fc21 	bl	800cfa0 <USBD_GetConfig>
          break;
 800c75e:	e013      	b.n	800c788 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fc52 	bl	800d00c <USBD_GetStatus>
          break;
 800c768:	e00e      	b.n	800c788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fc81 	bl	800d074 <USBD_SetFeature>
          break;
 800c772:	e009      	b.n	800c788 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fc90 	bl	800d09c <USBD_ClrFeature>
          break;
 800c77c:	e004      	b.n	800c788 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fce7 	bl	800d154 <USBD_CtlError>
          break;
 800c786:	bf00      	nop
      }
      break;
 800c788:	e004      	b.n	800c794 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fce1 	bl	800d154 <USBD_CtlError>
      break;
 800c792:	bf00      	nop
  }

  return ret;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop

0800c7a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7b6:	2b40      	cmp	r3, #64	; 0x40
 800c7b8:	d005      	beq.n	800c7c6 <USBD_StdItfReq+0x26>
 800c7ba:	2b40      	cmp	r3, #64	; 0x40
 800c7bc:	d82f      	bhi.n	800c81e <USBD_StdItfReq+0x7e>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <USBD_StdItfReq+0x26>
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	d12b      	bne.n	800c81e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d81d      	bhi.n	800c810 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	889b      	ldrh	r3, [r3, #4]
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d813      	bhi.n	800c806 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	4798      	blx	r3
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	88db      	ldrh	r3, [r3, #6]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d110      	bne.n	800c81a <USBD_StdItfReq+0x7a>
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10d      	bne.n	800c81a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fd73 	bl	800d2ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c804:	e009      	b.n	800c81a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fca3 	bl	800d154 <USBD_CtlError>
          break;
 800c80e:	e004      	b.n	800c81a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fc9e 	bl	800d154 <USBD_CtlError>
          break;
 800c818:	e000      	b.n	800c81c <USBD_StdItfReq+0x7c>
          break;
 800c81a:	bf00      	nop
      }
      break;
 800c81c:	e004      	b.n	800c828 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fc97 	bl	800d154 <USBD_CtlError>
      break;
 800c826:	bf00      	nop
  }

  return ret;
 800c828:	7bfb      	ldrb	r3, [r7, #15]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	889b      	ldrh	r3, [r3, #4]
 800c844:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c84e:	2b40      	cmp	r3, #64	; 0x40
 800c850:	d007      	beq.n	800c862 <USBD_StdEPReq+0x30>
 800c852:	2b40      	cmp	r3, #64	; 0x40
 800c854:	f200 8145 	bhi.w	800cae2 <USBD_StdEPReq+0x2b0>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00c      	beq.n	800c876 <USBD_StdEPReq+0x44>
 800c85c:	2b20      	cmp	r3, #32
 800c85e:	f040 8140 	bne.w	800cae2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	4798      	blx	r3
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]
      break;
 800c874:	e13a      	b.n	800caec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	785b      	ldrb	r3, [r3, #1]
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d007      	beq.n	800c88e <USBD_StdEPReq+0x5c>
 800c87e:	2b03      	cmp	r3, #3
 800c880:	f300 8129 	bgt.w	800cad6 <USBD_StdEPReq+0x2a4>
 800c884:	2b00      	cmp	r3, #0
 800c886:	d07f      	beq.n	800c988 <USBD_StdEPReq+0x156>
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d03c      	beq.n	800c906 <USBD_StdEPReq+0xd4>
 800c88c:	e123      	b.n	800cad6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b02      	cmp	r3, #2
 800c898:	d002      	beq.n	800c8a0 <USBD_StdEPReq+0x6e>
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d016      	beq.n	800c8cc <USBD_StdEPReq+0x9a>
 800c89e:	e02c      	b.n	800c8fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8a0:	7bbb      	ldrb	r3, [r7, #14]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00d      	beq.n	800c8c2 <USBD_StdEPReq+0x90>
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b80      	cmp	r3, #128	; 0x80
 800c8aa:	d00a      	beq.n	800c8c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8ac:	7bbb      	ldrb	r3, [r7, #14]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f001 fa7f 	bl	800ddb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8b6:	2180      	movs	r1, #128	; 0x80
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f001 fa7b 	bl	800ddb4 <USBD_LL_StallEP>
 800c8be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8c0:	e020      	b.n	800c904 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fc45 	bl	800d154 <USBD_CtlError>
              break;
 800c8ca:	e01b      	b.n	800c904 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	885b      	ldrh	r3, [r3, #2]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10e      	bne.n	800c8f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00b      	beq.n	800c8f2 <USBD_StdEPReq+0xc0>
 800c8da:	7bbb      	ldrb	r3, [r7, #14]
 800c8dc:	2b80      	cmp	r3, #128	; 0x80
 800c8de:	d008      	beq.n	800c8f2 <USBD_StdEPReq+0xc0>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	88db      	ldrh	r3, [r3, #6]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d104      	bne.n	800c8f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8e8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f001 fa61 	bl	800ddb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fcf9 	bl	800d2ea <USBD_CtlSendStatus>

              break;
 800c8f8:	e004      	b.n	800c904 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fc29 	bl	800d154 <USBD_CtlError>
              break;
 800c902:	bf00      	nop
          }
          break;
 800c904:	e0ec      	b.n	800cae0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d002      	beq.n	800c918 <USBD_StdEPReq+0xe6>
 800c912:	2b03      	cmp	r3, #3
 800c914:	d016      	beq.n	800c944 <USBD_StdEPReq+0x112>
 800c916:	e030      	b.n	800c97a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00d      	beq.n	800c93a <USBD_StdEPReq+0x108>
 800c91e:	7bbb      	ldrb	r3, [r7, #14]
 800c920:	2b80      	cmp	r3, #128	; 0x80
 800c922:	d00a      	beq.n	800c93a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f001 fa43 	bl	800ddb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c92e:	2180      	movs	r1, #128	; 0x80
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f001 fa3f 	bl	800ddb4 <USBD_LL_StallEP>
 800c936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c938:	e025      	b.n	800c986 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fc09 	bl	800d154 <USBD_CtlError>
              break;
 800c942:	e020      	b.n	800c986 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	885b      	ldrh	r3, [r3, #2]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d11b      	bne.n	800c984 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c94c:	7bbb      	ldrb	r3, [r7, #14]
 800c94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c952:	2b00      	cmp	r3, #0
 800c954:	d004      	beq.n	800c960 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f001 fa49 	bl	800ddf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fcc2 	bl	800d2ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	4798      	blx	r3
 800c974:	4603      	mov	r3, r0
 800c976:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c978:	e004      	b.n	800c984 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fbe9 	bl	800d154 <USBD_CtlError>
              break;
 800c982:	e000      	b.n	800c986 <USBD_StdEPReq+0x154>
              break;
 800c984:	bf00      	nop
          }
          break;
 800c986:	e0ab      	b.n	800cae0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b02      	cmp	r3, #2
 800c992:	d002      	beq.n	800c99a <USBD_StdEPReq+0x168>
 800c994:	2b03      	cmp	r3, #3
 800c996:	d032      	beq.n	800c9fe <USBD_StdEPReq+0x1cc>
 800c998:	e097      	b.n	800caca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c99a:	7bbb      	ldrb	r3, [r7, #14]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <USBD_StdEPReq+0x17e>
 800c9a0:	7bbb      	ldrb	r3, [r7, #14]
 800c9a2:	2b80      	cmp	r3, #128	; 0x80
 800c9a4:	d004      	beq.n	800c9b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fbd3 	bl	800d154 <USBD_CtlError>
                break;
 800c9ae:	e091      	b.n	800cad4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	da0b      	bge.n	800c9d0 <USBD_StdEPReq+0x19e>
 800c9b8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9be:	4613      	mov	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	3310      	adds	r3, #16
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	e00b      	b.n	800c9e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9d0:	7bbb      	ldrb	r3, [r7, #14]
 800c9d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4413      	add	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2202      	movs	r2, #2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fc1d 	bl	800d236 <USBD_CtlSendData>
              break;
 800c9fc:	e06a      	b.n	800cad4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c9fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	da11      	bge.n	800ca2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	f003 020f 	and.w	r2, r3, #15
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	3324      	adds	r3, #36	; 0x24
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d117      	bne.n	800ca50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fb96 	bl	800d154 <USBD_CtlError>
                  break;
 800ca28:	e054      	b.n	800cad4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca2a:	7bbb      	ldrb	r3, [r7, #14]
 800ca2c:	f003 020f 	and.w	r2, r3, #15
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	4613      	mov	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	440b      	add	r3, r1
 800ca3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca40:	881b      	ldrh	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d104      	bne.n	800ca50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fb83 	bl	800d154 <USBD_CtlError>
                  break;
 800ca4e:	e041      	b.n	800cad4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da0b      	bge.n	800ca70 <USBD_StdEPReq+0x23e>
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca5e:	4613      	mov	r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4413      	add	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	3310      	adds	r3, #16
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	e00b      	b.n	800ca88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca70:	7bbb      	ldrb	r3, [r7, #14]
 800ca72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca76:	4613      	mov	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	4413      	add	r3, r2
 800ca86:	3304      	adds	r3, #4
 800ca88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <USBD_StdEPReq+0x264>
 800ca90:	7bbb      	ldrb	r3, [r7, #14]
 800ca92:	2b80      	cmp	r3, #128	; 0x80
 800ca94:	d103      	bne.n	800ca9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	e00e      	b.n	800cabc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	4619      	mov	r1, r3
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 f9c4 	bl	800de30 <USBD_LL_IsStallEP>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2201      	movs	r2, #1
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	e002      	b.n	800cabc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2202      	movs	r2, #2
 800cac0:	4619      	mov	r1, r3
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fbb7 	bl	800d236 <USBD_CtlSendData>
              break;
 800cac8:	e004      	b.n	800cad4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800caca:	6839      	ldr	r1, [r7, #0]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fb41 	bl	800d154 <USBD_CtlError>
              break;
 800cad2:	bf00      	nop
          }
          break;
 800cad4:	e004      	b.n	800cae0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fb3b 	bl	800d154 <USBD_CtlError>
          break;
 800cade:	bf00      	nop
      }
      break;
 800cae0:	e004      	b.n	800caec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fb35 	bl	800d154 <USBD_CtlError>
      break;
 800caea:	bf00      	nop
  }

  return ret;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb02:	2300      	movs	r3, #0
 800cb04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	885b      	ldrh	r3, [r3, #2]
 800cb12:	0a1b      	lsrs	r3, r3, #8
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	3b01      	subs	r3, #1
 800cb18:	2b06      	cmp	r3, #6
 800cb1a:	f200 8128 	bhi.w	800cd6e <USBD_GetDescriptor+0x276>
 800cb1e:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <USBD_GetDescriptor+0x2c>)
 800cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb24:	0800cb41 	.word	0x0800cb41
 800cb28:	0800cb59 	.word	0x0800cb59
 800cb2c:	0800cb99 	.word	0x0800cb99
 800cb30:	0800cd6f 	.word	0x0800cd6f
 800cb34:	0800cd6f 	.word	0x0800cd6f
 800cb38:	0800cd0f 	.word	0x0800cd0f
 800cb3c:	0800cd3b 	.word	0x0800cd3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	7c12      	ldrb	r2, [r2, #16]
 800cb4c:	f107 0108 	add.w	r1, r7, #8
 800cb50:	4610      	mov	r0, r2
 800cb52:	4798      	blx	r3
 800cb54:	60f8      	str	r0, [r7, #12]
      break;
 800cb56:	e112      	b.n	800cd7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	7c1b      	ldrb	r3, [r3, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10d      	bne.n	800cb7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb68:	f107 0208 	add.w	r2, r7, #8
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	4798      	blx	r3
 800cb70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3301      	adds	r3, #1
 800cb76:	2202      	movs	r2, #2
 800cb78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cb7a:	e100      	b.n	800cd7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb84:	f107 0208 	add.w	r2, r7, #8
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4798      	blx	r3
 800cb8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3301      	adds	r3, #1
 800cb92:	2202      	movs	r2, #2
 800cb94:	701a      	strb	r2, [r3, #0]
      break;
 800cb96:	e0f2      	b.n	800cd7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	885b      	ldrh	r3, [r3, #2]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b05      	cmp	r3, #5
 800cba0:	f200 80ac 	bhi.w	800ccfc <USBD_GetDescriptor+0x204>
 800cba4:	a201      	add	r2, pc, #4	; (adr r2, 800cbac <USBD_GetDescriptor+0xb4>)
 800cba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbaa:	bf00      	nop
 800cbac:	0800cbc5 	.word	0x0800cbc5
 800cbb0:	0800cbf9 	.word	0x0800cbf9
 800cbb4:	0800cc2d 	.word	0x0800cc2d
 800cbb8:	0800cc61 	.word	0x0800cc61
 800cbbc:	0800cc95 	.word	0x0800cc95
 800cbc0:	0800ccc9 	.word	0x0800ccc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00b      	beq.n	800cbe8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	7c12      	ldrb	r2, [r2, #16]
 800cbdc:	f107 0108 	add.w	r1, r7, #8
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	4798      	blx	r3
 800cbe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbe6:	e091      	b.n	800cd0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fab2 	bl	800d154 <USBD_CtlError>
            err++;
 800cbf0:	7afb      	ldrb	r3, [r7, #11]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	72fb      	strb	r3, [r7, #11]
          break;
 800cbf6:	e089      	b.n	800cd0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	7c12      	ldrb	r2, [r2, #16]
 800cc10:	f107 0108 	add.w	r1, r7, #8
 800cc14:	4610      	mov	r0, r2
 800cc16:	4798      	blx	r3
 800cc18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc1a:	e077      	b.n	800cd0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa98 	bl	800d154 <USBD_CtlError>
            err++;
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	3301      	adds	r3, #1
 800cc28:	72fb      	strb	r3, [r7, #11]
          break;
 800cc2a:	e06f      	b.n	800cd0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	7c12      	ldrb	r2, [r2, #16]
 800cc44:	f107 0108 	add.w	r1, r7, #8
 800cc48:	4610      	mov	r0, r2
 800cc4a:	4798      	blx	r3
 800cc4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc4e:	e05d      	b.n	800cd0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fa7e 	bl	800d154 <USBD_CtlError>
            err++;
 800cc58:	7afb      	ldrb	r3, [r7, #11]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc5e:	e055      	b.n	800cd0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00b      	beq.n	800cc84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	7c12      	ldrb	r2, [r2, #16]
 800cc78:	f107 0108 	add.w	r1, r7, #8
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	4798      	blx	r3
 800cc80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc82:	e043      	b.n	800cd0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fa64 	bl	800d154 <USBD_CtlError>
            err++;
 800cc8c:	7afb      	ldrb	r3, [r7, #11]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	72fb      	strb	r3, [r7, #11]
          break;
 800cc92:	e03b      	b.n	800cd0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc9a:	695b      	ldr	r3, [r3, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	7c12      	ldrb	r2, [r2, #16]
 800ccac:	f107 0108 	add.w	r1, r7, #8
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	4798      	blx	r3
 800ccb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccb6:	e029      	b.n	800cd0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fa4a 	bl	800d154 <USBD_CtlError>
            err++;
 800ccc0:	7afb      	ldrb	r3, [r7, #11]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ccc6:	e021      	b.n	800cd0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00b      	beq.n	800ccec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	7c12      	ldrb	r2, [r2, #16]
 800cce0:	f107 0108 	add.w	r1, r7, #8
 800cce4:	4610      	mov	r0, r2
 800cce6:	4798      	blx	r3
 800cce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccea:	e00f      	b.n	800cd0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fa30 	bl	800d154 <USBD_CtlError>
            err++;
 800ccf4:	7afb      	ldrb	r3, [r7, #11]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccfa:	e007      	b.n	800cd0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fa28 	bl	800d154 <USBD_CtlError>
          err++;
 800cd04:	7afb      	ldrb	r3, [r7, #11]
 800cd06:	3301      	adds	r3, #1
 800cd08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cd0a:	bf00      	nop
      }
      break;
 800cd0c:	e037      	b.n	800cd7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7c1b      	ldrb	r3, [r3, #16]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d109      	bne.n	800cd2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1e:	f107 0208 	add.w	r2, r7, #8
 800cd22:	4610      	mov	r0, r2
 800cd24:	4798      	blx	r3
 800cd26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd28:	e029      	b.n	800cd7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fa11 	bl	800d154 <USBD_CtlError>
        err++;
 800cd32:	7afb      	ldrb	r3, [r7, #11]
 800cd34:	3301      	adds	r3, #1
 800cd36:	72fb      	strb	r3, [r7, #11]
      break;
 800cd38:	e021      	b.n	800cd7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	7c1b      	ldrb	r3, [r3, #16]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10d      	bne.n	800cd5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4a:	f107 0208 	add.w	r2, r7, #8
 800cd4e:	4610      	mov	r0, r2
 800cd50:	4798      	blx	r3
 800cd52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3301      	adds	r3, #1
 800cd58:	2207      	movs	r2, #7
 800cd5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd5c:	e00f      	b.n	800cd7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f9f7 	bl	800d154 <USBD_CtlError>
        err++;
 800cd66:	7afb      	ldrb	r3, [r7, #11]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	72fb      	strb	r3, [r7, #11]
      break;
 800cd6c:	e007      	b.n	800cd7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f9ef 	bl	800d154 <USBD_CtlError>
      err++;
 800cd76:	7afb      	ldrb	r3, [r7, #11]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	72fb      	strb	r3, [r7, #11]
      break;
 800cd7c:	bf00      	nop
  }

  if (err != 0U)
 800cd7e:	7afb      	ldrb	r3, [r7, #11]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d11e      	bne.n	800cdc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	88db      	ldrh	r3, [r3, #6]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d016      	beq.n	800cdba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cd8c:	893b      	ldrh	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00e      	beq.n	800cdb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	88da      	ldrh	r2, [r3, #6]
 800cd96:	893b      	ldrh	r3, [r7, #8]
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	bf28      	it	cs
 800cd9c:	4613      	movcs	r3, r2
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cda2:	893b      	ldrh	r3, [r7, #8]
 800cda4:	461a      	mov	r2, r3
 800cda6:	68f9      	ldr	r1, [r7, #12]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fa44 	bl	800d236 <USBD_CtlSendData>
 800cdae:	e009      	b.n	800cdc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 f9ce 	bl	800d154 <USBD_CtlError>
 800cdb8:	e004      	b.n	800cdc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa95 	bl	800d2ea <USBD_CtlSendStatus>
 800cdc0:	e000      	b.n	800cdc4 <USBD_GetDescriptor+0x2cc>
    return;
 800cdc2:	bf00      	nop
  }
}
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop

0800cdcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	889b      	ldrh	r3, [r3, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d131      	bne.n	800ce42 <USBD_SetAddress+0x76>
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	88db      	ldrh	r3, [r3, #6]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d12d      	bne.n	800ce42 <USBD_SetAddress+0x76>
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	885b      	ldrh	r3, [r3, #2]
 800cdea:	2b7f      	cmp	r3, #127	; 0x7f
 800cdec:	d829      	bhi.n	800ce42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	885b      	ldrh	r3, [r3, #2]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d104      	bne.n	800ce10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f9a3 	bl	800d154 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce0e:	e01d      	b.n	800ce4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	7bfa      	ldrb	r2, [r7, #15]
 800ce14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f001 f833 	bl	800de88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fa61 	bl	800d2ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d004      	beq.n	800ce38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2202      	movs	r2, #2
 800ce32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce36:	e009      	b.n	800ce4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce40:	e004      	b.n	800ce4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 f985 	bl	800d154 <USBD_CtlError>
  }
}
 800ce4a:	bf00      	nop
 800ce4c:	bf00      	nop
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	885b      	ldrh	r3, [r3, #2]
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	4b4c      	ldr	r3, [pc, #304]	; (800cf9c <USBD_SetConfig+0x148>)
 800ce6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce6c:	4b4b      	ldr	r3, [pc, #300]	; (800cf9c <USBD_SetConfig+0x148>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d905      	bls.n	800ce80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f96c 	bl	800d154 <USBD_CtlError>
    return USBD_FAIL;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	e088      	b.n	800cf92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d002      	beq.n	800ce92 <USBD_SetConfig+0x3e>
 800ce8c:	2b03      	cmp	r3, #3
 800ce8e:	d025      	beq.n	800cedc <USBD_SetConfig+0x88>
 800ce90:	e071      	b.n	800cf76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ce92:	4b42      	ldr	r3, [pc, #264]	; (800cf9c <USBD_SetConfig+0x148>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d01c      	beq.n	800ced4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ce9a:	4b40      	ldr	r3, [pc, #256]	; (800cf9c <USBD_SetConfig+0x148>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cea4:	4b3d      	ldr	r3, [pc, #244]	; (800cf9c <USBD_SetConfig+0x148>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff f948 	bl	800c140 <USBD_SetClassConfig>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d004      	beq.n	800cec4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ceba:	6839      	ldr	r1, [r7, #0]
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 f949 	bl	800d154 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cec2:	e065      	b.n	800cf90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fa10 	bl	800d2ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2203      	movs	r2, #3
 800cece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ced2:	e05d      	b.n	800cf90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fa08 	bl	800d2ea <USBD_CtlSendStatus>
      break;
 800ceda:	e059      	b.n	800cf90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cedc:	4b2f      	ldr	r3, [pc, #188]	; (800cf9c <USBD_SetConfig+0x148>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d112      	bne.n	800cf0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2202      	movs	r2, #2
 800cee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ceec:	4b2b      	ldr	r3, [pc, #172]	; (800cf9c <USBD_SetConfig+0x148>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	461a      	mov	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cef6:	4b29      	ldr	r3, [pc, #164]	; (800cf9c <USBD_SetConfig+0x148>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff f93b 	bl	800c178 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 f9f1 	bl	800d2ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf08:	e042      	b.n	800cf90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cf0a:	4b24      	ldr	r3, [pc, #144]	; (800cf9c <USBD_SetConfig+0x148>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d02a      	beq.n	800cf6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7ff f929 	bl	800c178 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cf26:	4b1d      	ldr	r3, [pc, #116]	; (800cf9c <USBD_SetConfig+0x148>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf30:	4b1a      	ldr	r3, [pc, #104]	; (800cf9c <USBD_SetConfig+0x148>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff f902 	bl	800c140 <USBD_SetClassConfig>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00f      	beq.n	800cf66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f903 	bl	800d154 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff f90e 	bl	800c178 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2202      	movs	r2, #2
 800cf60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf64:	e014      	b.n	800cf90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f9bf 	bl	800d2ea <USBD_CtlSendStatus>
      break;
 800cf6c:	e010      	b.n	800cf90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f9bb 	bl	800d2ea <USBD_CtlSendStatus>
      break;
 800cf74:	e00c      	b.n	800cf90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f8eb 	bl	800d154 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf7e:	4b07      	ldr	r3, [pc, #28]	; (800cf9c <USBD_SetConfig+0x148>)
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff f8f7 	bl	800c178 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cf8a:	2303      	movs	r3, #3
 800cf8c:	73fb      	strb	r3, [r7, #15]
      break;
 800cf8e:	bf00      	nop
  }

  return ret;
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	240001a0 	.word	0x240001a0

0800cfa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	88db      	ldrh	r3, [r3, #6]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d004      	beq.n	800cfbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f8cd 	bl	800d154 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cfba:	e023      	b.n	800d004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	dc02      	bgt.n	800cfce <USBD_GetConfig+0x2e>
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	dc03      	bgt.n	800cfd4 <USBD_GetConfig+0x34>
 800cfcc:	e015      	b.n	800cffa <USBD_GetConfig+0x5a>
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d00b      	beq.n	800cfea <USBD_GetConfig+0x4a>
 800cfd2:	e012      	b.n	800cffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	3308      	adds	r3, #8
 800cfde:	2201      	movs	r2, #1
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f927 	bl	800d236 <USBD_CtlSendData>
        break;
 800cfe8:	e00c      	b.n	800d004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	3304      	adds	r3, #4
 800cfee:	2201      	movs	r2, #1
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f91f 	bl	800d236 <USBD_CtlSendData>
        break;
 800cff8:	e004      	b.n	800d004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 f8a9 	bl	800d154 <USBD_CtlError>
        break;
 800d002:	bf00      	nop
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	3b01      	subs	r3, #1
 800d020:	2b02      	cmp	r3, #2
 800d022:	d81e      	bhi.n	800d062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	88db      	ldrh	r3, [r3, #6]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d004      	beq.n	800d036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 f890 	bl	800d154 <USBD_CtlError>
        break;
 800d034:	e01a      	b.n	800d06c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d042:	2b00      	cmp	r3, #0
 800d044:	d005      	beq.n	800d052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	f043 0202 	orr.w	r2, r3, #2
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	330c      	adds	r3, #12
 800d056:	2202      	movs	r2, #2
 800d058:	4619      	mov	r1, r3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f8eb 	bl	800d236 <USBD_CtlSendData>
      break;
 800d060:	e004      	b.n	800d06c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f875 	bl	800d154 <USBD_CtlError>
      break;
 800d06a:	bf00      	nop
  }
}
 800d06c:	bf00      	nop
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	885b      	ldrh	r3, [r3, #2]
 800d082:	2b01      	cmp	r3, #1
 800d084:	d106      	bne.n	800d094 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f92b 	bl	800d2ea <USBD_CtlSendStatus>
  }
}
 800d094:	bf00      	nop
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d80b      	bhi.n	800d0cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	885b      	ldrh	r3, [r3, #2]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d10c      	bne.n	800d0d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f910 	bl	800d2ea <USBD_CtlSendStatus>
      }
      break;
 800d0ca:	e004      	b.n	800d0d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f840 	bl	800d154 <USBD_CtlError>
      break;
 800d0d4:	e000      	b.n	800d0d8 <USBD_ClrFeature+0x3c>
      break;
 800d0d6:	bf00      	nop
  }
}
 800d0d8:	bf00      	nop
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	781a      	ldrb	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	781a      	ldrb	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	3301      	adds	r3, #1
 800d108:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f7ff fabb 	bl	800c686 <SWAPBYTE>
 800d110:	4603      	mov	r3, r0
 800d112:	461a      	mov	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3301      	adds	r3, #1
 800d11c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3301      	adds	r3, #1
 800d122:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f7ff faae 	bl	800c686 <SWAPBYTE>
 800d12a:	4603      	mov	r3, r0
 800d12c:	461a      	mov	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3301      	adds	r3, #1
 800d136:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3301      	adds	r3, #1
 800d13c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff faa1 	bl	800c686 <SWAPBYTE>
 800d144:	4603      	mov	r3, r0
 800d146:	461a      	mov	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	80da      	strh	r2, [r3, #6]
}
 800d14c:	bf00      	nop
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d15e:	2180      	movs	r1, #128	; 0x80
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fe27 	bl	800ddb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d166:	2100      	movs	r1, #0
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fe23 	bl	800ddb4 <USBD_LL_StallEP>
}
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b086      	sub	sp, #24
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d036      	beq.n	800d1fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d190:	6938      	ldr	r0, [r7, #16]
 800d192:	f000 f836 	bl	800d202 <USBD_GetLen>
 800d196:	4603      	mov	r3, r0
 800d198:	3301      	adds	r3, #1
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	7812      	ldrb	r2, [r2, #0]
 800d1ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1b0:	7dfb      	ldrb	r3, [r7, #23]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d1b6:	7dfb      	ldrb	r3, [r7, #23]
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	2203      	movs	r2, #3
 800d1be:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d1c6:	e013      	b.n	800d1f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d1c8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	7812      	ldrb	r2, [r2, #0]
 800d1d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	613b      	str	r3, [r7, #16]
    idx++;
 800d1da:	7dfb      	ldrb	r3, [r7, #23]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	701a      	strb	r2, [r3, #0]
    idx++;
 800d1ea:	7dfb      	ldrb	r3, [r7, #23]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1e7      	bne.n	800d1c8 <USBD_GetString+0x52>
 800d1f8:	e000      	b.n	800d1fc <USBD_GetString+0x86>
    return;
 800d1fa:	bf00      	nop
  }
}
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d202:	b480      	push	{r7}
 800d204:	b085      	sub	sp, #20
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d20a:	2300      	movs	r3, #0
 800d20c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d212:	e005      	b.n	800d220 <USBD_GetLen+0x1e>
  {
    len++;
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	3301      	adds	r3, #1
 800d218:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	3301      	adds	r3, #1
 800d21e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1f5      	bne.n	800d214 <USBD_GetLen+0x12>
  }

  return len;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	60b9      	str	r1, [r7, #8]
 800d240:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2202      	movs	r2, #2
 800d246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	2100      	movs	r1, #0
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f000 fe32 	bl	800dec6 <USBD_LL_Transmit>

  return USBD_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68ba      	ldr	r2, [r7, #8]
 800d27c:	2100      	movs	r1, #0
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 fe21 	bl	800dec6 <USBD_LL_Transmit>

  return USBD_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b084      	sub	sp, #16
 800d292:	af00      	add	r7, sp, #0
 800d294:	60f8      	str	r0, [r7, #12]
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2203      	movs	r2, #3
 800d29e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f000 fe25 	bl	800df08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	2100      	movs	r1, #0
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f000 fe14 	bl	800df08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b082      	sub	sp, #8
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2204      	movs	r2, #4
 800d2f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2100      	movs	r1, #0
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 fde0 	bl	800dec6 <USBD_LL_Transmit>

  return USBD_OK;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2205      	movs	r2, #5
 800d31c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d320:	2300      	movs	r3, #0
 800d322:	2200      	movs	r2, #0
 800d324:	2100      	movs	r1, #0
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fdee 	bl	800df08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
	...

0800d338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d33c:	2200      	movs	r2, #0
 800d33e:	4913      	ldr	r1, [pc, #76]	; (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d340:	4813      	ldr	r0, [pc, #76]	; (800d390 <MX_USB_DEVICE_Init+0x58>)
 800d342:	f7fe fe8f 	bl	800c064 <USBD_Init>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d34c:	f7f3 fc62 	bl	8000c14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d350:	4910      	ldr	r1, [pc, #64]	; (800d394 <MX_USB_DEVICE_Init+0x5c>)
 800d352:	480f      	ldr	r0, [pc, #60]	; (800d390 <MX_USB_DEVICE_Init+0x58>)
 800d354:	f7fe feb6 	bl	800c0c4 <USBD_RegisterClass>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d35e:	f7f3 fc59 	bl	8000c14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d362:	490d      	ldr	r1, [pc, #52]	; (800d398 <MX_USB_DEVICE_Init+0x60>)
 800d364:	480a      	ldr	r0, [pc, #40]	; (800d390 <MX_USB_DEVICE_Init+0x58>)
 800d366:	f7fe fdd7 	bl	800bf18 <USBD_CDC_RegisterInterface>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d370:	f7f3 fc50 	bl	8000c14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d374:	4806      	ldr	r0, [pc, #24]	; (800d390 <MX_USB_DEVICE_Init+0x58>)
 800d376:	f7fe fecc 	bl	800c112 <USBD_Start>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d380:	f7f3 fc48 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d384:	f7f7 ffe2 	bl	800534c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d388:	bf00      	nop
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	24000134 	.word	0x24000134
 800d390:	240005ac 	.word	0x240005ac
 800d394:	2400001c 	.word	0x2400001c
 800d398:	24000120 	.word	0x24000120

0800d39c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	490f      	ldr	r1, [pc, #60]	; (800d3e0 <CDC_Init_FS+0x44>)
 800d3a4:	480f      	ldr	r0, [pc, #60]	; (800d3e4 <CDC_Init_FS+0x48>)
 800d3a6:	f7fe fdcc 	bl	800bf42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d3aa:	490f      	ldr	r1, [pc, #60]	; (800d3e8 <CDC_Init_FS+0x4c>)
 800d3ac:	480d      	ldr	r0, [pc, #52]	; (800d3e4 <CDC_Init_FS+0x48>)
 800d3ae:	f7fe fde6 	bl	800bf7e <USBD_CDC_SetRxBuffer>
  CDC_TxBuff1.buff=UserTxBufferFS;
 800d3b2:	4b0e      	ldr	r3, [pc, #56]	; (800d3ec <CDC_Init_FS+0x50>)
 800d3b4:	4a0a      	ldr	r2, [pc, #40]	; (800d3e0 <CDC_Init_FS+0x44>)
 800d3b6:	601a      	str	r2, [r3, #0]
  CDC_TxBuff1.size = APP_TX_DATA_SIZE;
 800d3b8:	4b0c      	ldr	r3, [pc, #48]	; (800d3ec <CDC_Init_FS+0x50>)
 800d3ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3be:	809a      	strh	r2, [r3, #4]
  CDC_TxBuff1.write_index = 0;
 800d3c0:	4b0a      	ldr	r3, [pc, #40]	; (800d3ec <CDC_Init_FS+0x50>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	80da      	strh	r2, [r3, #6]
  CDC_TxBuff2.buff=UserTxBufferFS2;
 800d3c6:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <CDC_Init_FS+0x54>)
 800d3c8:	4a0a      	ldr	r2, [pc, #40]	; (800d3f4 <CDC_Init_FS+0x58>)
 800d3ca:	601a      	str	r2, [r3, #0]
  CDC_TxBuff2.size = APP_TX_DATA_SIZE;
 800d3cc:	4b08      	ldr	r3, [pc, #32]	; (800d3f0 <CDC_Init_FS+0x54>)
 800d3ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3d2:	809a      	strh	r2, [r3, #4]
  CDC_TxBuff2.write_index = 0;
 800d3d4:	4b06      	ldr	r3, [pc, #24]	; (800d3f0 <CDC_Init_FS+0x54>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	80da      	strh	r2, [r3, #6]

  return (USBD_OK);
 800d3da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	24001888 	.word	0x24001888
 800d3e4:	240005ac 	.word	0x240005ac
 800d3e8:	24001088 	.word	0x24001088
 800d3ec:	2400107c 	.word	0x2400107c
 800d3f0:	24002090 	.word	0x24002090
 800d3f4:	2400087c 	.word	0x2400087c

0800d3f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	6039      	str	r1, [r7, #0]
 800d412:	71fb      	strb	r3, [r7, #7]
 800d414:	4613      	mov	r3, r2
 800d416:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	2b23      	cmp	r3, #35	; 0x23
 800d41c:	f200 8094 	bhi.w	800d548 <CDC_Control_FS+0x140>
 800d420:	a201      	add	r2, pc, #4	; (adr r2, 800d428 <CDC_Control_FS+0x20>)
 800d422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d426:	bf00      	nop
 800d428:	0800d549 	.word	0x0800d549
 800d42c:	0800d549 	.word	0x0800d549
 800d430:	0800d549 	.word	0x0800d549
 800d434:	0800d549 	.word	0x0800d549
 800d438:	0800d549 	.word	0x0800d549
 800d43c:	0800d549 	.word	0x0800d549
 800d440:	0800d549 	.word	0x0800d549
 800d444:	0800d549 	.word	0x0800d549
 800d448:	0800d549 	.word	0x0800d549
 800d44c:	0800d549 	.word	0x0800d549
 800d450:	0800d549 	.word	0x0800d549
 800d454:	0800d549 	.word	0x0800d549
 800d458:	0800d549 	.word	0x0800d549
 800d45c:	0800d549 	.word	0x0800d549
 800d460:	0800d549 	.word	0x0800d549
 800d464:	0800d549 	.word	0x0800d549
 800d468:	0800d549 	.word	0x0800d549
 800d46c:	0800d549 	.word	0x0800d549
 800d470:	0800d549 	.word	0x0800d549
 800d474:	0800d549 	.word	0x0800d549
 800d478:	0800d549 	.word	0x0800d549
 800d47c:	0800d549 	.word	0x0800d549
 800d480:	0800d549 	.word	0x0800d549
 800d484:	0800d549 	.word	0x0800d549
 800d488:	0800d549 	.word	0x0800d549
 800d48c:	0800d549 	.word	0x0800d549
 800d490:	0800d549 	.word	0x0800d549
 800d494:	0800d549 	.word	0x0800d549
 800d498:	0800d549 	.word	0x0800d549
 800d49c:	0800d549 	.word	0x0800d549
 800d4a0:	0800d549 	.word	0x0800d549
 800d4a4:	0800d549 	.word	0x0800d549
 800d4a8:	0800d4b9 	.word	0x0800d4b9
 800d4ac:	0800d4f3 	.word	0x0800d4f3
 800d4b0:	0800d539 	.word	0x0800d539
 800d4b4:	0800d541 	.word	0x0800d541
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	781a      	ldrb	r2, [r3, #0]
 800d4bc:	4b26      	ldr	r3, [pc, #152]	; (800d558 <CDC_Control_FS+0x150>)
 800d4be:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	785a      	ldrb	r2, [r3, #1]
 800d4c4:	4b24      	ldr	r3, [pc, #144]	; (800d558 <CDC_Control_FS+0x150>)
 800d4c6:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	789a      	ldrb	r2, [r3, #2]
 800d4cc:	4b22      	ldr	r3, [pc, #136]	; (800d558 <CDC_Control_FS+0x150>)
 800d4ce:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	78da      	ldrb	r2, [r3, #3]
 800d4d4:	4b20      	ldr	r3, [pc, #128]	; (800d558 <CDC_Control_FS+0x150>)
 800d4d6:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	791a      	ldrb	r2, [r3, #4]
 800d4dc:	4b1e      	ldr	r3, [pc, #120]	; (800d558 <CDC_Control_FS+0x150>)
 800d4de:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	795a      	ldrb	r2, [r3, #5]
 800d4e4:	4b1c      	ldr	r3, [pc, #112]	; (800d558 <CDC_Control_FS+0x150>)
 800d4e6:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	799a      	ldrb	r2, [r3, #6]
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	; (800d558 <CDC_Control_FS+0x150>)
 800d4ee:	719a      	strb	r2, [r3, #6]
    	break;
 800d4f0:	e02b      	b.n	800d54a <CDC_Control_FS+0x142>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 800d4f2:	4b19      	ldr	r3, [pc, #100]	; (800d558 <CDC_Control_FS+0x150>)
 800d4f4:	781a      	ldrb	r2, [r3, #0]
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	4a16      	ldr	r2, [pc, #88]	; (800d558 <CDC_Control_FS+0x150>)
 800d500:	7852      	ldrb	r2, [r2, #1]
 800d502:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	3302      	adds	r3, #2
 800d508:	4a13      	ldr	r2, [pc, #76]	; (800d558 <CDC_Control_FS+0x150>)
 800d50a:	7892      	ldrb	r2, [r2, #2]
 800d50c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	3303      	adds	r3, #3
 800d512:	4a11      	ldr	r2, [pc, #68]	; (800d558 <CDC_Control_FS+0x150>)
 800d514:	78d2      	ldrb	r2, [r2, #3]
 800d516:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	3304      	adds	r3, #4
 800d51c:	4a0e      	ldr	r2, [pc, #56]	; (800d558 <CDC_Control_FS+0x150>)
 800d51e:	7912      	ldrb	r2, [r2, #4]
 800d520:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	3305      	adds	r3, #5
 800d526:	4a0c      	ldr	r2, [pc, #48]	; (800d558 <CDC_Control_FS+0x150>)
 800d528:	7952      	ldrb	r2, [r2, #5]
 800d52a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	3306      	adds	r3, #6
 800d530:	4a09      	ldr	r2, [pc, #36]	; (800d558 <CDC_Control_FS+0x150>)
 800d532:	7992      	ldrb	r2, [r2, #6]
 800d534:	701a      	strb	r2, [r3, #0]
    	break;
 800d536:	e008      	b.n	800d54a <CDC_Control_FS+0x142>

    case CDC_SET_CONTROL_LINE_STATE: // DTS - data terminal ready H->D control
    	g_enable_usb_push = 1;
 800d538:	4b08      	ldr	r3, [pc, #32]	; (800d55c <CDC_Control_FS+0x154>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	601a      	str	r2, [r3, #0]
    break;
 800d53e:	e004      	b.n	800d54a <CDC_Control_FS+0x142>

    case CDC_SEND_BREAK:
    	g_enable_usb_push =  0;
 800d540:	4b06      	ldr	r3, [pc, #24]	; (800d55c <CDC_Control_FS+0x154>)
 800d542:	2200      	movs	r2, #0
 800d544:	601a      	str	r2, [r3, #0]
    break;
 800d546:	e000      	b.n	800d54a <CDC_Control_FS+0x142>

  default:
    break;
 800d548:	bf00      	nop
  }

  return (USBD_OK);
 800d54a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	24002088 	.word	0x24002088
 800d55c:	24000454 	.word	0x24000454

0800d560 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d56a:	6879      	ldr	r1, [r7, #4]
 800d56c:	4805      	ldr	r0, [pc, #20]	; (800d584 <CDC_Receive_FS+0x24>)
 800d56e:	f7fe fd06 	bl	800bf7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d572:	4804      	ldr	r0, [pc, #16]	; (800d584 <CDC_Receive_FS+0x24>)
 800d574:	f7fe fd4c 	bl	800c010 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d578:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	240005ac 	.word	0x240005ac

0800d588 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d594:	2300      	movs	r3, #0
 800d596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d598:	4b0d      	ldr	r3, [pc, #52]	; (800d5d0 <CDC_Transmit_FS+0x48>)
 800d59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d59e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d001      	beq.n	800d5ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e00b      	b.n	800d5c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d5ae:	887b      	ldrh	r3, [r7, #2]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	4806      	ldr	r0, [pc, #24]	; (800d5d0 <CDC_Transmit_FS+0x48>)
 800d5b6:	f7fe fcc4 	bl	800bf42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d5ba:	4805      	ldr	r0, [pc, #20]	; (800d5d0 <CDC_Transmit_FS+0x48>)
 800d5bc:	f7fe fcf8 	bl	800bfb0 <USBD_CDC_TransmitPacket>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	240005ac 	.word	0x240005ac

0800d5d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b087      	sub	sp, #28
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d5e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	371c      	adds	r7, #28
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
	...

0800d5f8 <CDC_TxFifoInsert>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
static uint16_t CDC_TxFifoInsert(uint8_t* data, uint16_t Len) //APP_TX_DATA_SIZE
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	807b      	strh	r3, [r7, #2]
	TxBuffer *ptx_buf;
	if(gCDC_TxSelect&0x01)
 800d604:	4b1a      	ldr	r3, [pc, #104]	; (800d670 <CDC_TxFifoInsert+0x78>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <CDC_TxFifoInsert+0x1e>
		ptx_buf = &CDC_TxBuff1;
 800d610:	4b18      	ldr	r3, [pc, #96]	; (800d674 <CDC_TxFifoInsert+0x7c>)
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	e001      	b.n	800d61a <CDC_TxFifoInsert+0x22>
	else
		ptx_buf = &CDC_TxBuff2;
 800d616:	4b18      	ldr	r3, [pc, #96]	; (800d678 <CDC_TxFifoInsert+0x80>)
 800d618:	60fb      	str	r3, [r7, #12]

	if (ptx_buf->size < (ptx_buf->write_index+Len))
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	889b      	ldrh	r3, [r3, #4]
 800d61e:	461a      	mov	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	88db      	ldrh	r3, [r3, #6]
 800d624:	4619      	mov	r1, r3
 800d626:	887b      	ldrh	r3, [r7, #2]
 800d628:	440b      	add	r3, r1
 800d62a:	429a      	cmp	r2, r3
 800d62c:	da02      	bge.n	800d634 <CDC_TxFifoInsert+0x3c>
		return ptx_buf->write_index;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	88db      	ldrh	r3, [r3, #6]
 800d632:	e018      	b.n	800d666 <CDC_TxFifoInsert+0x6e>
	ptx_buf->read_enable = 0;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	721a      	strb	r2, [r3, #8]
	memcpy(&ptx_buf->buff[ptx_buf->write_index], data, Len);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	88d2      	ldrh	r2, [r2, #6]
 800d642:	4413      	add	r3, r2
 800d644:	887a      	ldrh	r2, [r7, #2]
 800d646:	6879      	ldr	r1, [r7, #4]
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 fcf9 	bl	800e040 <memcpy>
	ptx_buf->write_index += Len;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	88da      	ldrh	r2, [r3, #6]
 800d652:	887b      	ldrh	r3, [r7, #2]
 800d654:	4413      	add	r3, r2
 800d656:	b29a      	uxth	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	80da      	strh	r2, [r3, #6]
	ptx_buf->read_enable = 1;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2201      	movs	r2, #1
 800d660:	721a      	strb	r2, [r3, #8]
	return ptx_buf->write_index;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	88db      	ldrh	r3, [r3, #6]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	240001a2 	.word	0x240001a2
 800d674:	2400107c 	.word	0x2400107c
 800d678:	24002090 	.word	0x24002090

0800d67c <CDC_TxFifoFlush>:

uint8_t CDC_TxFifoFlush() //APP_TX_DATA_SIZE
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
	TxBuffer *ptx_buf;
	uint8_t retval;
	if(gCDC_TxSelect&0x01)
 800d682:	4b16      	ldr	r3, [pc, #88]	; (800d6dc <CDC_TxFifoFlush+0x60>)
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <CDC_TxFifoFlush+0x18>
		ptx_buf = &CDC_TxBuff1;
 800d68e:	4b14      	ldr	r3, [pc, #80]	; (800d6e0 <CDC_TxFifoFlush+0x64>)
 800d690:	607b      	str	r3, [r7, #4]
 800d692:	e001      	b.n	800d698 <CDC_TxFifoFlush+0x1c>
	else
		ptx_buf = &CDC_TxBuff2;
 800d694:	4b13      	ldr	r3, [pc, #76]	; (800d6e4 <CDC_TxFifoFlush+0x68>)
 800d696:	607b      	str	r3, [r7, #4]

	if (ptx_buf->write_index == 0)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	88db      	ldrh	r3, [r3, #6]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <CDC_TxFifoFlush+0x28>
		return 1;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e017      	b.n	800d6d4 <CDC_TxFifoFlush+0x58>

	// flush to usb in ep fifo
	while(!ptx_buf->read_enable);
 800d6a4:	bf00      	nop
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	7a1b      	ldrb	r3, [r3, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0fb      	beq.n	800d6a6 <CDC_TxFifoFlush+0x2a>
	retval = CDC_Transmit_FS(ptx_buf->buff, ptx_buf->write_index);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	88db      	ldrh	r3, [r3, #6]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7ff ff65 	bl	800d588 <CDC_Transmit_FS>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	70fb      	strb	r3, [r7, #3]

	if(retval == USBD_OK)
 800d6c2:	78fb      	ldrb	r3, [r7, #3]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d104      	bne.n	800d6d2 <CDC_TxFifoFlush+0x56>
	{
		// change fifo to insert operation so avoiding conflict during flush
		ptx_buf->write_index = 0;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	80da      	strh	r2, [r3, #6]
		return 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e000      	b.n	800d6d4 <CDC_TxFifoFlush+0x58>
	}
	return 1;
 800d6d2:	2301      	movs	r3, #1
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	240001a2 	.word	0x240001a2
 800d6e0:	2400107c 	.word	0x2400107c
 800d6e4:	24002090 	.word	0x24002090

0800d6e8 <CDC_TransmitWithFifo_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
void CDC_TransmitWithFifo_FS(uint8_t* Buf, uint16_t Len)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	807b      	strh	r3, [r7, #2]
  uint16_t cur_size;
  cur_size = CDC_TxFifoInsert(Buf, Len);
 800d6f4:	887b      	ldrh	r3, [r7, #2]
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff ff7d 	bl	800d5f8 <CDC_TxFifoInsert>
 800d6fe:	4603      	mov	r3, r0
 800d700:	81fb      	strh	r3, [r7, #14]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d702:	4b0f      	ldr	r3, [pc, #60]	; (800d740 <CDC_TransmitWithFifo_FS+0x58>)
 800d704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d708:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d710:	2b00      	cmp	r3, #0
 800d712:	d111      	bne.n	800d738 <CDC_TransmitWithFifo_FS+0x50>
	  return;
  }
  if((cur_size > APP_TX_DATA_SIZE/4) && (!FlushFlag))
 800d714:	89fb      	ldrh	r3, [r7, #14]
 800d716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d71a:	d90e      	bls.n	800d73a <CDC_TransmitWithFifo_FS+0x52>
 800d71c:	4b09      	ldr	r3, [pc, #36]	; (800d744 <CDC_TransmitWithFifo_FS+0x5c>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10a      	bne.n	800d73a <CDC_TransmitWithFifo_FS+0x52>
  {
	  FlushFlag = 1;
 800d724:	4b07      	ldr	r3, [pc, #28]	; (800d744 <CDC_TransmitWithFifo_FS+0x5c>)
 800d726:	2201      	movs	r2, #1
 800d728:	701a      	strb	r2, [r3, #0]
  	  gCDC_TxSelect++;
 800d72a:	4b07      	ldr	r3, [pc, #28]	; (800d748 <CDC_TransmitWithFifo_FS+0x60>)
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	3301      	adds	r3, #1
 800d730:	b2da      	uxtb	r2, r3
 800d732:	4b05      	ldr	r3, [pc, #20]	; (800d748 <CDC_TransmitWithFifo_FS+0x60>)
 800d734:	701a      	strb	r2, [r3, #0]
 800d736:	e000      	b.n	800d73a <CDC_TransmitWithFifo_FS+0x52>
	  return;
 800d738:	bf00      	nop
  }
//	  CDC_TxFifoFlush();
}
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	240005ac 	.word	0x240005ac
 800d744:	240001a1 	.word	0x240001a1
 800d748:	240001a2 	.word	0x240001a2

0800d74c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	4603      	mov	r3, r0
 800d754:	6039      	str	r1, [r7, #0]
 800d756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	2212      	movs	r2, #18
 800d75c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d75e:	4b03      	ldr	r3, [pc, #12]	; (800d76c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d760:	4618      	mov	r0, r3
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr
 800d76c:	24000150 	.word	0x24000150

0800d770 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	4603      	mov	r3, r0
 800d778:	6039      	str	r1, [r7, #0]
 800d77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	2204      	movs	r2, #4
 800d780:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d782:	4b03      	ldr	r3, [pc, #12]	; (800d790 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d784:	4618      	mov	r0, r3
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	24000164 	.word	0x24000164

0800d794 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	6039      	str	r1, [r7, #0]
 800d79e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d105      	bne.n	800d7b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	4907      	ldr	r1, [pc, #28]	; (800d7c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7aa:	4808      	ldr	r0, [pc, #32]	; (800d7cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d7ac:	f7ff fce3 	bl	800d176 <USBD_GetString>
 800d7b0:	e004      	b.n	800d7bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	4904      	ldr	r1, [pc, #16]	; (800d7c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7b6:	4805      	ldr	r0, [pc, #20]	; (800d7cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d7b8:	f7ff fcdd 	bl	800d176 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7bc:	4b02      	ldr	r3, [pc, #8]	; (800d7c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	2400209c 	.word	0x2400209c
 800d7cc:	0800e084 	.word	0x0800e084

0800d7d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	6039      	str	r1, [r7, #0]
 800d7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	4904      	ldr	r1, [pc, #16]	; (800d7f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d7e0:	4804      	ldr	r0, [pc, #16]	; (800d7f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d7e2:	f7ff fcc8 	bl	800d176 <USBD_GetString>
  return USBD_StrDesc;
 800d7e6:	4b02      	ldr	r3, [pc, #8]	; (800d7f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	2400209c 	.word	0x2400209c
 800d7f4:	0800e09c 	.word	0x0800e09c

0800d7f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	6039      	str	r1, [r7, #0]
 800d802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	221a      	movs	r2, #26
 800d808:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d80a:	f000 f843 	bl	800d894 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d80e:	4b02      	ldr	r3, [pc, #8]	; (800d818 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	24000168 	.word	0x24000168

0800d81c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	4603      	mov	r3, r0
 800d824:	6039      	str	r1, [r7, #0]
 800d826:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d828:	79fb      	ldrb	r3, [r7, #7]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d105      	bne.n	800d83a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	4907      	ldr	r1, [pc, #28]	; (800d850 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d832:	4808      	ldr	r0, [pc, #32]	; (800d854 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d834:	f7ff fc9f 	bl	800d176 <USBD_GetString>
 800d838:	e004      	b.n	800d844 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d83a:	683a      	ldr	r2, [r7, #0]
 800d83c:	4904      	ldr	r1, [pc, #16]	; (800d850 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d83e:	4805      	ldr	r0, [pc, #20]	; (800d854 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d840:	f7ff fc99 	bl	800d176 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d844:	4b02      	ldr	r3, [pc, #8]	; (800d850 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d846:	4618      	mov	r0, r3
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	2400209c 	.word	0x2400209c
 800d854:	0800e0b0 	.word	0x0800e0b0

0800d858 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	6039      	str	r1, [r7, #0]
 800d862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d864:	79fb      	ldrb	r3, [r7, #7]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d105      	bne.n	800d876 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	4907      	ldr	r1, [pc, #28]	; (800d88c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d86e:	4808      	ldr	r0, [pc, #32]	; (800d890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d870:	f7ff fc81 	bl	800d176 <USBD_GetString>
 800d874:	e004      	b.n	800d880 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d876:	683a      	ldr	r2, [r7, #0]
 800d878:	4904      	ldr	r1, [pc, #16]	; (800d88c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d87a:	4805      	ldr	r0, [pc, #20]	; (800d890 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d87c:	f7ff fc7b 	bl	800d176 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d880:	4b02      	ldr	r3, [pc, #8]	; (800d88c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	2400209c 	.word	0x2400209c
 800d890:	0800e0bc 	.word	0x0800e0bc

0800d894 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d89a:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <Get_SerialNum+0x44>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	; (800d8dc <Get_SerialNum+0x48>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8a6:	4b0e      	ldr	r3, [pc, #56]	; (800d8e0 <Get_SerialNum+0x4c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d009      	beq.n	800d8ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8ba:	2208      	movs	r2, #8
 800d8bc:	4909      	ldr	r1, [pc, #36]	; (800d8e4 <Get_SerialNum+0x50>)
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f000 f814 	bl	800d8ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	4908      	ldr	r1, [pc, #32]	; (800d8e8 <Get_SerialNum+0x54>)
 800d8c8:	68b8      	ldr	r0, [r7, #8]
 800d8ca:	f000 f80f 	bl	800d8ec <IntToUnicode>
  }
}
 800d8ce:	bf00      	nop
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	1ff1e800 	.word	0x1ff1e800
 800d8dc:	1ff1e804 	.word	0x1ff1e804
 800d8e0:	1ff1e808 	.word	0x1ff1e808
 800d8e4:	2400016a 	.word	0x2400016a
 800d8e8:	2400017a 	.word	0x2400017a

0800d8ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b087      	sub	sp, #28
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d8fe:	2300      	movs	r3, #0
 800d900:	75fb      	strb	r3, [r7, #23]
 800d902:	e027      	b.n	800d954 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	0f1b      	lsrs	r3, r3, #28
 800d908:	2b09      	cmp	r3, #9
 800d90a:	d80b      	bhi.n	800d924 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	0f1b      	lsrs	r3, r3, #28
 800d910:	b2da      	uxtb	r2, r3
 800d912:	7dfb      	ldrb	r3, [r7, #23]
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	4619      	mov	r1, r3
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	440b      	add	r3, r1
 800d91c:	3230      	adds	r2, #48	; 0x30
 800d91e:	b2d2      	uxtb	r2, r2
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	e00a      	b.n	800d93a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	0f1b      	lsrs	r3, r3, #28
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	7dfb      	ldrb	r3, [r7, #23]
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	4619      	mov	r1, r3
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	440b      	add	r3, r1
 800d934:	3237      	adds	r2, #55	; 0x37
 800d936:	b2d2      	uxtb	r2, r2
 800d938:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	011b      	lsls	r3, r3, #4
 800d93e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d940:	7dfb      	ldrb	r3, [r7, #23]
 800d942:	005b      	lsls	r3, r3, #1
 800d944:	3301      	adds	r3, #1
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	4413      	add	r3, r2
 800d94a:	2200      	movs	r2, #0
 800d94c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
 800d950:	3301      	adds	r3, #1
 800d952:	75fb      	strb	r3, [r7, #23]
 800d954:	7dfa      	ldrb	r2, [r7, #23]
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d3d3      	bcc.n	800d904 <IntToUnicode+0x18>
  }
}
 800d95c:	bf00      	nop
 800d95e:	bf00      	nop
 800d960:	371c      	adds	r7, #28
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
	...

0800d96c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b0b8      	sub	sp, #224	; 0xe0
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d974:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	605a      	str	r2, [r3, #4]
 800d97e:	609a      	str	r2, [r3, #8]
 800d980:	60da      	str	r2, [r3, #12]
 800d982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d984:	f107 0310 	add.w	r3, r7, #16
 800d988:	22bc      	movs	r2, #188	; 0xbc
 800d98a:	2100      	movs	r1, #0
 800d98c:	4618      	mov	r0, r3
 800d98e:	f000 fb65 	bl	800e05c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a33      	ldr	r2, [pc, #204]	; (800da64 <HAL_PCD_MspInit+0xf8>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d15e      	bne.n	800da5a <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d99c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d9a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d9a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d9a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d9aa:	f107 0310 	add.w	r3, r7, #16
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f8 fc94 	bl	80062dc <HAL_RCCEx_PeriphCLKConfig>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800d9ba:	f7f3 f92b 	bl	8000c14 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d9be:	f7f7 fcc5 	bl	800534c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9c2:	4b29      	ldr	r3, [pc, #164]	; (800da68 <HAL_PCD_MspInit+0xfc>)
 800d9c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d9c8:	4a27      	ldr	r2, [pc, #156]	; (800da68 <HAL_PCD_MspInit+0xfc>)
 800d9ca:	f043 0301 	orr.w	r3, r3, #1
 800d9ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d9d2:	4b25      	ldr	r3, [pc, #148]	; (800da68 <HAL_PCD_MspInit+0xfc>)
 800d9d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800d9e0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800d9e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d9fa:	230a      	movs	r3, #10
 800d9fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800da04:	4619      	mov	r1, r3
 800da06:	4819      	ldr	r0, [pc, #100]	; (800da6c <HAL_PCD_MspInit+0x100>)
 800da08:	f7f6 f8b4 	bl	8003b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800da0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da14:	2300      	movs	r3, #0
 800da16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800da24:	4619      	mov	r1, r3
 800da26:	4811      	ldr	r0, [pc, #68]	; (800da6c <HAL_PCD_MspInit+0x100>)
 800da28:	f7f6 f8a4 	bl	8003b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da2c:	4b0e      	ldr	r3, [pc, #56]	; (800da68 <HAL_PCD_MspInit+0xfc>)
 800da2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800da32:	4a0d      	ldr	r2, [pc, #52]	; (800da68 <HAL_PCD_MspInit+0xfc>)
 800da34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800da38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800da3c:	4b0a      	ldr	r3, [pc, #40]	; (800da68 <HAL_PCD_MspInit+0xfc>)
 800da3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800da42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da46:	60bb      	str	r3, [r7, #8]
 800da48:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da4a:	2200      	movs	r2, #0
 800da4c:	2100      	movs	r1, #0
 800da4e:	2065      	movs	r0, #101	; 0x65
 800da50:	f7f3 fd25 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da54:	2065      	movs	r0, #101	; 0x65
 800da56:	f7f3 fd3c 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da5a:	bf00      	nop
 800da5c:	37e0      	adds	r7, #224	; 0xe0
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	40080000 	.word	0x40080000
 800da68:	58024400 	.word	0x58024400
 800da6c:	58020000 	.word	0x58020000

0800da70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f7fe fb8e 	bl	800c1a8 <USBD_LL_SetupStage>
}
 800da8c:	bf00      	nop
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	460b      	mov	r3, r1
 800da9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800daa6:	78fa      	ldrb	r2, [r7, #3]
 800daa8:	6879      	ldr	r1, [r7, #4]
 800daaa:	4613      	mov	r3, r2
 800daac:	00db      	lsls	r3, r3, #3
 800daae:	1a9b      	subs	r3, r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	440b      	add	r3, r1
 800dab4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	78fb      	ldrb	r3, [r7, #3]
 800dabc:	4619      	mov	r1, r3
 800dabe:	f7fe fbc8 	bl	800c252 <USBD_LL_DataOutStage>
}
 800dac2:	bf00      	nop
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b082      	sub	sp, #8
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	460b      	mov	r3, r1
 800dad4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dadc:	78fa      	ldrb	r2, [r7, #3]
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	4613      	mov	r3, r2
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	1a9b      	subs	r3, r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	440b      	add	r3, r1
 800daea:	3348      	adds	r3, #72	; 0x48
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	78fb      	ldrb	r3, [r7, #3]
 800daf0:	4619      	mov	r1, r3
 800daf2:	f7fe fc11 	bl	800c318 <USBD_LL_DataInStage>
}
 800daf6:	bf00      	nop
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b082      	sub	sp, #8
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7fe fd25 	bl	800c55c <USBD_LL_SOF>
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db22:	2301      	movs	r3, #1
 800db24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d102      	bne.n	800db34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800db2e:	2300      	movs	r3, #0
 800db30:	73fb      	strb	r3, [r7, #15]
 800db32:	e008      	b.n	800db46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d102      	bne.n	800db42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800db3c:	2301      	movs	r3, #1
 800db3e:	73fb      	strb	r3, [r7, #15]
 800db40:	e001      	b.n	800db46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800db42:	f7f3 f867 	bl	8000c14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db4c:	7bfa      	ldrb	r2, [r7, #15]
 800db4e:	4611      	mov	r1, r2
 800db50:	4618      	mov	r0, r3
 800db52:	f7fe fcc5 	bl	800c4e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe fc71 	bl	800c444 <USBD_LL_Reset>
}
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7fe fcc0 	bl	800c500 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	6812      	ldr	r2, [r2, #0]
 800db8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db92:	f043 0301 	orr.w	r3, r3, #1
 800db96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d005      	beq.n	800dbac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dba0:	4b04      	ldr	r3, [pc, #16]	; (800dbb4 <HAL_PCD_SuspendCallback+0x48>)
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	4a03      	ldr	r2, [pc, #12]	; (800dbb4 <HAL_PCD_SuspendCallback+0x48>)
 800dba6:	f043 0306 	orr.w	r3, r3, #6
 800dbaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	e000ed00 	.word	0xe000ed00

0800dbb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fe fcb0 	bl	800c52c <USBD_LL_Resume>
}
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	460b      	mov	r3, r1
 800dbde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dbe6:	78fa      	ldrb	r2, [r7, #3]
 800dbe8:	4611      	mov	r1, r2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fe fcfe 	bl	800c5ec <USBD_LL_IsoOUTIncomplete>
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc0a:	78fa      	ldrb	r2, [r7, #3]
 800dc0c:	4611      	mov	r1, r2
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fe fcc6 	bl	800c5a0 <USBD_LL_IsoINIncomplete>
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fe fd04 	bl	800c638 <USBD_LL_DevConnected>
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fe fd01 	bl	800c64e <USBD_LL_DevDisconnected>
}
 800dc4c:	bf00      	nop
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d13e      	bne.n	800dce2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc64:	4a21      	ldr	r2, [pc, #132]	; (800dcec <USBD_LL_Init+0x98>)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a1f      	ldr	r2, [pc, #124]	; (800dcec <USBD_LL_Init+0x98>)
 800dc70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc74:	4b1d      	ldr	r3, [pc, #116]	; (800dcec <USBD_LL_Init+0x98>)
 800dc76:	4a1e      	ldr	r2, [pc, #120]	; (800dcf0 <USBD_LL_Init+0x9c>)
 800dc78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800dc7a:	4b1c      	ldr	r3, [pc, #112]	; (800dcec <USBD_LL_Init+0x98>)
 800dc7c:	2209      	movs	r2, #9
 800dc7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc80:	4b1a      	ldr	r3, [pc, #104]	; (800dcec <USBD_LL_Init+0x98>)
 800dc82:	2202      	movs	r2, #2
 800dc84:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc86:	4b19      	ldr	r3, [pc, #100]	; (800dcec <USBD_LL_Init+0x98>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc8c:	4b17      	ldr	r3, [pc, #92]	; (800dcec <USBD_LL_Init+0x98>)
 800dc8e:	2202      	movs	r2, #2
 800dc90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800dc92:	4b16      	ldr	r3, [pc, #88]	; (800dcec <USBD_LL_Init+0x98>)
 800dc94:	2201      	movs	r2, #1
 800dc96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc98:	4b14      	ldr	r3, [pc, #80]	; (800dcec <USBD_LL_Init+0x98>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc9e:	4b13      	ldr	r3, [pc, #76]	; (800dcec <USBD_LL_Init+0x98>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800dca4:	4b11      	ldr	r3, [pc, #68]	; (800dcec <USBD_LL_Init+0x98>)
 800dca6:	2201      	movs	r2, #1
 800dca8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800dcaa:	4b10      	ldr	r3, [pc, #64]	; (800dcec <USBD_LL_Init+0x98>)
 800dcac:	2201      	movs	r2, #1
 800dcae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dcb0:	4b0e      	ldr	r3, [pc, #56]	; (800dcec <USBD_LL_Init+0x98>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dcb6:	480d      	ldr	r0, [pc, #52]	; (800dcec <USBD_LL_Init+0x98>)
 800dcb8:	f7f6 f93f 	bl	8003f3a <HAL_PCD_Init>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d001      	beq.n	800dcc6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800dcc2:	f7f2 ffa7 	bl	8000c14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dcc6:	2180      	movs	r1, #128	; 0x80
 800dcc8:	4808      	ldr	r0, [pc, #32]	; (800dcec <USBD_LL_Init+0x98>)
 800dcca:	f7f7 fac4 	bl	8005256 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dcce:	2240      	movs	r2, #64	; 0x40
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	4806      	ldr	r0, [pc, #24]	; (800dcec <USBD_LL_Init+0x98>)
 800dcd4:	f7f7 fa78 	bl	80051c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dcd8:	2280      	movs	r2, #128	; 0x80
 800dcda:	2101      	movs	r1, #1
 800dcdc:	4803      	ldr	r0, [pc, #12]	; (800dcec <USBD_LL_Init+0x98>)
 800dcde:	f7f7 fa73 	bl	80051c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	2400229c 	.word	0x2400229c
 800dcf0:	40080000 	.word	0x40080000

0800dcf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7f6 fa39 	bl	8004182 <HAL_PCD_Start>
 800dd10:	4603      	mov	r3, r0
 800dd12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd14:	7bfb      	ldrb	r3, [r7, #15]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 f942 	bl	800dfa0 <USBD_Get_USB_Status>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	4608      	mov	r0, r1
 800dd34:	4611      	mov	r1, r2
 800dd36:	461a      	mov	r2, r3
 800dd38:	4603      	mov	r3, r0
 800dd3a:	70fb      	strb	r3, [r7, #3]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	70bb      	strb	r3, [r7, #2]
 800dd40:	4613      	mov	r3, r2
 800dd42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd52:	78bb      	ldrb	r3, [r7, #2]
 800dd54:	883a      	ldrh	r2, [r7, #0]
 800dd56:	78f9      	ldrb	r1, [r7, #3]
 800dd58:	f7f6 fe3e 	bl	80049d8 <HAL_PCD_EP_Open>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd60:	7bfb      	ldrb	r3, [r7, #15]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 f91c 	bl	800dfa0 <USBD_Get_USB_Status>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b084      	sub	sp, #16
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	460b      	mov	r3, r1
 800dd80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd90:	78fa      	ldrb	r2, [r7, #3]
 800dd92:	4611      	mov	r1, r2
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7f6 fe87 	bl	8004aa8 <HAL_PCD_EP_Close>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 f8fd 	bl	800dfa0 <USBD_Get_USB_Status>
 800dda6:	4603      	mov	r3, r0
 800dda8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ddce:	78fa      	ldrb	r2, [r7, #3]
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7f6 ff5f 	bl	8004c96 <HAL_PCD_EP_SetStall>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 f8de 	bl	800dfa0 <USBD_Get_USB_Status>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b084      	sub	sp, #16
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de0c:	78fa      	ldrb	r2, [r7, #3]
 800de0e:	4611      	mov	r1, r2
 800de10:	4618      	mov	r0, r3
 800de12:	f7f6 ffa4 	bl	8004d5e <HAL_PCD_EP_ClrStall>
 800de16:	4603      	mov	r3, r0
 800de18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 f8bf 	bl	800dfa0 <USBD_Get_USB_Status>
 800de22:	4603      	mov	r3, r0
 800de24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de26:	7bbb      	ldrb	r3, [r7, #14]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	da0b      	bge.n	800de64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de4c:	78fb      	ldrb	r3, [r7, #3]
 800de4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de52:	68f9      	ldr	r1, [r7, #12]
 800de54:	4613      	mov	r3, r2
 800de56:	00db      	lsls	r3, r3, #3
 800de58:	1a9b      	subs	r3, r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	440b      	add	r3, r1
 800de5e:	333e      	adds	r3, #62	; 0x3e
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	e00b      	b.n	800de7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de64:	78fb      	ldrb	r3, [r7, #3]
 800de66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de6a:	68f9      	ldr	r1, [r7, #12]
 800de6c:	4613      	mov	r3, r2
 800de6e:	00db      	lsls	r3, r3, #3
 800de70:	1a9b      	subs	r3, r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	440b      	add	r3, r1
 800de76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	460b      	mov	r3, r1
 800de92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dea2:	78fa      	ldrb	r2, [r7, #3]
 800dea4:	4611      	mov	r1, r2
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7f6 fd71 	bl	800498e <HAL_PCD_SetAddress>
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 f874 	bl	800dfa0 <USBD_Get_USB_Status>
 800deb8:	4603      	mov	r3, r0
 800deba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800debc:	7bbb      	ldrb	r3, [r7, #14]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b086      	sub	sp, #24
 800deca:	af00      	add	r7, sp, #0
 800decc:	60f8      	str	r0, [r7, #12]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
 800ded2:	460b      	mov	r3, r1
 800ded4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dee4:	7af9      	ldrb	r1, [r7, #11]
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	f7f6 fe8a 	bl	8004c02 <HAL_PCD_EP_Transmit>
 800deee:	4603      	mov	r3, r0
 800def0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800def2:	7dfb      	ldrb	r3, [r7, #23]
 800def4:	4618      	mov	r0, r3
 800def6:	f000 f853 	bl	800dfa0 <USBD_Get_USB_Status>
 800defa:	4603      	mov	r3, r0
 800defc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800defe:	7dbb      	ldrb	r3, [r7, #22]
}
 800df00:	4618      	mov	r0, r3
 800df02:	3718      	adds	r7, #24
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b086      	sub	sp, #24
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	607a      	str	r2, [r7, #4]
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	460b      	mov	r3, r1
 800df16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df26:	7af9      	ldrb	r1, [r7, #11]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	f7f6 fe06 	bl	8004b3c <HAL_PCD_EP_Receive>
 800df30:	4603      	mov	r3, r0
 800df32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df34:	7dfb      	ldrb	r3, [r7, #23]
 800df36:	4618      	mov	r0, r3
 800df38:	f000 f832 	bl	800dfa0 <USBD_Get_USB_Status>
 800df3c:	4603      	mov	r3, r0
 800df3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df40:	7dbb      	ldrb	r3, [r7, #22]
}
 800df42:	4618      	mov	r0, r3
 800df44:	3718      	adds	r7, #24
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b082      	sub	sp, #8
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	460b      	mov	r3, r1
 800df54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df5c:	78fa      	ldrb	r2, [r7, #3]
 800df5e:	4611      	mov	r1, r2
 800df60:	4618      	mov	r0, r3
 800df62:	f7f6 fe36 	bl	8004bd2 <HAL_PCD_EP_GetRxCount>
 800df66:	4603      	mov	r3, r0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df78:	4b03      	ldr	r3, [pc, #12]	; (800df88 <USBD_static_malloc+0x18>)
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	240001a4 	.word	0x240001a4

0800df8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]

}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b03      	cmp	r3, #3
 800dfb2:	d817      	bhi.n	800dfe4 <USBD_Get_USB_Status+0x44>
 800dfb4:	a201      	add	r2, pc, #4	; (adr r2, 800dfbc <USBD_Get_USB_Status+0x1c>)
 800dfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfba:	bf00      	nop
 800dfbc:	0800dfcd 	.word	0x0800dfcd
 800dfc0:	0800dfd3 	.word	0x0800dfd3
 800dfc4:	0800dfd9 	.word	0x0800dfd9
 800dfc8:	0800dfdf 	.word	0x0800dfdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd0:	e00b      	b.n	800dfea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfd2:	2303      	movs	r3, #3
 800dfd4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd6:	e008      	b.n	800dfea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	73fb      	strb	r3, [r7, #15]
    break;
 800dfdc:	e005      	b.n	800dfea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe2:	e002      	b.n	800dfea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe8:	bf00      	nop
  }
  return usb_status;
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <__libc_init_array>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	4d0d      	ldr	r5, [pc, #52]	; (800e030 <__libc_init_array+0x38>)
 800dffc:	4c0d      	ldr	r4, [pc, #52]	; (800e034 <__libc_init_array+0x3c>)
 800dffe:	1b64      	subs	r4, r4, r5
 800e000:	10a4      	asrs	r4, r4, #2
 800e002:	2600      	movs	r6, #0
 800e004:	42a6      	cmp	r6, r4
 800e006:	d109      	bne.n	800e01c <__libc_init_array+0x24>
 800e008:	4d0b      	ldr	r5, [pc, #44]	; (800e038 <__libc_init_array+0x40>)
 800e00a:	4c0c      	ldr	r4, [pc, #48]	; (800e03c <__libc_init_array+0x44>)
 800e00c:	f000 f82e 	bl	800e06c <_init>
 800e010:	1b64      	subs	r4, r4, r5
 800e012:	10a4      	asrs	r4, r4, #2
 800e014:	2600      	movs	r6, #0
 800e016:	42a6      	cmp	r6, r4
 800e018:	d105      	bne.n	800e026 <__libc_init_array+0x2e>
 800e01a:	bd70      	pop	{r4, r5, r6, pc}
 800e01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e020:	4798      	blx	r3
 800e022:	3601      	adds	r6, #1
 800e024:	e7ee      	b.n	800e004 <__libc_init_array+0xc>
 800e026:	f855 3b04 	ldr.w	r3, [r5], #4
 800e02a:	4798      	blx	r3
 800e02c:	3601      	adds	r6, #1
 800e02e:	e7f2      	b.n	800e016 <__libc_init_array+0x1e>
 800e030:	0800e114 	.word	0x0800e114
 800e034:	0800e114 	.word	0x0800e114
 800e038:	0800e114 	.word	0x0800e114
 800e03c:	0800e118 	.word	0x0800e118

0800e040 <memcpy>:
 800e040:	440a      	add	r2, r1
 800e042:	4291      	cmp	r1, r2
 800e044:	f100 33ff 	add.w	r3, r0, #4294967295
 800e048:	d100      	bne.n	800e04c <memcpy+0xc>
 800e04a:	4770      	bx	lr
 800e04c:	b510      	push	{r4, lr}
 800e04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e052:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e056:	4291      	cmp	r1, r2
 800e058:	d1f9      	bne.n	800e04e <memcpy+0xe>
 800e05a:	bd10      	pop	{r4, pc}

0800e05c <memset>:
 800e05c:	4402      	add	r2, r0
 800e05e:	4603      	mov	r3, r0
 800e060:	4293      	cmp	r3, r2
 800e062:	d100      	bne.n	800e066 <memset+0xa>
 800e064:	4770      	bx	lr
 800e066:	f803 1b01 	strb.w	r1, [r3], #1
 800e06a:	e7f9      	b.n	800e060 <memset+0x4>

0800e06c <_init>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	bf00      	nop
 800e070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e072:	bc08      	pop	{r3}
 800e074:	469e      	mov	lr, r3
 800e076:	4770      	bx	lr

0800e078 <_fini>:
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07a:	bf00      	nop
 800e07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07e:	bc08      	pop	{r3}
 800e080:	469e      	mov	lr, r3
 800e082:	4770      	bx	lr
